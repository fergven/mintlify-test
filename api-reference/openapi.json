{
  "components": {
    "examples": {
      "200DeletedCyberArksCredExample": {
        "description": "In this example, two CyberArk credential configuration were successfully deleted.",
        "value": {
          "count": 2,
          "idsCredentialsDeleted": [
            "94e86140-d85f-11ed-afa1-0242ac120002",
            "b127028c-d88a-11ed-afa1-0242ac120002"
          ]
        }
      },
      "200GetCyberArkConfExample": {
        "description": "In this example the, response contains the received configuration for a CyberArk provider.",
        "value": {
          "cmsDetails": {
            "appID": "my_cyberArk_app",
            "baseUrl": "https://my_cyberark",
            "certificateBundle": "IICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUF...",
            "certificatePassword": "***********"
          },
          "cmsType": "cyberark",
          "companyId": "5da61974-4427-11ed-b878-0242ac120002",
          "id": "72e4c1f6-d85f-11ed-afa1-0242ac120002",
          "vSatelliteIds": [
            "17700d91-cdee-4f23-a841-0345ea6d61a1",
            "bf787573-0927-4452-b607-974567dfea18"
          ]
        }
      },
      "200GetCyberArkCredExample": {
        "description": "In this example, the CyberArk credential is obtained with its\ndetails*(references, credentialDetails, createdOn, createdBy, lastModifiedOn and lastModifiedBy properties)*.\n",
        "value": {
          "authType": "password",
          "cmsConfigId": "3ff5ca72-fdc8-472b-964f-c5efd1778c26",
          "cmsType": "cyberark",
          "createdBy": "c51d00f9-d4a3-4e86-add2-79ff935e8c97",
          "createdOn": "2023-07-06T00:00:00Z",
          "credentialDetails": {
            "folder": "TLS_Protect_Cloud_credentials",
            "objectName": "my_stored_cyberark_credential01",
            "safe": "safe_path"
          },
          "id": "94e86140-d85f-11ed-afa1-0242ac120002",
          "lastModifiedBy": "c51d00f9-d4a3-4e86-add2-79ff935e8c97",
          "lastModifiedOn": "2023-07-07T00:00:00Z",
          "name": "my_cyberark_cred_01",
          "references": [
            {
              "id": "195b6043-0f9f-4d0f-8758-b407ffef64bd",
              "type": "machine"
            }
          ],
          "teamsIds": [
            "69445b95-da76-4d35-ba3c-7f8293dc8bce",
            "2fc5a610-d599-11ed-afa1-0242ac120002"
          ]
        }
      },
      "200GetCyberArkCredWithoutDetailsExample": {
        "description": "In this example, the CyberArk credential is obtained without its\ndetails*(references, credentialDetails, createdOn, createdBy, lastModifiedOn and lastModifiedBy properties)*.\n",
        "value": {
          "authType": "password",
          "cmsConfigId": "3ff5ca72-fdc8-472b-964f-c5efd1778c26",
          "cmsType": "cyberark",
          "id": "94e86140-d85f-11ed-afa1-0242ac120002",
          "name": "my_cyberark_cred_01",
          "teamsIds": [
            "69445b95-da76-4d35-ba3c-7f8293dc8bce",
            "2fc5a610-d599-11ed-afa1-0242ac120002"
          ]
        }
      },
      "200GetCyberArksConfExample": {
        "description": "In this example, the response contains an array with one configuration for a CyberArk provider.",
        "value": {
          "cmsConfigurations": [
            {
              "cmsDetails": {
                "appID": "my_cyberArk_app",
                "baseUrl": "https://my_cyberark",
                "certificateBundle": "IICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUF...",
                "certificatePassword": "***********"
              },
              "cmsType": "cyberark",
              "companyId": "5da61974-4427-11ed-b878-0242ac120002",
              "id": "72e4c1f6-d85f-11ed-afa1-0242ac120002",
              "vSatelliteIds": [
                "17700d91-cdee-4f23-a841-0345ea6d61a1",
                "bf787573-0927-4452-b607-974567dfea18"
              ]
            }
          ],
          "count": 1
        }
      },
      "200GetCyberArksCredExample": {
        "description": "In this example, two CyberArk credentials configurations are obtained with their \ndetails*(references, credentialDetails, createdOn, createdBy, lastModifiedOn and lastModifiedBy properties)*; \nthe first one contains a **reference** but the second one has not any **reference** yet.\n",
        "value": {
          "count": 2,
          "credentials": [
            {
              "authType": "password",
              "cmsConfigId": "3ff5ca72-fdc8-472b-964f-c5efd1778c26",
              "cmsType": "cyberark",
              "createdBy": "c51d00f9-d4a3-4e86-add2-79ff935e8c97",
              "createdOn": "2023-07-06T00:00:00Z",
              "credentialDetails": {
                "folder": "TLS_Protect_Cloud_credentials",
                "objectName": "my_stored_cyberark_credential01",
                "safe": "safe_path"
              },
              "id": "94e86140-d85f-11ed-afa1-0242ac120002",
              "lastModifiedBy": "c51d00f9-d4a3-4e86-add2-79ff935e8c97",
              "lastModifiedOn": "2023-07-07T00:00:00Z",
              "name": "my_cyberark_cred_01",
              "references": [
                {
                  "id": "195b6043-0f9f-4d0f-8758-b407ffef64bd",
                  "type": "machine"
                }
              ],
              "teamsIds": [
                "69445b95-da76-4d35-ba3c-7f8293dc8bce",
                "2fc5a610-d599-11ed-afa1-0242ac120002"
              ]
            },
            {
              "authType": "username_password",
              "cmsConfigId": "3ff5ca72-fdc8-472b-964f-c5efd1778c26",
              "cmsType": "cyberark",
              "createdBy": "c51d00f9-d4a3-4e86-add2-79ff935e8c97",
              "createdOn": "2023-07-05T00:00:00Z",
              "credentialDetails": {
                "folder": "TLS_Protect_Cloud_credentials",
                "objectName": "my_stored_cyberark_credential02",
                "safe": "safe_path"
              },
              "id": "b127028c-d88a-11ed-afa1-0242ac120002",
              "lastModifiedBy": "c51d00f9-d4a3-4e86-add2-79ff935e8c97",
              "lastModifiedOn": "2023-07-06T00:00:00Z",
              "name": "my_cyberark_cred_02",
              "teamsIds": [
                "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "2fc5a610-d599-11ed-afa1-0242ac120002"
              ]
            }
          ]
        }
      },
      "200GetCyberArksCredWithoutDetailsExample": {
        "description": "In this example, one CyberArk credential is obtained without its\ndetails*(references, credentialDetails, createdOn, createdBy, lastModifiedOn and lastModifiedBy properties)*.\n",
        "value": {
          "count": 1,
          "credentials": [
            {
              "authType": "password",
              "cmsConfigId": "3ff5ca72-fdc8-472b-964f-c5efd1778c26",
              "cmsType": "cyberark",
              "id": "94e86140-d85f-11ed-afa1-0242ac120002",
              "name": "my_cyberark_cred_01",
              "teamsIds": [
                "69445b95-da76-4d35-ba3c-7f8293dc8bce",
                "2fc5a610-d599-11ed-afa1-0242ac120002"
              ]
            }
          ]
        }
      },
      "200TestCyberArkConfExample": {
        "value": {
          "workflowId": "17700d91-cdee-4f23-a841-0345ea6d61a1",
          "workflowName": "validateConfiguration"
        }
      },
      "200TestCyberArkCredExample": {
        "value": {
          "workflowId": "17700d91-cdee-4f23-a841-0345ea6d61a1",
          "workflowName": "validateCredential"
        }
      },
      "200UpdatedCyberArkConfExample": {
        "description": "In this example, the response contains the updated configuration for a CyberArk provider.",
        "value": {
          "cmsDetails": {
            "appID": "my_cyberArk_app",
            "baseUrl": "https://my_cyberark",
            "certificateBundle": "IICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUF...",
            "certificatePassword": "***********"
          },
          "cmsType": "cyberark",
          "companyId": "5da61974-4427-11ed-b878-0242ac120002",
          "id": "72e4c1f6-d85f-11ed-afa1-0242ac120002",
          "vSatelliteIds": [
            "17700d91-cdee-4f23-a841-0345ea6d61a1",
            "bf787573-0927-4452-b607-974567dfea18"
          ]
        }
      },
      "200UpdatedCyberArkCredExample": {
        "value": {
          "authType": "password",
          "cmsConfigId": "3ff5ca72-fdc8-472b-964f-c5efd1778c26",
          "cmsType": "cyberark",
          "createdBy": "c51d00f9-d4a3-4e86-add2-79ff935e8c97",
          "createdOn": "2023-07-06T00:00:00Z",
          "credentialDetails": {
            "folder": "TLS_Protect_Cloud_credentials",
            "objectName": "my_stored_cyberark_credential01",
            "safe": "safe_path"
          },
          "id": "94e86140-d85f-11ed-afa1-0242ac120002",
          "lastModifiedBy": "c51d00f9-d4a3-4e86-add2-79ff935e8c97",
          "lastModifiedOn": "2023-07-07T00:00:00Z",
          "name": "my_cyberark_cred_01",
          "references": [
            {
              "id": "195b6043-0f9f-4d0f-8758-b407ffef64bd",
              "type": "machine"
            }
          ],
          "teamsIds": [
            "69445b95-da76-4d35-ba3c-7f8293dc8bce",
            "2fc5a610-d599-11ed-afa1-0242ac120002"
          ]
        }
      },
      "201AddedCyberArksCredExample": {
        "description": "In this example, two CyberArk credentials were successfully added.",
        "value": {
          "count": 2,
          "credentialsAdded": [
            {
              "authType": "password",
              "cmsConfigId": "3ff5ca72-fdc8-472b-964f-c5efd1778c26",
              "cmsType": "cyberark",
              "createdBy": "c51d00f9-d4a3-4e86-add2-79ff935e8c97",
              "createdOn": "2023-07-05T00:00:00Z",
              "credentialDetails": {
                "folder": "TLS_Protect_Cloud_credentials",
                "objectName": "my_stored_cyberark_credential01",
                "safe": "safe_path"
              },
              "id": "94e86140-d85f-11ed-afa1-0242ac120002",
              "name": "my_cyberark_cred_01",
              "teamsIds": [
                "69445b95-da76-4d35-ba3c-7f8293dc8bce",
                "2fc5a610-d599-11ed-afa1-0242ac120002"
              ]
            },
            {
              "authType": "username_password",
              "cmsConfigId": "3ff5ca72-fdc8-472b-964f-c5efd1778c26",
              "cmsType": "cyberark",
              "createdBy": "c51d00f9-d4a3-4e86-add2-79ff935e8c97",
              "createdOn": "2023-07-05T00:00:00Z",
              "credentialDetails": {
                "folder": "TLS_Protect_Cloud_credentials",
                "objectName": "my_stored_cyberark_credential02",
                "safe": "safe_path"
              },
              "id": "b127028c-d88a-11ed-afa1-0242ac120002",
              "name": "my_cyberark_cred_02",
              "teamsIds": [
                "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "2fc5a610-d599-11ed-afa1-0242ac120002"
              ]
            }
          ]
        }
      },
      "201CreatedCyberArksConfExample": {
        "description": "In this example, the response contains the created configuration for a CyberArk provider.",
        "value": {
          "cmsConfigurationsCreated": [
            {
              "cmsDetails": {
                "appID": "my_cyberArk_app",
                "baseUrl": "https://my_cyberark",
                "certificateBundle": "IICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUF...",
                "certificatePassword": "***********"
              },
              "cmsType": "cyberark",
              "companyId": "5da61974-4427-11ed-b878-0242ac120002",
              "id": "72e4c1f6-d85f-11ed-afa1-0242ac120002",
              "vSatelliteIds": [
                "17700d91-cdee-4f23-a841-0345ea6d61a1",
                "bf787573-0927-4452-b607-974567dfea18"
              ]
            }
          ],
          "count": 1
        }
      },
      "400UnsupportedCMSTypeExample": {
        "description": "An error response when the CMS type provided is not supported or valid.",
        "value": {
          "errors": [
            {
              "args": [
                {
                  "cms": "https://my_delinea"
                }
              ],
              "code": 90001,
              "message": "Bad Request. The cms type is not supported"
            }
          ]
        }
      },
      "AddCyberArksCredRequestBodyExample": {
        "description": "In this example, two CyberArk credentials configurations are going to be added to the same CyberArk configuration.",
        "value": {
          "credentials": [
            {
              "authType": "password",
              "cmsType": "cyberark",
              "credentialDetails": {
                "folder": "TLS_Protect_Cloud_credentials",
                "objectName": "my_stored_cyberark_credential01",
                "safe": "safe_path"
              },
              "name": "my_cyberark_cred_01",
              "teamsIds": [
                "69445b95-da76-4d35-ba3c-7f8293dc8bce",
                "2fc5a610-d599-11ed-afa1-0242ac120002"
              ]
            },
            {
              "authType": "username_password",
              "cmsType": "cyberark",
              "credentialDetails": {
                "folder": "TLS_Protect_Cloud_credentials",
                "objectName": "my_stored_cyberark_credential02",
                "safe": "safe_path"
              },
              "name": "my_cyberark_cred_02",
              "teamsIds": [
                "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "2fc5a610-d599-11ed-afa1-0242ac120002"
              ]
            }
          ]
        }
      },
      "ApplicationRenewalConfigurationExampleDefault": {
        "value": {
          "id": "22153ae0-4352-11ee-b95c-3531a284802b",
          "renewalActions": {
            "provision": false,
            "renew": false
          },
          "renewalWindow": {
            "inherit": true
          }
        }
      },
      "ApplicationRenewalConfigurationExampleModified": {
        "value": {
          "id": "22153ae0-4352-11ee-b95c-3531a284802b",
          "renewalActions": {
            "provision": false,
            "renew": true
          },
          "renewalWindow": {
            "days": 15,
            "inherit": false
          }
        }
      },
      "CreateCustomAPIReqBodyExample": {
        "value": {
          "applications": [
            "dc96438b-7a80-464b-a09b-9e5ec746c3e3",
            "5bce5ff4-a69b-4e78-9b7e-6d4029995000"
          ],
          "audience": "Audience",
          "authenticationType": "rsaKeyFederated",
          "issuerURL": "https://accounts.google.com/",
          "jwksURI": "https://www.googleapis.com/oauth2/v3/certs",
          "name": "Firefly SA",
          "owner": "2620f8e0-fdbf-11ee-b275-2754a4f7e272",
          "scopes": [
            "distributed-issuance"
          ],
          "subject": "Subject"
        }
      },
      "CreateCyberArksConfReqBodyExample": {
        "description": "In this request example, the details for the CyberArk provider will be created.",
        "value": {
          "cmsConfigurations": [
            {
              "cmsDetails": {
                "appID": "my_cyberArk_app",
                "baseUrl": "https://my_cyberark",
                "certificateBundle": "IICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUF...",
                "certificatePassword": "***********"
              },
              "cmsType": "cyberark",
              "vSatelliteIds": [
                "17700d91-cdee-4f23-a841-0345ea6d61a1",
                "bf787573-0927-4452-b607-974567dfea18"
              ]
            }
          ]
        }
      },
      "CreateFireflyAutogenerateReqBodyExample": {
        "description": "In this example, it allows you to create Service Accounts using the Auto-generate mode to create a keypair and download the private key.",
        "value": {
          "authenticationType": "rsaKey",
          "credentialLifetime": 30,
          "name": "Firefly SA",
          "owner": "2620f8e0-fdbf-11ee-b275-2754a4f7e272",
          "publicKey": "",
          "scopes": [
            "distributed-issuance"
          ]
        }
      },
      "CreateFireflyAutogenerateResBodyExample": {
        "value": {
          "id": "933507dd-0286-11ef-bc25-8a00a468403f",
          "privateKey": "-----BEGIN PRIVATE KEY-----\n⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆\n-----END PRIVATE KEY-----\n",
          "publicKey": "-----BEGIN PUBLIC KEY-----\\nMCowBQYDK2VwAyEAzRCyRWzXlyhFp3RcUrum1Q6j7YR8jyL0L1fWnh7zgt4=\\n-----END PUBLIC KEY-----"
        }
      },
      "CreateFireflyReqBodyExample": {
        "description": "In this example, it allows you to create Service Accounts using the Auto-generate mode to create a keypair and download the private key.",
        "value": {
          "authenticationType": "rsaKey",
          "credentialLifetime": 30,
          "name": "Firefly SA",
          "owner": "2620f8e0-fdbf-11ee-b275-2754a4f7e272",
          "publicKey": "-----BEGIN PUBLIC KEY-----\\nMCowBQYDK2VwAyEAzRCyRWzXlyhFp3RcUrum1Q6j7YR8jyL0L1fWnh7zgt4=\\n-----END PUBLIC KEY-----",
          "scopes": [
            "distributed-issuance"
          ]
        }
      },
      "CreateFireflyResBodyExample": {
        "value": {
          "id": "933507dd-0286-11ef-bc25-8a00a468403f",
          "publicKey": "-----BEGIN PUBLIC KEY-----\\nMCowBQYDK2VwAyEAzRCyRWzXlyhFp3RcUrum1Q6j7YR8jyL0L1fWnh7zgt4=\\n-----END PUBLIC KEY-----"
        }
      },
      "GetServiceAccountsByClientIDResBodyExample": {
        "value": {
          "authenticationType": "rsaKey",
          "companyId": "145f12e0-fdbf-11ee-b275-2754a4f7e272",
          "credentialLifetime": 365,
          "credentialsExpiringOn": "2025-01-01T00:00:00.000000Z",
          "enabled": true,
          "id": "933507dd-0286-11ef-bc25-8a00a468403f",
          "name": "Test",
          "owner": "2620f8e0-fdbf-11ee-b275-2754a4f7e272",
          "publicKey": "-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAor3JRni8bObnKbmWzRubiNyKMoCXLVrswqiMm2h8zl8=\n-----END PUBLIC KEY-----\n",
          "scopes": [
            "distributed-issuance"
          ],
          "updatedBy": "150760d0-fdbf-11ee-b275-2754a4f7e272",
          "updatedOn": "2024-01-01T00:00:09.000000Z"
        }
      },
      "StatusResponseExample": {
        "value": {
          "current": {
            "applications": 13,
            "certificates": {
              "eligible": 47,
              "renewal": {
                "failed": 1,
                "successful": 9,
                "triggered": 3
              }
            },
            "state": "running",
            "timestamp": "2023-08-25T20:59:36.688019837Z"
          },
          "previous": {
            "applications": 13,
            "certificates": {
              "eligible": 47,
              "renewal": {
                "failed": 1,
                "successful": 46,
                "triggered": 47
              }
            },
            "state": "complete",
            "timestamp": "2023-08-24T20:57:36.688019837Z"
          }
        }
      },
      "TenantExpirationNotificationConfigurationExample": {
        "value": {
          "additionalRecipients": [
            {
              "id": "22153ae0-4352-11ee-b95c-3531a284802b",
              "type": "User"
            },
            {
              "id": "22153ae0-4352-11ee-b95c-12345abcd123",
              "type": "Team"
            }
          ],
          "channels": [
            "email"
          ],
          "enabled": true,
          "fallbackToPKIAdmin": false,
          "personas": [
            "Application Owners",
            "All PKI Admins"
          ]
        }
      },
      "TenantExpirationReportsConfigurationExample": {
        "value": {
          "additionalRecipients": [
            {
              "id": "22153ae0-4352-11ee-b95c-3531a284802b",
              "type": "User"
            },
            {
              "id": "22153ae0-4352-11ee-b95c-12345abcd123",
              "type": "Team"
            }
          ],
          "channels": [
            "email"
          ],
          "enabled": true,
          "expiringWithinDays": 30,
          "ignoreAfterDays": 30,
          "roles": [
            "SYSTEM_ADMIN"
          ],
          "schedule": "0 0 * * Mon"
        }
      },
      "TestCyberArkConfReqBodyExample": {
        "description": "The information to test a connection to a Credential Manager Service configuration with the required details for a CyberArk provider.",
        "value": {
          "cmsDetails": {
            "appID": "my_cyberArk_app",
            "baseUrl": "https://my_cyberark",
            "certificateBundle": "IICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUF...",
            "certificatePassword": "***********"
          },
          "cmsType": "cyberark",
          "vSatelliteIds": [
            "17700d91-cdee-4f23-a841-0345ea6d61a1",
            "bf787573-0927-4452-b607-974567dfea18"
          ],
          "wsClientId": "dc1bdce3-3927-4181-a5c8-5f18f5aa8d90"
        }
      },
      "TestCyberArkCredRequestBodyExample": {
        "description": "In this example, the data of the CyberArk credential with `id = b127028c-d88a-11ed-afa1-0242ac120002` \nis going to be used to test the connection.\n",
        "value": {
          "id": "b127028c-d88a-11ed-afa1-0242ac120002",
          "wsClientId": "337c0ab7-dabe-4d58-bfc3-5069429e7af2"
        }
      },
      "TestCyberArkCredRequestFullInfoBodyExample": {
        "description": "In this example, the data of the CyberArk credential to test is completely provided in the request.\n",
        "value": {
          "authType": "password",
          "cmsType": "cyberark",
          "credentialDetails": {
            "folder": "TLS_Protect_Cloud_credentials",
            "objectName": "my_stored_cyberark_credential01",
            "safe": "safe_path"
          },
          "wsClientId": "337c0ab7-dabe-4d58-bfc3-5069429e7af2"
        }
      },
      "TestCyberArkCredRequestPartialInfoBodyExample": {
        "description": "In this example, the data of the CyberArk credential with `id = b127028c-d88a-11ed-afa1-0242ac120002` \nis going to be used to test the connection except by the `credentialDetails` which will be used instead of \nthe `credentialDetails` coming in the CyberArk credential with `id = b127028c-d88a-11ed-afa1-0242ac120002`.\n",
        "value": {
          "credentialDetails": {
            "folder": "TLS_Protect_Cloud_credentials",
            "objectName": "my_stored_cyberark_credential01",
            "safe": "safe_path"
          },
          "id": "b127028c-d88a-11ed-afa1-0242ac120002",
          "wsClientId": "337c0ab7-dabe-4d58-bfc3-5069429e7af2"
        }
      },
      "UpdateCyberArkCredRequestBodyExample": {
        "description": "In this example, a CyberArk credential configuration is going to be updated based on its ID.",
        "value": {
          "credentialDetails": {
            "folder": "TLS_Protect_Cloud_credentials",
            "objectName": "my_stored_cyberark_credential03",
            "safe": "safe_path"
          },
          "id": "b127028c-d88a-11ed-afa1-0242ac120002",
          "name": "my_cyberark_cred_02",
          "teamsIds": [
            "337c0ab7-dabe-4d58-bfc3-5069429e7af2"
          ]
        }
      },
      "UpdateCyberArksConfReqBodyExample": {
        "description": "In this request example the details for the CyberArk provider will be updated.\nTake into account that if the **certificateBundle** is provided then the **certificatePassword** must be also provided and vice versa.\n",
        "value": {
          "cmsDetails": {
            "appID": "my_cyberArk_app",
            "certificateBundle": "IICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUF...",
            "certificatePassword": "***********"
          },
          "id": "72e4c1f6-d85f-11ed-afa1-0242ac120002"
        }
      }
    },
    "parameters": {
      "AuthTypesParam": {
        "description": "The authentication types separated by commas.",
        "explode": false,
        "in": "query",
        "name": "authTypes",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/AuthType"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "CMSConfigIdParam": {
        "description": "The id of the Credential Manager Service configuration.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CMSConfId"
        }
      },
      "CMSCredentialDetailsParam": {
        "description": "The option of whether or not return full credential details. Only Admin users can use this parameter.",
        "in": "query",
        "name": "details",
        "schema": {
          "type": "boolean"
        }
      },
      "CMSTypesParam": {
        "description": "The privileged access management types separated by commas.",
        "explode": false,
        "in": "query",
        "name": "cmsTypes",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/CMSType"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "CredentialIdParam": {
        "description": "The credential Id.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CredentialId"
        }
      },
      "CredentialIdsParam": {
        "description": "The credential Ids separated by commas.",
        "explode": false,
        "in": "query",
        "name": "ids",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/CredentialId"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "TeamIdsParam": {
        "description": "The team Ids separated by commas.",
        "explode": false,
        "in": "query",
        "name": "teamIds",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/TeamId"
          },
          "minItems": 1,
          "type": "array"
        }
      }
    },
    "requestBodies": {
      "AddCredentialsBodyRequest": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/AddCyberArksCredRequestBodyExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/AddCredentialsRequest"
            }
          }
        },
        "description": "The body request to add credentials to existing Credential Manager Service configurations."
      },
      "CreateCMSConfigurationsBodyRequest": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/CreateCyberArksConfReqBodyExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/CreateCMSConfigurationsRequest"
            }
          }
        },
        "description": "The body request to create the given Credential Manager Service configuration using their details."
      },
      "TestCMSConfigurationBodyRequest": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/TestCyberArkConfReqBodyExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/TestCMSConfigurationRequest"
            }
          }
        },
        "description": "The body request to test the given Credential Manager Service configuration using their details."
      },
      "TestCredentialBodyRequest": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/TestCyberArkCredRequestBodyExample"
              },
              "CyberArk with full info provided": {
                "$ref": "#/components/examples/TestCyberArkCredRequestFullInfoBodyExample"
              },
              "CyberArk with partial info provided": {
                "$ref": "#/components/examples/TestCyberArkCredRequestPartialInfoBodyExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/TestCredentialRequest"
            }
          }
        },
        "description": "The body request to test the given credential."
      },
      "UpdateCMSConfigurationsBodyRequest": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/UpdateCyberArksConfReqBodyExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/UpdateCMSConfigurationRequest"
            }
          }
        },
        "description": "The body request to update the given Credential Manager Service configuration using their details."
      },
      "UpdateCredentialBodyRequest": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/UpdateCyberArkCredRequestBodyExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/UpdateCredentialRequest"
            }
          }
        },
        "description": "The body request to update the given credential."
      }
    },
    "responses": {
      "200DeleteCredentials": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/200DeletedCyberArksCredExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/DeleteCredentialsResponse"
            }
          }
        },
        "description": "The credentials deleted successfully."
      },
      "200GetCMSConfiguration": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/200GetCyberArkConfExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/CMSConfigurationResponse"
            }
          }
        },
        "description": "The Credential Manager Service configuration received."
      },
      "200GetCMSConfigurations": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/200GetCyberArksConfExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/GetCMSConfigurationsResponse"
            }
          }
        },
        "description": "The Credential Manager Service configurations received."
      },
      "200GetCredential": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk with details": {
                "$ref": "#/components/examples/200GetCyberArkCredExample"
              },
              "CyberArk without details": {
                "$ref": "#/components/examples/200GetCyberArkCredWithoutDetailsExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/CredentialResponse"
            }
          }
        },
        "description": "The retrieved credential."
      },
      "200GetCredentials": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk with details": {
                "$ref": "#/components/examples/200GetCyberArksCredExample"
              },
              "CyberArk without details": {
                "$ref": "#/components/examples/200GetCyberArksCredWithoutDetailsExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/GetCredentialsResponse"
            }
          }
        },
        "description": "The retrieved credentials for a company."
      },
      "200TestCMSConfiguration": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/200TestCyberArkConfExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/TestCMSConfigurationResponse"
            }
          }
        },
        "description": "Ok. Contains the result of testing the Credential Manager Service configuration."
      },
      "200TestCredential": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/200TestCyberArkCredExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/TestCredentialResponse"
            }
          }
        },
        "description": "Connection test to credential successful."
      },
      "200UpdateCMSConfiguration": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/200UpdatedCyberArkConfExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/CMSConfigurationResponse"
            }
          }
        },
        "description": "The Credential Manager Service configurations updated."
      },
      "200UpdateCredential": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/200UpdatedCyberArkCredExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/CredentialResponse"
            }
          }
        },
        "description": "The credentials updated successfully."
      },
      "201AddCredentials": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/201AddedCyberArksCredExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/AddCredentialsResponse"
            }
          }
        },
        "description": "The credentials added successfully."
      },
      "201CreateCMSConfigurations": {
        "content": {
          "application/json": {
            "examples": {
              "CyberArk": {
                "$ref": "#/components/examples/201CreatedCyberArksConfExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/CreateCMSConfigurationsResponse"
            }
          }
        },
        "description": "The Credential Manager Service configurations created."
      },
      "400BadRequest": {
        "content": {
          "application/json": {
            "examples": {
              "Unsupported_type": {
                "$ref": "#/components/examples/400UnsupportedCMSTypeExample"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse2"
            }
          }
        },
        "description": "Bad request."
      },
      "401Unauthorized": {
        "content": {
          "application/json": {
            "examples": {
              "Credentials_missed": {
                "description": "An error response when the user credentials were not provided.",
                "value": {
                  "errors": [
                    {
                      "args": [
                        {
                          "cms": "https://my_cyberark"
                        }
                      ],
                      "code": 90002,
                      "message": "Unauthorized. Missing or invalid credentials"
                    }
                  ]
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse2"
            }
          }
        },
        "description": "Unauthorized. Missing or invalid credentials."
      },
      "403Forbidden": {
        "content": {
          "application/json": {
            "examples": {
              "Unauthorized_user": {
                "description": "An error response when the user doesn't have the permission to do the action.",
                "value": {
                  "errors": [
                    {
                      "args": [
                        {
                          "cms": "https://my_cyberark"
                        }
                      ],
                      "code": 90002,
                      "message": "Forbidden. User has not the permission to do the action."
                    }
                  ]
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse2"
            }
          }
        },
        "description": "Forbidden. The user does not have the permission to do this action."
      },
      "404NotFound": {
        "content": {
          "application/json": {
            "examples": {
              "CMS_was_not_found": {
                "description": "An error response when the provided CyberArk provider was not found.",
                "value": {
                  "errors": [
                    {
                      "args": [
                        {
                          "cms": "https://my_cyberark"
                        }
                      ],
                      "code": 90003,
                      "message": "Not found. The CMS 'https://my_cyberark' was not found"
                    }
                  ]
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse2"
            }
          }
        },
        "description": "Not found. The resource was not found."
      },
      "500InternalServerErrorContent": {
        "content": {
          "application/json": {
            "examples": {
              "CMSConfig_not_found": {
                "description": "An error response when an error occurred in the server.",
                "value": {
                  "errors": [
                    {
                      "args": [
                        {
                          "cmsCredentialName": "my_cyberark_credential"
                        }
                      ],
                      "code": 90003,
                      "message": "Internal Server Error."
                    }
                  ]
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse2"
            }
          }
        },
        "description": "Internal Server Error."
      }
    },
    "schemas": {
      "ActivityLogCondition": {
        "description": "A Condition for filtering",
        "properties": {
          "field": {
            "description": "Represents a field for filtering",
            "example": "activityType",
            "type": "string"
          },
          "operator": {
            "$ref": "#/components/schemas/ActivityLogFilterOperator"
          },
          "value": {
            "description": "represents a field's value",
            "example": "Authentication",
            "type": "string"
          },
          "values": {
            "description": "represents a field's values",
            "example": [
              "Authentication",
              "Users"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ActivityLogEntriesResponse": {
        "properties": {
          "activityLogEntries": {
            "description": "A collection of activity log entries",
            "items": {
              "$ref": "#/components/schemas/ActivityLogEntryInformation"
            },
            "type": "array"
          },
          "count": {
            "description": "The number of activity log entries.",
            "example": 2,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ActivityLogEntryInformation": {
        "properties": {
          "activityDate": {
            "description": "The date when a log entry was produced",
            "example": "2023-01-24T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "activityName": {
            "description": "An activity name",
            "example": "Login Succeeded",
            "type": "string"
          },
          "activityType": {
            "description": "An activity type",
            "example": "Authentication",
            "type": "string"
          },
          "companyId": {
            "description": "UUID of a company",
            "example": "85595df0-8e14-11ed-87e3-755db050f29d",
            "format": "uuid",
            "type": "string"
          },
          "criticality": {
            "description": "An activity criticality",
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "description": "UUID of a log entry",
            "example": "2eb29780-9046-11ed-8e50-b994b27d2ece",
            "format": "uuid",
            "type": "string"
          },
          "message": {
            "description": "An activity log message",
            "example": "user logged in",
            "type": "string"
          },
          "payload": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ActivityLogFilter": {
        "properties": {
          "expression": {
            "$ref": "#/components/schemas/BaseActivityLogFilter"
          },
          "ordering": {
            "$ref": "#/components/schemas/BaseActivityLogOrdering"
          },
          "paging": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "type": "object"
      },
      "ActivityLogFilterOperand": {
        "properties": {
          "operand": {
            "$ref": "#/components/schemas/ActivityLogCondition"
          },
          "operator": {
            "$ref": "#/components/schemas/UnaryOperator"
          }
        },
        "type": "object"
      },
      "ActivityLogFilterOperands": {
        "properties": {
          "operands": {
            "description": "A list of conditions that will be used for filtering",
            "example": [
              {
                "field": "activityType",
                "operator": "EQ",
                "value": "Authentication"
              },
              {
                "field": "activityName",
                "operator": "EQ",
                "value": "Login Succeeded"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/BaseActivityLogFilter"
            },
            "type": "array"
          },
          "operator": {
            "$ref": "#/components/schemas/NaryOperator"
          }
        },
        "type": "object"
      },
      "ActivityLogFilterOperator": {
        "description": "An operator for filtering",
        "enum": [
          "EQ",
          "LT",
          "LTE",
          "GT",
          "GTE",
          "IN"
        ],
        "example": "EQ",
        "type": "string"
      },
      "ActivityLogName": {
        "properties": {
          "key": {
            "type": "string"
          },
          "readableName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActivityLogOrder": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "field": {
            "description": "A field, that will be used for ordering",
            "example": "activityDate",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActivityLogType": {
        "properties": {
          "key": {
            "type": "string"
          },
          "readableName": {
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/ActivityLogName"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AddCredentialRequest": {
        "description": "The properties representing a credential to add.",
        "properties": {
          "authType": {
            "$ref": "#/components/schemas/AuthType"
          },
          "cmsType": {
            "$ref": "#/components/schemas/CMSType"
          },
          "credentialDetails": {
            "$ref": "#/components/schemas/CreateCredentialDetails"
          },
          "name": {
            "$ref": "#/components/schemas/CredentialName"
          },
          "teamsIds": {
            "$ref": "#/components/schemas/TeamsIds"
          }
        },
        "required": [
          "name",
          "cmsType",
          "authType",
          "teamsIds",
          "credentialDetails"
        ],
        "type": "object"
      },
      "AddCredentialsRequest": {
        "description": "Array of credentials to add.",
        "properties": {
          "credentials": {
            "items": {
              "$ref": "#/components/schemas/AddCredentialRequest"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "credentials"
        ],
        "type": "object"
      },
      "AddCredentialsResponse": {
        "description": "The response for the add credentials action.",
        "properties": {
          "count": {
            "type": "integer"
          },
          "credentialsAdded": {
            "items": {
              "$ref": "#/components/schemas/CredentialResponse"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "credentialsAdded",
          "count"
        ],
        "type": "object"
      },
      "AnyValue": {
        "description": "Can be any value - string, number, boolean, array or object."
      },
      "ApiClientInformation": {
        "description": "Represents the information of the client that is calling the API",
        "example": {
          "identifier": "192.168.1.63",
          "type": "Venafi VCert CLI"
        },
        "properties": {
          "identifier": {
            "description": "Client identifier",
            "example": "199.121.8.74",
            "type": "string"
          },
          "type": {
            "description": "Client type",
            "example": "Venafi VCert CLI",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiKeyInformation": {
        "properties": {
          "apiKeyStatus": {
            "$ref": "#/components/schemas/ApiKeyStatus"
          },
          "apiVersion": {
            "$ref": "#/components/schemas/ApiVersion"
          },
          "companyId": {
            "description": "UUID of a company.",
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "description": "The date and time the API key was created.",
            "format": "date-time",
            "type": "string"
          },
          "key": {
            "description": "UUID of an API key.",
            "format": "uuid",
            "type": "string"
          },
          "memberedTeams": {
            "description": "Membered teams of the user associated with this API key.",
            "items": {
              "description": "Membered teams of the user associated with this API key.",
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "productRoles": {
            "additionalProperties": {
              "description": "Product roles of the user associated with this API key.",
              "items": {
                "$ref": "#/components/schemas/Role2"
              },
              "type": "array",
              "uniqueItems": true
            },
            "description": "Product roles of the user associated with this API key.",
            "type": "object"
          },
          "systemRoles": {
            "description": "System roles of the user associated with this API key.",
            "items": {
              "$ref": "#/components/schemas/SystemRole"
            },
            "type": "array",
            "uniqueItems": true
          },
          "userId": {
            "description": "UUID of a user.",
            "format": "uuid",
            "type": "string"
          },
          "username": {
            "description": "Email address of the registered user.",
            "type": "string"
          },
          "validityEndDate": {
            "description": "The date and time the API key will no longer be valid.",
            "format": "date-time",
            "type": "string"
          },
          "validityStartDate": {
            "description": "The date and time the API key became valid.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiKeyStatus": {
        "description": "Indicates the state of your API key status.",
        "enum": [
          "PENDING_ACTIVATION",
          "ACTIVE",
          "INACTIVE",
          "PENDING_ROTATION",
          "ROTATED",
          "EXPIRED"
        ],
        "type": "string"
      },
      "ApiVersion": {
        "description": "Indicates the version of the API to which the API key is applicable.",
        "enum": [
          "ALL",
          "V1"
        ],
        "type": "string"
      },
      "AppId": {
        "description": "The application ID from the CyberArk provider.",
        "type": "string"
      },
      "Application": {
        "description": "Application ID to associate with the service account",
        "format": "UUID",
        "type": "string",
        "x-go-type": "uuid.UUID",
        "x-go-type-import": {
          "path": "github.com/google/uuid"
        }
      },
      "ApplicationInformation": {
        "properties": {
          "certificateIssuingTemplateAliasIdMap": {
            "additionalProperties": {
              "format": "uuid",
              "type": "string"
            },
            "type": "object"
          },
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fullyQualifiedDomainNames": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "ipRanges": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "modificationDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ownerIdsAndTypes": {
            "items": {
              "$ref": "#/components/schemas/OwnerIdAndType"
            },
            "type": "array"
          },
          "ownership": {
            "$ref": "#/components/schemas/ApplicationOwnership"
          },
          "owningServiceAccounts": {
            "items": {
              "$ref": "#/components/schemas/ServiceAccountInformation"
            },
            "type": "array"
          },
          "owningTeams": {
            "items": {
              "$ref": "#/components/schemas/TeamInformation1"
            },
            "type": "array"
          },
          "owningUsers": {
            "items": {
              "$ref": "#/components/schemas/UserInformation1"
            },
            "type": "array"
          },
          "ports": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "ApplicationOwnership": {
        "properties": {
          "owningTeams": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "owningUsers": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "ApplicationRenewalConfiguration": {
        "properties": {
          "renewalActions": {
            "description": "A set of options that can be used to specify the actions that should be taken when the auto-renewal process runs.",
            "example": {
              "provision": false,
              "renew": true
            },
            "properties": {
              "provision": {
                "description": "If true, the system with attempt to provision any certificates associated with this application after a successful auto-renewal.",
                "type": "boolean"
              },
              "renew": {
                "description": "If true, the system will attempt to renew any certificates associated with this application that are expected to expire within the configured number of days.",
                "type": "boolean"
              }
            },
            "required": [
              "renew",
              "provision"
            ],
            "type": "object"
          },
          "renewalWindow": {
            "description": "A set of options to control the time window in which auto-renewal of certificates should be attempted.",
            "example": {
              "days": 16,
              "inherit": false
            },
            "properties": {
              "days": {
                "description": "Any certificates associated with this application that are expected to expire within the specified number of days will be acted on.",
                "format": "int64",
                "minimum": 1,
                "type": "integer"
              },
              "inherit": {
                "description": "If true, \"days\" value configured for this application will be ignored and the value configured at the tenant level will be used.",
                "type": "boolean"
              }
            },
            "required": [
              "inherit"
            ],
            "type": "object"
          }
        },
        "required": [
          "renewalActions",
          "renewalWindow"
        ],
        "type": "object"
      },
      "ApplicationRequest": {
        "properties": {
          "certificateIssuingTemplateAliasIdMap": {
            "additionalProperties": {
              "description": "Represents a mapping of certificate issuing template aliases to their UUIDs.",
              "format": "uuid",
              "type": "string"
            },
            "description": "Represents a mapping of certificate issuing template aliases to their UUIDs.",
            "example": {
              "dev-cit": "20bcb9a1-0f9c-407e-9673-b048c3d6479d",
              "qa-cit": "448de2a0-1159-40f0-b3ae-e4f712577e87"
            },
            "type": "object"
          },
          "description": {
            "description": "A description for an applications",
            "example": "this application will hold dev certificates",
            "type": "string"
          },
          "externalIpRanges": {
            "description": "Represents a collection of external IP ranges.",
            "example": [
              "127.254.0.0/16",
              "192.2.3.0/32"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fqdns": {
            "description": "A collection of FQDNs",
            "example": [
              "venafi.docs.com",
              "api.venafi"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fullyQualifiedDomainNames": {
            "description": "Represents a collection of fully qualified domain names (FQDNs).",
            "example": [
              "internal.venafi.docs",
              "internal.api.venafi"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "internalFqdns": {
            "description": "Represents a collection of fully qualified domain names (FQDNs) used for internal purposes.",
            "example": [
              "internal.venafi.docs",
              "internal.api.venafi"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "internalIpRanges": {
            "description": "epresents a collection of internal IP ranges.",
            "example": [
              "127.254.0.0/16",
              "127.2.3.0/32"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "internalPorts": {
            "description": "Represents a collection of external ports.",
            "example": [
              "8080",
              "9090"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ipRanges": {
            "description": "Represents a collection of CIDR (Classless Inter-Domain Routing) ranges.",
            "example": [
              "127.254.0.0/16",
              "192.2.3.0/32"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "An application name",
            "example": "dev app",
            "type": "string"
          },
          "ownerIdsAndTypes": {
            "description": "Represents a collection of ownership UUIDs and types.",
            "example": [
              {
                "ownerId": "f94c36a4-31b3-4aaf-a5c9-83fc7277db9f",
                "ownerType": "USER"
              },
              {
                "ownerId": "2f796153-33e8-48d6-82e0-cc3b259f78ec",
                "ownerType": "TEAM"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/OwnerIdAndType"
            },
            "type": "array"
          },
          "ports": {
            "description": "Represents a collection of network ports.",
            "example": [
              "443",
              "7776"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startTargetedDiscovery": {
            "description": "Specifies whether to start target discovery.",
            "type": "boolean"
          }
        },
        "required": [
          "fullyQualifiedDomainNames",
          "internalPorts",
          "ipRanges",
          "name",
          "ownerIdsAndTypes",
          "ports"
        ],
        "type": "object"
      },
      "ApplicationResponse": {
        "properties": {
          "applications": {
            "items": {
              "$ref": "#/components/schemas/ApplicationInformation"
            },
            "type": "array"
          },
          "ownershipCount": {
            "format": "int32",
            "type": "integer"
          },
          "totalCount": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApplicationsAssignRequest": {
        "properties": {
          "action": {
            "enum": [
              "REPLACE",
              "ADD",
              "DELETE",
              "DELETE_ALL"
            ],
            "type": "string"
          },
          "certificateIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "targetedApplicationIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "action",
          "certificateIds",
          "targetedApplicationIds"
        ],
        "type": "object"
      },
      "ApplicationsAssignResponse": {
        "properties": {
          "certificates": {
            "items": {
              "$ref": "#/components/schemas/CertificateInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApprovalDecisionRequest": {
        "properties": {
          "reason": {
            "description": "Reason for user's decision",
            "example": "I reject this request because the certificate won't be needed anymore.",
            "maxLength": 1024,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApprovalRequestInformation": {
        "properties": {
          "approvalRule": {
            "$ref": "#/components/schemas/CertificateRequestApprovalRuleOpenApi"
          },
          "approvers": {
            "description": "A collection of approvers specified by type and id",
            "items": {
              "$ref": "#/components/schemas/ApproverProperty"
            },
            "type": "array",
            "uniqueItems": true
          },
          "approversOutcome": {
            "description": "A collection of approver outcomes",
            "items": {
              "$ref": "#/components/schemas/ApproverOutcomeInformation"
            },
            "type": "array",
            "uniqueItems": true
          },
          "autoRejectionThreshold": {
            "description": "Auto rejection threshold. After the defined number of days since request creation, the request is automatically rejected, if it is not approved",
            "example": 5,
            "maximum": 99,
            "minimum": 1,
            "type": "number"
          },
          "companyId": {
            "description": "UUID of a company",
            "example": "03eb6e61-9806-11ed-84f2-c747fb71e467",
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "description": "The date a approval request was created",
            "example": "2023-01-10T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "entityId": {
            "description": "UUID of a certificate request",
            "example": "5ece3180-b1e0-11ed-862d-ad36b18e787b",
            "format": "uuid",
            "type": "string"
          },
          "finalApprover": {
            "$ref": "#/components/schemas/ApproverPropertyOpenApi"
          },
          "id": {
            "description": "UUID of a approval request",
            "example": "5ece3180-b1e0-11ed-862d-ad36b18e787d",
            "format": "uuid",
            "type": "string"
          },
          "modificationDate": {
            "description": "The date a approval request was modified",
            "example": "2023-01-11T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "requestorId": {
            "description": "UUID of a requestor",
            "example": "8268d820-a08d-11ed-bbc0-252385d6d389",
            "format": "uuid",
            "type": "string"
          },
          "requiredApprovalsCount": {
            "description": "Count of a required approvals",
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "description": "Status of an approval request",
            "enum": [
              "NOT_REQUIRED",
              "PENDING_APPROVAL",
              "PENDING_FINAL_APPROVAL",
              "APPROVED",
              "REJECTED",
              "EXPIRED",
              "AUTO_APPROVED"
            ],
            "example": "PENDING_APPROVAL",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApproverOutcomeInformation": {
        "properties": {
          "companyId": {
            "description": "UUID of a company",
            "example": "03eb6e61-9806-11ed-84f2-c747fb71e467",
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "description": "The date a approver outcome was created",
            "example": "2023-01-10T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "UUID of an approver outcome",
            "example": "5ece3180-b1e0-11ed-862d-ad36b18e787c",
            "format": "uuid",
            "type": "string"
          },
          "reason": {
            "description": "Reason of an outcome",
            "example": "Not needed",
            "type": "string"
          },
          "status": {
            "description": "Status of an approval request",
            "enum": [
              "APPROVED",
              "REJECTED"
            ],
            "example": "APPROVED",
            "type": "string"
          },
          "userId": {
            "description": "UUID of a user",
            "example": "8268d820-a08d-11ed-bbc0-252385d6d389",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApproverProperty": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "USER",
              "TEAM"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApproverPropertyOpenApi": {
        "description": "Approver with id that can be only user type",
        "properties": {
          "id": {
            "description": "UUID specific to the approver user/team",
            "example": "8268d820-a08d-11ed-bbc0-252385d6d389",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "description": "Approver type",
            "example": "USER",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthType": {
        "description": "The type of the authentication:\n  * `password`\n  * `username_password`\n",
        "enum": [
          "password",
          "username_password"
        ],
        "type": "string"
      },
      "AwsCloudProviderInformation": {
        "properties": {
          "accountIds": {
            "description": "Array of AWS account IDs each of which should be a 12-digit identifier",
            "example": 123456789012,
            "items": {
              "description": "Array of AWS account IDs each of which should be a 12-digit identifier",
              "example": "123456789012",
              "type": "string"
            },
            "type": "array"
          },
          "regions": {
            "description": "Array of AWS regions",
            "example": "us-west-1",
            "items": {
              "description": "Array of AWS regions",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "af-south-1",
                "ap-east-1",
                "ap-south-2",
                "ap-southeast-3",
                "ap-southeast-4",
                "ap-south-1",
                "ap-northeast-3",
                "ap-northeast-2",
                "ap-southeast-1",
                "ap-southeast-2",
                "ap-northeast-1",
                "ca-central-1",
                "eu-central-1",
                "eu-west-1",
                "eu-west-2",
                "eu-south-1",
                "eu-west-3",
                "eu-south-2",
                "eu-north-1",
                "eu-central-2",
                "me-south-1",
                "me-central-1",
                "sa-east-1",
                "us-gov-east-1",
                "us-gov-west-1"
              ],
              "example": "us-west-1",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "accountIds",
          "regions"
        ],
        "type": "object"
      },
      "AzureCloudProviderInformation": {
        "properties": {
          "subscriptionIds": {
            "description": "Array of Azure subscription IDs each of which should be UUID",
            "example": "8d10da13-8125-4ba9-a717-bf7490507b3d",
            "items": {
              "description": "Array of Azure subscription IDs each of which should be UUID",
              "example": "8d10da13-8125-4ba9-a717-bf7490507b3d",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "subscriptionIds"
        ],
        "type": "object"
      },
      "BaseActivityLogFilter": {
        "description": "Root expression for filtering",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ActivityLogFilterOperands"
          },
          {
            "$ref": "#/components/schemas/ActivityLogFilterOperand"
          },
          {
            "$ref": "#/components/schemas/ActivityLogCondition"
          }
        ],
        "type": "object"
      },
      "BaseActivityLogOrdering": {
        "description": "Specify the ordering of a search result",
        "properties": {
          "orders": {
            "items": {
              "$ref": "#/components/schemas/ActivityLogOrder"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BaseFilter": {
        "description": "Root expression for filtering",
        "oneOf": [
          {
            "$ref": "#/components/schemas/FilterOperands"
          },
          {
            "$ref": "#/components/schemas/FilterOperand"
          },
          {
            "$ref": "#/components/schemas/Condition"
          }
        ],
        "type": "object"
      },
      "BaseOrdering": {
        "description": "Specify the ordering of a search result",
        "properties": {
          "orders": {
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CMSConfId": {
        "description": "The Credential Manager Service configuration ID.",
        "example": "72e4c1f6-d85f-11ed-afa1-0242ac120002",
        "format": "uuid",
        "type": "string"
      },
      "CMSConfigurationResponse": {
        "description": "The information representing a Credential Manager Service configuration for response.",
        "properties": {
          "cmsDetails": {
            "$ref": "#/components/schemas/ResponseCMSDetails"
          },
          "cmsType": {
            "$ref": "#/components/schemas/CMSType"
          },
          "companyId": {
            "$ref": "#/components/schemas/CompanyId"
          },
          "id": {
            "$ref": "#/components/schemas/CMSConfId"
          },
          "vSatelliteIds": {
            "$ref": "#/components/schemas/VSatelliteIds"
          }
        },
        "type": "object"
      },
      "CMSType": {
        "description": "The type of the privileged access management:\n  * `cyberark` - For CyberArk privileged access management\n",
        "enum": [
          "cyberark"
        ],
        "type": "string"
      },
      "CMSURL": {
        "description": "The baseUrl of the privileged access management provider.",
        "format": "uri",
        "type": "string"
      },
      "CSRAttributesInformation": {
        "description": "Represents CSR attributes for certificate requests",
        "example": {
          "commonName": "localhost",
          "country": "MX",
          "keyTypeParameters": {
            "keyCurve": "P256",
            "keyLength": 4096,
            "keyType": "RSA"
          },
          "locality": "Merida",
          "organization": "venafi",
          "organizationalUnits": [
            "devops"
          ],
          "state": "Yucatan",
          "subjectAlternativeNamesByType": {
            "dnsNames": [
              "localhost"
            ]
          }
        },
        "properties": {
          "commonName": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "keyTypeParameters": {
            "$ref": "#/components/schemas/KeyTypeParameters2"
          },
          "locality": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "organizationalUnits": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "state": {
            "type": "string"
          },
          "subjectAlternativeNamesByType": {
            "$ref": "#/components/schemas/SubjectAlternativeNamesByType"
          }
        },
        "type": "object"
      },
      "Capability": {
        "enum": [
          "DEFAULT",
          "ISSUANCE",
          "VALIDATION",
          "ENTERPRISE",
          "PROVISIONING",
          "SINGLE_SIGN_ON",
          "DISTRIBUTED_ISSUER",
          "CLOUD_PROVIDERS",
          "CREDENTIAL_MANAGER",
          "KUBERNETES_DISCOVERY",
          "KUBERNETES_ENTERPRISE_COMPONENTS",
          "KUBERNETES_ENTERPRISE_COMPONENTS_CERT_MANAGER",
          "KUBERNETES_ENTERPRISE_COMPONENTS_VEI",
          "KUBERNETES_ENTERPRISE_COMPONENTS_APE",
          "KUBERNETES_INTEGRATION_TLSPDC"
        ],
        "type": "string"
      },
      "CapabilityInformation": {
        "properties": {
          "isTrial": {
            "type": "boolean"
          },
          "name": {
            "$ref": "#/components/schemas/Capability"
          },
          "productExpiryDate": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "isTrial",
          "name",
          "productExpiryDate"
        ],
        "type": "object"
      },
      "CertificateAuthorityProductInformation1": {
        "description": "Product specific for external certificate authority",
        "discriminator": {
          "propertyName": "certificateAuthority"
        },
        "properties": {
          "certificateAuthority": {
            "type": "string"
          },
          "certificateType": {
            "enum": [
              "OTHER",
              "DOMAIN_VALIDATED_SSL"
            ],
            "type": "string"
          },
          "hashAlgorithm": {
            "enum": [
              "MD5",
              "SHA1",
              "MD2",
              "SHA224",
              "SHA256",
              "SHA384",
              "SHA512",
              "UNKNOWN",
              "GOSTR3411_94"
            ],
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "productTypes": {
            "items": {
              "enum": [
                "SSL",
                "CODESIGN"
              ],
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "PnYnMnDTnHnMnS",
            "type": "string"
          }
        },
        "required": [
          "certificateAuthority"
        ],
        "type": "object"
      },
      "CertificateAuthorityProductInformation2": {
        "properties": {
          "certificateType": {
            "enum": [
              "OTHER",
              "DOMAIN_VALIDATED_SSL"
            ],
            "type": "string"
          },
          "hashAlgorithm": {
            "enum": [
              "MD5",
              "SHA1",
              "MD2",
              "SHA224",
              "SHA256",
              "SHA384",
              "SHA512",
              "UNKNOWN",
              "GOSTR3411_94"
            ],
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "productTypes": {
            "items": {
              "enum": [
                "SSL",
                "CODESIGN"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "PnYnMnDTnHnMnS",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateCredentialData": {
        "properties": {
          "certificateBundle": {
            "description": "The Base64 encoding certificate bundle encrypted content.",
            "format": "byte",
            "type": "string"
          },
          "certificatePassword": {
            "description": "The password to decrypt the certificate bundle.",
            "format": "password",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateDeletionRequest": {
        "properties": {
          "certificateIds": {
            "description": "A collection of certificates UUIDs",
            "example": [
              "f2b42d60-df9c-11ed-b8ab-4788d83ace9f",
              "f2c173d0-df9c-11ed-b8ab-4788d83ace9f"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "certificateIds"
        ],
        "type": "object"
      },
      "CertificateExpirationInventoryMonitoringConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InventoryMonitoringConfig"
          },
          {
            "properties": {
              "applicationIds": {
                "description": "Application IDs that the webhook applies to",
                "items": {
                  "description": "Application IDs that the webhook applies to",
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "enabled": {
                "description": "Enables or disables webhook messages.",
                "type": "boolean"
              },
              "includeUnassignedCertificates": {
                "description": "Enables or disables notifications for unassigned certificates.",
                "type": "boolean"
              },
              "thresholds": {
                "description": "Array of certificate expiration thresholds, in days, for when notifications will be sent. Limit is 3 values.",
                "items": {
                  "description": "Array of certificate expiration thresholds, in days, for when notifications will be sent. Limit is 3 values.",
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "CertificateImportInfo": {
        "description": "Base64 encoding certificate content.",
        "properties": {
          "apiClientInformation": {
            "$ref": "#/components/schemas/ApiClientInformation"
          },
          "applicationIds": {
            "description": "A collection of application IDs",
            "example": [
              "47c9d920-da21-11ed-a63c-d508f08eeaa0",
              "9303e940-df9d-11ed-8850-f18176fc5513"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "certificate": {
            "description": "Certificate base64 encoded format (PEM without header/footer",
            "type": "string"
          },
          "certificateUsageMetadata": {
            "description": "A collection of certificate request metadata",
            "example": [
              {
                "appName": "venafi app1",
                "automationMetadata": "automation data 008",
                "nodeName": "venafi node 007"
              },
              {
                "appName": "venafi app2",
                "automationMetadata": "automation data 0013",
                "nodeName": "venafi node 005"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CertificateUsageMetadata"
            },
            "type": "array"
          },
          "issuerCertificates": {
            "description": "A collection of issuer certificates",
            "example": [
              "Venafi issuer",
              "QA Venafi issuer"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "certificate"
        ],
        "type": "object"
      },
      "CertificateImportInformation": {
        "description": "List of the certificates and private key pairs to import",
        "properties": {
          "certificate": {
            "description": "Certificate to import",
            "type": "string"
          },
          "dekEncryptedPassword": {
            "description": "Password to decrypt the certificate",
            "type": "string"
          },
          "dekEncryptedPrivateKey": {
            "description": "Format of the private key",
            "type": "string"
          },
          "passwordEncryptedPrivateKey": {
            "description": "Private key for certificate to import",
            "type": "string"
          },
          "pkcs12Keystore": {
            "description": "pkcs12 keystore base64 encoded string",
            "type": "string"
          }
        },
        "required": [
          "certificate",
          "dekEncryptedPrivateKey",
          "passwordEncryptedPrivateKey"
        ],
        "type": "object"
      },
      "CertificateImportRequest1": {
        "properties": {
          "edgeInstanceId": {
            "description": "Id for edge instance",
            "format": "uuid",
            "type": "string"
          },
          "encryptionKeyId": {
            "description": "Id for data encryption key",
            "type": "string"
          },
          "importInformation": {
            "description": "List of the certificates and private key pairs to import",
            "items": {
              "$ref": "#/components/schemas/CertificateImportInformation"
            },
            "maxItems": 100,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "edgeInstanceId",
          "encryptionKeyId",
          "importInformation"
        ],
        "type": "object"
      },
      "CertificateImportRequest2": {
        "properties": {
          "certificates": {
            "description": "Base64 encoding certificate content.",
            "items": {
              "$ref": "#/components/schemas/CertificateImportInfo"
            },
            "type": "array"
          },
          "overrideBlocklist": {
            "description": "Imports the certificate even if it's present in the Certificates blocklist.",
            "type": "boolean"
          }
        },
        "required": [
          "certificates"
        ],
        "type": "object"
      },
      "CertificateImportResponse1": {
        "properties": {
          "creationDate": {
            "description": "Import creation date of certificates and private keys",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Import id used to check the status of the bulk operation",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateImportResponse2": {
        "properties": {
          "certificateInformations": {
            "description": "A collection of information about certificates that were newly imported.",
            "items": {
              "$ref": "#/components/schemas/ImportedCertificateInformation"
            },
            "type": "array"
          },
          "statistics": {
            "additionalProperties": {
              "description": "Certificate import statistics",
              "format": "int32",
              "type": "integer"
            },
            "description": "Certificate import statistics",
            "type": "object"
          }
        },
        "type": "object"
      },
      "CertificateImportStatusDetail": {
        "description": "Status detail information for each certificate and private key imported related to the import id",
        "properties": {
          "certificateBytes": {
            "description": "Bytes of the imported certificate",
            "format": "byte",
            "type": "string"
          },
          "fingerprint": {
            "description": "Unique identifier for the imported certificate",
            "type": "string"
          },
          "reason": {
            "description": "Reason for the status result",
            "type": "string"
          },
          "status": {
            "description": "Result status for the import",
            "enum": [
              "IMPORTED",
              "FAILED",
              "SKIPPED",
              "PROCESSING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateImportStatusDetailResponse": {
        "properties": {
          "id": {
            "description": "Import id",
            "format": "uuid",
            "type": "string"
          },
          "results": {
            "description": "Status detail information for each certificate and private key imported related to the import id",
            "items": {
              "$ref": "#/components/schemas/CertificateImportStatusDetail"
            },
            "type": "array"
          },
          "status": {
            "description": "Status of bulk import",
            "enum": [
              "PROCESSING",
              "COMPLETED",
              "WAITING",
              "FAILED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateInformation": {
        "properties": {
          "applicationIds": {
            "description": "A collection of application IDs",
            "example": [
              "561baf7c-98b7-49af-ab9c-7b3a9fea3028",
              "4adeba6f-0c94-4595-a5b6-babea458249f"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "archivedDate": {
            "description": "The date a certificate was archived",
            "example": "2022-05-24T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "authorityKeyIdentifierHash": {
            "description": "An authority key identifier hash",
            "example": "40572B10F85DDAF18BFF987372178532AB875BCA",
            "type": "string"
          },
          "certificateAuthorityAccountId": {
            "description": "UUID  of a certificate authority account",
            "format": "uuid",
            "type": "string"
          },
          "certificateName": {
            "description": "A certificate name",
            "example": "venafi.com",
            "type": "string"
          },
          "certificateRequestId": {
            "description": "UUID  of a certificate request",
            "example": "2e8964a0-9046-11ed-8e50-b994b27d2ece",
            "format": "uuid",
            "type": "string"
          },
          "certificateStatus": {
            "description": "Certificate's status",
            "enum": [
              "ACTIVE",
              "RETIRED",
              "DELETED"
            ],
            "example": "ACTIVE",
            "type": "string"
          },
          "companyId": {
            "description": "UUID  of a company",
            "example": "85595df0-8e14-11ed-87e3-755db050f29d",
            "format": "uuid",
            "type": "string"
          },
          "dekHash": {
            "description": "A certificate dek hash",
            "example": "RaBDrLmQ69hACXOrPU6542RBT-M-yZOkw4XKsT-r55i=",
            "type": "string"
          },
          "encryptionType": {
            "description": "A certificate encryption type",
            "enum": [
              "RSA",
              "DSA",
              "EC",
              "GOST3410",
              "ECGOST3410",
              "RESERVED3",
              "UNKNOWN"
            ],
            "example": "EC",
            "type": "string"
          },
          "extendedKeyUsage": {
            "description": "A collection of certificate extended key usages",
            "example": [
              "1.3.6.1.5.5.7.3.2",
              "1.3.6.1.5.5.7.3.1"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fingerprint": {
            "description": "A certificate fingerprint",
            "example": "6D4C95512C117B004191F1A096ECAD13242FCD9F",
            "type": "string"
          },
          "id": {
            "description": "UUID of a certificate",
            "example": "2eb29780-9046-11ed-8e50-b994b27d2ece",
            "format": "uuid",
            "type": "string"
          },
          "inhibitAnyPolicy": {
            "description": "Inhibit any policy",
            "example": 150,
            "format": "int32",
            "type": "integer"
          },
          "inhibitPolicyMapping": {
            "description": "Inhibit policy mapping",
            "example": 200,
            "format": "int32",
            "type": "integer"
          },
          "instances": {
            "description": "A collection of certificate instances information",
            "example": [
              {
                "certificateId": "7ec12010-9051-11ed-8e50-b994b27d2ece",
                "certificateInstanceId": "7ec1bc50-9051-11ed-8e50-b994b27d2ece",
                "certificateSource": "USER_SCAN",
                "deploymentStatus": "IN_USE",
                "hostname": "venafi.com",
                "instanceChainValidationStatus": [
                  "OK"
                ],
                "ipAddress": "23.185.0.2",
                "lastScanDate": "2023-01-09T19:12:05.314+00:00",
                "lastValidatedAttempt": "2023-01-09T19:12:05.446+00:00",
                "modificationDate": "2023-01-09T19:12:14.865+00:00",
                "port": 443,
                "serviceIds": [
                  "1d61e9e0-9046-11ed-bf12-53a1b041cf25"
                ],
                "sslProtocols": [
                  "TLSv1.3",
                  "TLSv1.2"
                ],
                "sslValidationErrorArguments": [],
                "sslValidationStatus": "OK"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CertificateInstanceInformation"
            },
            "type": "array"
          },
          "issuerAlternativeNameDns": {
            "description": "A collection of certificate issuer alternative names DNs",
            "example": [
              "venafi.com",
              "www.venafi.com"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuerAlternativeNameNonDns": {
            "description": "A collection of certificate issuer alternative name none DNs",
            "example": [
              "venafi issuer doman"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuerC": {
            "description": "A certificate issues Country",
            "example": "US",
            "type": "string"
          },
          "issuerCN": {
            "description": "A collection of certificate issuer Common names",
            "example": [
              "HydrantID SSL CA G3"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuerCertificateIds": {
            "description": "A collection of issuer certificate IDs",
            "example": [
              "2e8964a0-9046-11ed-8e50-b994b27d2ece",
              "d5b418a0-297e-11eb-bc4c-8b24e5a66fb6"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "issuerDN": {
            "description": "A certificate issue DN",
            "example": "cn=HydrantID SSL CA G3,o=HydrantID (Avalanche Cloud Corporation),c=US",
            "type": "string"
          },
          "issuerL": {
            "description": "A certificate issues Locality",
            "example": "Salt Lake City",
            "type": "string"
          },
          "issuerOU": {
            "description": "A collection of certificate issuer Organization units",
            "example": [
              "Issuer CA"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuerST": {
            "description": "A certificate issuer State",
            "example": "Utah",
            "type": "string"
          },
          "keyCurve": {
            "description": "A certificate key curve",
            "enum": [
              "P256",
              "P384",
              "P521",
              "ED25519",
              "UNKNOWN"
            ],
            "example": "P256",
            "type": "string"
          },
          "keyStrength": {
            "description": "A certificate key strength",
            "example": 2048,
            "format": "int32",
            "type": "integer"
          },
          "keyUsage": {
            "description": "A collection of certificate key usages",
            "example": [
              "digitalSignature",
              "keyEncipherment"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "lastNotification": {
            "format": "int32",
            "type": "integer"
          },
          "managedCertificateId": {
            "description": "UUID  of a managed certificate",
            "example": "2f0e7320-9046-11ed-8ab8-19e0a618d9cd",
            "format": "uuid",
            "type": "string"
          },
          "modificationDate": {
            "description": "The last date a certificate was modified",
            "example": "2022-03-24T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "ocspNoCheck": {
            "description": "If a certificate no ocsp check",
            "example": false,
            "type": "boolean"
          },
          "ownership": {
            "$ref": "#/components/schemas/CertificateOwnership"
          },
          "pathLength": {
            "description": "A certificate path length",
            "example": 3,
            "format": "int32",
            "type": "integer"
          },
          "requireExplicitPolicy": {
            "description": "Required explicit policy is required",
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "selfSigned": {
            "description": "If the certificate is self singed",
            "example": true,
            "type": "boolean"
          },
          "serialNumber": {
            "description": "A certificate serial number",
            "example": "0C51A562B02A19A222FFB4730C47A8E2",
            "type": "string"
          },
          "signatureAlgorithm": {
            "description": "A certificate signature algorithm",
            "enum": [
              "MD2_WITH_RSA_ENCRYPTION",
              "MD5_WITH_RSA_ENCRYPTION",
              "SHA1_WITH_RSA_ENCRYPTION",
              "SHA1_WITH_RSA_ENCRYPTION2",
              "SHA256_WITH_RSA_ENCRYPTION",
              "SHA384_WITH_RSA_ENCRYPTION",
              "SHA512_WITH_RSA_ENCRYPTION",
              "ID_DSA_WITH_SHA1",
              "dsaWithSHA1",
              "EC_DSA_WITH_SHA1",
              "EC_DSA_WITH_SHA224",
              "EC_DSA_WITH_SHA256",
              "EC_DSA_WITH_SHA384",
              "EC_DSA_WITH_SHA512",
              "UNKNOWN",
              "SHA1_WITH_RSAandMGF1",
              "GOST_R3411_94_WITH_GOST_R3410_2001",
              "GOST_R3411_94_WITH_GOST_R3410_94"
            ],
            "example": "SHA256_WITH_RSA_ENCRYPTION",
            "type": "string"
          },
          "signatureHashAlgorithm": {
            "description": "A certificate signature hash algorithm",
            "enum": [
              "MD5",
              "SHA1",
              "MD2",
              "SHA224",
              "SHA256",
              "SHA384",
              "SHA512",
              "UNKNOWN",
              "GOSTR3411_94"
            ],
            "example": "SHA256",
            "type": "string"
          },
          "statusModificationDate": {
            "description": "The date a certificate's status was modified",
            "example": "2022-04-24T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "statusModificationUserId": {
            "description": "UUID of the user that modified the certificate installation",
            "example": "3c9964a0-9046-11ed-8e50-b994b27d2ece",
            "format": "uuid",
            "type": "string"
          },
          "subjectAlternativeNameDns": {
            "description": "A collection of certificate subject alternative names DNs",
            "example": [
              "venafi.com",
              "www.venafi.com"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectAlternativeNameNonDns": {
            "description": "A collection of certificate subject alternative name none DNs",
            "example": [
              "venafi domain"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectAlternativeNamesByType": {
            "$ref": "#/components/schemas/GeneralNamesData2"
          },
          "subjectC": {
            "description": "A certificate subject Country",
            "example": "US",
            "type": "string"
          },
          "subjectCN": {
            "description": "A collection of certificate subject CNs",
            "example": [
              "venafi.com",
              "cloud.venafi"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectDN": {
            "description": "A certificate subject DN",
            "example": "cn=www.venafi.com,o=Venafi, Inc.,c=US,st=Utah,l=Salt Lake City",
            "type": "string"
          },
          "subjectKeyIdentifierHash": {
            "description": "A subject key identifier hash",
            "example": "4E0CE93D3240561F468C33A85F08FCD3B04CC9DC",
            "type": "string"
          },
          "subjectL": {
            "description": "A certificate subject Locality",
            "example": "Salt Lake City",
            "type": "string"
          },
          "subjectO": {
            "description": "A certificate subject Organization",
            "example": "Venafi, Inc.",
            "type": "string"
          },
          "subjectOU": {
            "description": "A collection of certificate subject Organization units",
            "example": [
              "devops",
              "test"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectST": {
            "description": "A certificate subject State",
            "example": "Utah",
            "type": "string"
          },
          "tags": {
            "description": "A collection of tags",
            "example": [
              "owner:test.user",
              "90-day"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "totalActiveInstanceCount": {
            "description": "total active instances of a certificate",
            "example": 50,
            "format": "int32",
            "type": "integer"
          },
          "totalInstanceCount": {
            "description": "total instances of a certificate",
            "example": 100,
            "format": "int32",
            "type": "integer"
          },
          "validityEnd": {
            "description": "The date a certificate validity ends",
            "example": "2023-01-24T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "validityStart": {
            "description": "The date a certificate validity starts",
            "example": "2022-01-24T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "versionType": {
            "description": "A certificate version type",
            "enum": [
              "OLD",
              "CURRENT"
            ],
            "example": "CURRENT",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateInstanceInformation": {
        "properties": {
          "applicationIds": {
            "description": "A collection of application IDs",
            "example": [
              "d3cce873-6957-4071-a65e-7676c0ae1123",
              "322bcd99-286a-47ea-8dcd-8291ec5bff14"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "certificateId": {
            "description": "UUID of a certificate",
            "example": "2eb29780-9046-11ed-8e50-b994b27d2ece",
            "format": "uuid",
            "type": "string"
          },
          "certificateInstanceId": {
            "description": "UUID of a certificate instance",
            "example": "f68daf30-4690-45bc-85b3-bb327024735e",
            "format": "uuid",
            "type": "string"
          },
          "certificateSource": {
            "description": "Certificate source",
            "enum": [
              "UNKNOWN",
              "USER_PROVIDED",
              "USER_IMPORTED",
              "USER_SCAN",
              "TRUSTNET_SCAN",
              "ON_PREM_CA_IMPORT",
              "EXTERNAL_CA_IMPORT",
              "FILE_IMPORT",
              "EXTERNAL_SCAN",
              "DOMAIN_SCAN",
              "SMART_SCAN_INTERNAL",
              "SMART_SCAN_EXTERNAL",
              "SMART_VALIDATION_INTERNAL",
              "SMART_VALIDATION_EXTERNAL",
              "MACHINE_DISCOVERY",
              "KUBERNETES_DISCOVERY",
              "AWS_DISCOVERY",
              "AZURE_DISCOVERY",
              "GCP_DISCOVERY"
            ],
            "example": "USER_SCAN",
            "type": "string"
          },
          "deploymentStatus": {
            "description": "The deployment status",
            "enum": [
              "UNKNOWN",
              "IN_USE",
              "SUPERSEDED"
            ],
            "example": "IN_USE",
            "type": "string"
          },
          "hostname": {
            "description": "A hostname",
            "example": "venafi.com",
            "type": "string"
          },
          "instanceChainValidationStatus": {
            "description": "A collection of the instance chain validation status",
            "example": [
              "OK"
            ],
            "items": {
              "enum": [
                "OK",
                "CHAIN_BUILDING_FAILED",
                "INCOMPLETE_CHAIN",
                "CHAIN_EXPIRE_BEFORE_EE",
                "DISTRUSTED",
                "UNKNOWN_ERROR",
                "SELF_SIGNED"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "ipAddress": {
            "description": "An ip address",
            "example": "14.183.1.32",
            "type": "string"
          },
          "lastScanDate": {
            "description": "The last scan date",
            "example": "2023-01-10T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "lastValidatedAttempt": {
            "description": "The last validation attempt date",
            "example": "2023-01-11T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "modificationDate": {
            "description": "The last modification date",
            "example": "2023-01-10T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "port": {
            "description": "A port number",
            "example": 443,
            "format": "int32",
            "type": "integer"
          },
          "serviceIds": {
            "description": "A collection of service IDs",
            "example": [
              "1d61e9e0-9046-11ed-bf12-53a1b041cf2"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "sslProtocols": {
            "description": "A collection of ssl protocols",
            "example": [
              "TLSv1.1",
              "TLSv1.2"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sslValidationErrorArguments": {
            "description": "A collection of ssl validation error arguments",
            "example": [
              "B69950CC5F51EDDF55F36AD2BC898767BC43CC2A",
              "24E5796GA7298E78EDE47D6FAED0790E8F464G54"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sslValidationStatus": {
            "description": "SSL validation status",
            "enum": [
              "HOSTNAME_NOT_RESOLVABLE",
              "NO_CERTIFICATE_PRESENTED",
              "INVALID_CERTIFICATE_FOUND",
              "UNEXPECTED_CERTIFICATE_FOUND",
              "OLD_VERSION_CERTIFICATE_FOUND",
              "TARGET_UNREACHABLE",
              "UNKNOWN_ERROR",
              "OK"
            ],
            "example": "OK",
            "type": "string"
          },
          "sslValidationStatusMessage": {
            "description": "SSL validation status message",
            "example": "Certificate installation is using older versions of certificate",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateInstanceValidationRequest": {
        "properties": {
          "instanceIds": {
            "description": "Unique certificate instance id(s) containing numbers, letters and dashes.",
            "example": [
              "7860eedb-c140-4354-b0ad-991cc7a7b4d1",
              "0b0f6424-30bc-4ed8-ae83-cdeca3eaf60e"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "instanceIds"
        ],
        "type": "object"
      },
      "CertificateIssuingTemplateDeleteResponse": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateIssuingTemplateInformation1": {
        "properties": {
          "certificateAuthority": {
            "enum": [
              "MOCKCA",
              "DIGICERT",
              "GLOBALSIGN",
              "BUILTIN",
              "ENTRUST",
              "MICROSOFT",
              "ACME",
              "ZTPKI",
              "GLOBALSIGNMSSL",
              "TPP",
              "CONNECTOR"
            ],
            "type": "string"
          },
          "certificateAuthorityAccountId": {
            "format": "uuid",
            "type": "string"
          },
          "certificateAuthorityProductOptionId": {
            "format": "uuid",
            "type": "string"
          },
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "csrUploadAllowed": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "everyoneIsConsumer": {
            "type": "boolean"
          },
          "extendedKeyUsageValues": {
            "items": {
              "enum": [
                "SERVER",
                "CLIENT"
              ],
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "keyGeneratedByVenafiAllowed": {
            "type": "boolean"
          },
          "keyReuse": {
            "type": "boolean"
          },
          "keyTypes": {
            "items": {
              "$ref": "#/components/schemas/KeyTypeInformation"
            },
            "type": "array"
          },
          "modificationDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "type": "integer"
          },
          "product": {
            "$ref": "#/components/schemas/CertificateAuthorityProductInformation1"
          },
          "reason": {
            "type": "string"
          },
          "recommendedSettings": {
            "$ref": "#/components/schemas/RecommendedSettingsInformation1"
          },
          "referencingApplicationIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "resourceConsumerTeamIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "resourceConsumerUserIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "sanDnsNameRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sanIpAddressRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sanRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sanRfc822NameRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sanUniformResourceIdentifierRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "enum": [
              "AVAILABLE",
              "UNAVAILABLE"
            ],
            "type": "string"
          },
          "subjectCNRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectCValues": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectLRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectORegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectOURegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectSTRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "systemGenerated": {
            "type": "boolean"
          },
          "trackingData": {
            "$ref": "#/components/schemas/TrackingDataInformation"
          }
        },
        "type": "object"
      },
      "CertificateIssuingTemplateInformation2": {
        "properties": {
          "certificateAuthority": {
            "enum": [
              "MOCKCA",
              "DIGICERT",
              "GLOBALSIGN",
              "BUILTIN",
              "ENTRUST",
              "MICROSOFT",
              "ACME",
              "ZTPKI",
              "GLOBALSIGNMSSL",
              "TPP",
              "CONNECTOR"
            ],
            "type": "string"
          },
          "certificateAuthorityAccountId": {
            "format": "uuid",
            "type": "string"
          },
          "certificateAuthorityProductOptionId": {
            "format": "uuid",
            "type": "string"
          },
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "csrUploadAllowed": {
            "type": "boolean"
          },
          "everyoneIsConsumer": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "keyGeneratedByVenafiAllowed": {
            "type": "boolean"
          },
          "keyReuse": {
            "type": "boolean"
          },
          "keyTypes": {
            "items": {
              "$ref": "#/components/schemas/KeyTypeInformation"
            },
            "type": "array"
          },
          "modificationDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "type": "integer"
          },
          "product": {
            "$ref": "#/components/schemas/CertificateAuthorityProductInformation2"
          },
          "productEntitlement": {
            "enum": [
              "ANY",
              "MIRA",
              "DEVOPS",
              "OUTAGE_DETECTION",
              "CODESIGN"
            ],
            "type": "string"
          },
          "productEntitlements": {
            "enum": [
              "ANY",
              "MIRA",
              "DEVOPS",
              "OUTAGE_DETECTION",
              "CODESIGN"
            ],
            "type": "string",
            "writeOnly": true
          },
          "reason": {
            "type": "string"
          },
          "recommendedSettings": {
            "$ref": "#/components/schemas/RecommendedSettingsInformation2"
          },
          "resourceConsumerTeamIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "resourceConsumerUserIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "sanDnsNameRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sanIpAddressRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sanRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sanRfc822NameRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sanUniformResourceIdentifierRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "enum": [
              "AVAILABLE",
              "UNAVAILABLE"
            ],
            "type": "string"
          },
          "subjectCNRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectCValues": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectLRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectORegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectOURegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectSTRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "systemGenerated": {
            "type": "boolean"
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "PnYnMnDTnHnMnS",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateIssuingTemplateRequest": {
        "properties": {
          "certificateAuthority": {
            "enum": [
              "MOCKCA",
              "DIGICERT",
              "GLOBALSIGN",
              "BUILTIN",
              "ENTRUST",
              "MICROSOFT",
              "ACME",
              "ZTPKI",
              "GLOBALSIGNMSSL",
              "TPP",
              "CONNECTOR"
            ],
            "type": "string"
          },
          "certificateAuthorityProductOptionId": {
            "format": "uuid",
            "type": "string"
          },
          "csrUploadAllowed": {
            "type": "boolean"
          },
          "description": {
            "maxLength": 1024,
            "type": "string"
          },
          "everyoneIsConsumer": {
            "type": "boolean"
          },
          "extendedKeyUsageValues": {
            "items": {
              "enum": [
                "SERVER",
                "CLIENT"
              ],
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "keyGeneratedByVenafiAllowed": {
            "type": "boolean"
          },
          "keyReuse": {
            "type": "boolean"
          },
          "keyTypes": {
            "items": {
              "$ref": "#/components/schemas/KeyTypeParameters1"
            },
            "type": "array"
          },
          "name": {
            "maxLength": 64,
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "type": "integer"
          },
          "product": {
            "$ref": "#/components/schemas/CertificateAuthorityProductInformation1"
          },
          "recommendedSettings": {
            "$ref": "#/components/schemas/RecommendedSettingsRequest"
          },
          "resourceConsumerTeamIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "resourceConsumerUserIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "sanIpAddressRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sanRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sanRfc822NameRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sanUniformResourceIdentifierRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectCNRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectCValues": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectLRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectORegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectOURegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectSTRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trackingData": {
            "$ref": "#/components/schemas/TrackingDataInformation"
          }
        },
        "required": [
          "certificateAuthority",
          "certificateAuthorityProductOptionId",
          "keyReuse",
          "keyTypes",
          "name",
          "product"
        ],
        "type": "object"
      },
      "CertificateIssuingTemplateResponse": {
        "properties": {
          "certificateIssuingTemplates": {
            "items": {
              "$ref": "#/components/schemas/CertificateIssuingTemplateInformation1"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CertificateOwnership": {
        "properties": {
          "owningContainers": {
            "items": {
              "$ref": "#/components/schemas/ExtendedApplicationOwnership"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "CertificateRecoveryRequest": {
        "properties": {
          "applicationIds": {
            "description": "A collection of applications UUIDs",
            "example": [
              "47c9d920-da21-11ed-a63c-d508f08eeaa0",
              "9303e940-df9d-11ed-8850-f18176fc5513"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "certificateIds": {
            "description": "A collection of certificates UUIDs",
            "example": [
              "f2b42d60-df9c-11ed-b8ab-4788d83ace9f",
              "f2c173d0-df9c-11ed-b8ab-4788d83ace9f"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "certificateIds"
        ],
        "type": "object"
      },
      "CertificateRequestApprovalConditionsFilterRuleInformation": {
        "properties": {
          "applicationIds": {
            "description": "A collection of application ids the rule will be applicable to",
            "example": "5ece3180-b1e0-11ed-862d-ad36b18e787a",
            "format": "uuid",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "certificateAuthorityAccountIds": {
            "description": "A collection of certificate authority account ids the rule will be applicable to",
            "example": "4ece3180-b1e0-11ed-862d-ad36b18e787a",
            "format": "uuid",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "certificateIssuingTemplateIds": {
            "description": "A collection of certificate issuing template ids the rule will be applicable to",
            "example": "6ece3180-b1e0-11ed-862d-ad36b18e787a",
            "format": "uuid",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CertificateRequestApprovalExceptionsFilterRuleInformation": {
        "properties": {
          "applicationIds": {
            "description": "A collection of application ids the rule won't be applied to",
            "example": "5ece3180-b1e0-11ed-862d-ad36b18e787a",
            "format": "uuid",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "requestors": {
            "description": "A collection of approvers, specified by type and id, for which the rule won't be applied",
            "items": {
              "$ref": "#/components/schemas/ApproverProperty"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "CertificateRequestApprovalRuleDeleteResponseOpenApi": {
        "properties": {
          "id": {
            "description": "Approval rule `id`",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Approval rule name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateRequestApprovalRuleOpenApi": {
        "properties": {
          "approvers": {
            "description": "A collection of approvers specified by type and id",
            "items": {
              "$ref": "#/components/schemas/ApproverProperty"
            },
            "type": "array",
            "uniqueItems": true
          },
          "atLeast": {
            "description": "If the type of the approval is AT_LEAST then specify how many people have to approve",
            "format": "int32",
            "type": "integer"
          },
          "autoApproveOnRenew": {
            "default": false,
            "description": "Automatically approve when renew a certificate",
            "type": "boolean"
          },
          "autoRejectionThreshold": {
            "description": "Auto rejection threshold. After the defined number of days since request creation, the request is automatically rejected, if it is not approved",
            "example": 5,
            "maximum": 99,
            "minimum": 1,
            "type": "number"
          },
          "conditions": {
            "$ref": "#/components/schemas/CertificateRequestApprovalConditionsFilterRuleInformation"
          },
          "creationDate": {
            "description": "The date a approval rule was created",
            "example": "2023-01-10T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "exceptions": {
            "$ref": "#/components/schemas/CertificateRequestApprovalExceptionsFilterRuleInformation"
          },
          "finalApprover": {
            "$ref": "#/components/schemas/ApproverPropertyOpenApi"
          },
          "id": {
            "description": "Approval rule `id`",
            "format": "uuid",
            "type": "string"
          },
          "modificationDate": {
            "description": "The date a approval rule was modified",
            "example": "2023-01-11T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Approval rule name",
            "type": "string"
          },
          "priority": {
            "description": "Priority of the rule",
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "The type of the approval rule",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateRequestApprovalRulesRequest": {
        "properties": {
          "approvers": {
            "description": "A collection of approvers specified by type and id",
            "items": {
              "$ref": "#/components/schemas/ApproverProperty"
            },
            "type": "array",
            "uniqueItems": true
          },
          "atLeast": {
            "description": "If the type of the approval is AT_LEAST then specify how many people have to approve",
            "example": 2,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "autoApproveOnRenew": {
            "default": false,
            "description": "Automatically approve when renew a certificate",
            "type": "boolean"
          },
          "autoRejectionThreshold": {
            "description": "Auto rejection threshold. After the defined number of days since request creation, the request is automatically rejected, if it is not approved",
            "example": 5,
            "maximum": 99,
            "minimum": 1,
            "type": "number"
          },
          "conditions": {
            "$ref": "#/components/schemas/CertificateRequestApprovalConditionsFilterRuleInformation"
          },
          "continueProcessingOnException": {
            "default": false,
            "description": "Continue with next approval rules when match an approval rule exception condition",
            "type": "boolean"
          },
          "exceptions": {
            "$ref": "#/components/schemas/CertificateRequestApprovalExceptionsFilterRuleInformation"
          },
          "finalApprover": {
            "description": "UUID of the final approver",
            "example": "8268d820-a08d-11ed-bbc0-252385d6d390",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Approval rule name",
            "example": "Approval rule for built in CA",
            "maxLength": 64,
            "type": "string"
          },
          "type": {
            "description": "The type of the approval rule",
            "enum": [
              "ALL",
              "AT_LEAST"
            ],
            "example": "AT_LEAST",
            "type": "string"
          }
        },
        "required": [
          "approvers",
          "conditions",
          "name",
          "type"
        ],
        "type": "object"
      },
      "CertificateRequestApprovalRulesResponseOpenApi": {
        "properties": {
          "approvalRules": {
            "items": {
              "$ref": "#/components/schemas/CertificateRequestApprovalRuleOpenApi"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CertificateRequestApprovalRulesUpdateRequest": {
        "properties": {
          "approvers": {
            "description": "A collection of approvers specified by type and id",
            "items": {
              "$ref": "#/components/schemas/ApproverProperty"
            },
            "type": "array",
            "uniqueItems": true
          },
          "atLeast": {
            "description": "If the type of the approval is AT_LEAST then specify how many people have to approve",
            "example": 2,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "autoApproveOnRenew": {
            "default": false,
            "description": "Automatically approve when renew a certificate",
            "type": "boolean"
          },
          "autoRejectionThreshold": {
            "description": "Auto rejection threshold. After the defined number of days since request creation, the request is automatically rejected, if it is not approved",
            "example": 5,
            "maximum": 99,
            "minimum": 1,
            "type": "number"
          },
          "conditions": {
            "$ref": "#/components/schemas/CertificateRequestApprovalConditionsFilterRuleInformation"
          },
          "continueProcessingOnException": {
            "default": false,
            "description": "Continue with next approval rules when match an approval rule exception condition",
            "type": "boolean"
          },
          "exceptions": {
            "$ref": "#/components/schemas/CertificateRequestApprovalExceptionsFilterRuleInformation"
          },
          "finalApprover": {
            "description": "UUID of the final approver",
            "example": "8268d820-a08d-11ed-bbc0-252385d6d390",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Approval rule name",
            "example": "Approval rule for built in CA",
            "maxLength": 64,
            "type": "string"
          },
          "priority": {
            "description": "Rule priority. The order in which the rules will be executed. Starts from 1 (highest priority).",
            "example": 5,
            "minimum": 1,
            "type": "number"
          },
          "type": {
            "description": "The type of the approval rule",
            "enum": [
              "ALL",
              "AT_LEAST"
            ],
            "example": "AT_LEAST",
            "type": "string"
          }
        },
        "required": [
          "approvers",
          "conditions",
          "name",
          "type"
        ],
        "type": "object"
      },
      "CertificateRequestDocumentInformation": {
        "properties": {
          "applicationId": {
            "description": "UUID of an application ID",
            "example": "dc6eb020-9131-11ed-9ce4-1d9554d648cd",
            "format": "uuid",
            "type": "string"
          },
          "approvedIds": {
            "description": "A collection of IDs of all users that have already approved",
            "example": "[f196eb0-71cb-11ed-9749-93c174f3c18d, f196eb0-81av-11ed-9749-93c174f3c18d]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "approverTeamIds": {
            "description": "A collection of all team IDs that are configured as approvers",
            "example": "[f196eb0-71cb-11ed-9749-93c174f3c18d, f196eb0-81av-11ed-9749-93c174f3c18d]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "approverUserIds": {
            "description": "A collection of all user IDs that are configured as approvers",
            "example": "[f196eb0-71cb-11ed-9749-93c174f3c18d, f196eb0-81av-11ed-9749-93c174f3c18d]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "caOrderId": {
            "description": "A CA order ID",
            "example": "63364861",
            "type": "string"
          },
          "certificateIds": {
            "description": "A collection of certificate ids",
            "example": [
              "1441c6f0-9136-11ed-bd65-ed926a033704",
              "12257370-9132-11ed-bd65-ed926a033704"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "certificateIssuingTemplateId": {
            "description": "UUID of certificate issuing template",
            "example": "ce9c2cc0-9131-11ed-a8f1-bf0e7991f912",
            "format": "uuid",
            "type": "string"
          },
          "certificateOwnerUserId": {
            "description": "UUID of the certificate request's owner",
            "example": "88932c30-8e14-11ed-87e3-755db050f29d",
            "format": "uuid",
            "type": "string"
          },
          "companyId": {
            "description": "UUID of a company",
            "example": "85595df0-8e14-11ed-87e3-755db050f29d",
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "description": "The date a certificate request was created",
            "example": "2022-01-20T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "customAttributes": {
            "$ref": "#/components/schemas/CustomAttributes2"
          },
          "errorInformation": {
            "$ref": "#/components/schemas/ErrorInformation"
          },
          "finalApproverId": {
            "description": "UUID of the final approver if configured",
            "example": "dc6eb020-9131-11ed-9ce4-1d9554d648cd",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "UUID of a certificate request",
            "example": "fa4a2210-9135-11ed-a8f1-bf0e7991f912",
            "format": "uuid",
            "type": "string"
          },
          "keyCurve": {
            "description": "Certificate request key curve",
            "enum": [
              "P256",
              "P384",
              "P521",
              "ED25519",
              "UNKNOWN"
            ],
            "example": "P521",
            "type": "string"
          },
          "keyLength": {
            "description": "Certificate request key length",
            "example": 2048,
            "format": "int32",
            "type": "integer"
          },
          "keyType": {
            "description": "Certificate request key type",
            "enum": [
              "RSA",
              "DSA",
              "EC",
              "GOST3410",
              "ECGOST3410",
              "RESERVED3",
              "UNKNOWN"
            ],
            "example": "RSA",
            "type": "string"
          },
          "modificationDate": {
            "description": "The date a certificate request was modified",
            "example": "2023-01-24T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The status of the certificate request",
            "enum": [
              "NEW",
              "PENDING",
              "PENDING_APPROVAL",
              "PENDING_FINAL_APPROVAL",
              "REJECTED_APPROVAL",
              "REQUESTED",
              "ISSUED",
              "REJECTED",
              "CANCELLED",
              "REVOKED",
              "FAILED",
              "DELETED"
            ],
            "example": "ISSUED",
            "type": "string"
          },
          "subjectAlternativeNamesByType": {
            "$ref": "#/components/schemas/GeneralNamesData2"
          },
          "subjectCN": {
            "description": "Certificate request subject CN",
            "example": "venafi.com",
            "type": "string"
          },
          "subjectDN": {
            "description": "Certificate request subject DN",
            "example": "cn=venafi.com,ou=devops,o=venafi,c=US,st=Utah,l=Salt Lake City",
            "type": "string"
          },
          "tags": {
            "description": "A collection of tags",
            "example": [
              "test",
              "category:security"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "P10M",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateRequestDocumentResponse": {
        "properties": {
          "certificateRequests": {
            "description": "A collection of certificate request information",
            "example": [
              {
                "applicationId": "813700b0-c357-11ed-aea1-99c5a9067cde",
                "caOrderId": "3a:5f:7e:9f:8c:e4:b6:f7:25:a7:81:0d:f0:ac:28:ec:fe:05:9b:30",
                "certificateIds": [
                  "a27dfc10-c357-11ed-946f-7db55f9ae03e",
                  "a275beb0-c357-11ed-946f-7db55f9ae03e",
                  "a24c16a0-c357-11ed-946f-7db55f9ae03e"
                ],
                "certificateIssuingTemplateId": "73a22290-c357-11ed-a00c-e3953fcf04eb",
                "certificateOwnerUserId": "9bf1e760-b797-11ed-a508-c13aa0641666",
                "companyId": "98996d90-b797-11ed-a508-c13aa0641666",
                "creationDate": "2023-03-15T17:34:26.466+00:00",
                "id": "a1c0c690-c357-11ed-a00c-e3953fcf04eb",
                "keyLength": 4096,
                "keyType": "RSA",
                "modificationDate": "2023-03-15T17:34:27.479+00:00",
                "status": "ISSUED",
                "subjectAlternativeNamesByType": {
                  "dNSName": [
                    "localhost"
                  ]
                },
                "subjectCN": "localhost",
                "subjectDN": "cn=localhost,ou=devops,o=venafi,c=MX,st=Yucatan,l=Merida",
                "validityPeriod": "P10D"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CertificateRequestDocumentInformation"
            },
            "type": "array"
          },
          "numFound": {
            "description": "The number of certificate requests that were found",
            "example": 10,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CertificateRequestInformation1": {
        "properties": {
          "caOrderId": {
            "description": "A CA order ID",
            "example": "63364861",
            "type": "string"
          },
          "certificateIds": {
            "description": "A collection of certificate IDs",
            "example": [
              "1441c6f0-9136-11ed-bd65-ed926a033704",
              "12257370-9132-11ed-bd65-ed926a033704"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "certificateIssuingTemplateId": {
            "description": "UUID of a certificate issuing template",
            "example": "ce9c2cc0-9131-11ed-a8f1-bf0e7991f912",
            "format": "uuid",
            "type": "string"
          },
          "certificateName": {
            "description": "A certificate name",
            "example": "venafi.com",
            "type": "string"
          },
          "certificateOwnerUserId": {
            "description": "UUID of the certificate request's owner",
            "example": "88932c30-8e14-11ed-87e3-755db050f29d",
            "format": "uuid",
            "type": "string"
          },
          "certificateSigningRequest": {
            "description": "A certificate signing request (CSR) in PEM format",
            "type": "string"
          },
          "companyId": {
            "description": "UUID of a company",
            "example": "85595df0-8e14-11ed-87e3-755db050f29d",
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "description": "The date a certificate request was created",
            "example": "2023-01-10T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "customAttributes": {
            "$ref": "#/components/schemas/CustomAttributes1"
          },
          "dekHash": {
            "description": "A certificate dek hash",
            "example": "RaBDrLmQ69hACXOrPU6542RBT-M-yZOkw4XKsT-r55i=",
            "type": "string"
          },
          "encryptedPrivateKey": {
            "items": {
              "format": "byte",
              "type": "string"
            },
            "type": "array"
          },
          "errorInformation": {
            "$ref": "#/components/schemas/ErrorInformation"
          },
          "id": {
            "description": "UUID of a certificate request",
            "example": "fa4a2210-9135-11ed-a8f1-bf0e7991f912",
            "format": "uuid",
            "type": "string"
          },
          "keyCurve": {
            "description": "Certificate request key curve",
            "enum": [
              "P256",
              "P384",
              "P521",
              "ED25519",
              "UNKNOWN"
            ],
            "example": "P521",
            "type": "string"
          },
          "keyLength": {
            "description": "Certificate request key length",
            "example": 2048,
            "format": "int32",
            "type": "integer"
          },
          "keyType": {
            "description": "Certificate request key type",
            "enum": [
              "RSA",
              "DSA",
              "EC",
              "GOST3410",
              "ECGOST3410",
              "RESERVED3",
              "UNKNOWN"
            ],
            "example": "RSA",
            "type": "string"
          },
          "modificationDate": {
            "description": "The date a certificate request was modified",
            "example": "2023-01-11T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "product": {
            "$ref": "#/components/schemas/CertificateAuthorityProductInformation1"
          },
          "productEntitlement": {
            "enum": [
              "ANY",
              "MIRA",
              "DEVOPS",
              "OUTAGE_DETECTION",
              "CODESIGN"
            ],
            "type": "string"
          },
          "status": {
            "description": "The status of a certificate request",
            "enum": [
              "NEW",
              "PENDING",
              "PENDING_APPROVAL",
              "PENDING_FINAL_APPROVAL",
              "REJECTED_APPROVAL",
              "REQUESTED",
              "ISSUED",
              "REJECTED",
              "CANCELLED",
              "REVOKED",
              "FAILED",
              "DELETED"
            ],
            "example": "ISSUED",
            "type": "string"
          },
          "subjectAlternativeNamesByType": {
            "$ref": "#/components/schemas/GeneralNamesData1"
          },
          "subjectDN": {
            "description": "Certificate request subject DN",
            "example": "cn=venafi.com,ou=devops,o=venafi,c=US,st=Utah,l=Salt Lake City",
            "type": "string"
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "P10M",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateRequestInformation2": {
        "properties": {
          "apiClientInformation": {
            "$ref": "#/components/schemas/ApiClientInformation"
          },
          "applicationId": {
            "description": "UUID of an application ID",
            "example": "dc6eb020-9131-11ed-9ce4-1d9554d648cd",
            "format": "uuid",
            "type": "string"
          },
          "approvedIds": {
            "description": "A collection of IDs of all users that have already approved",
            "example": "[f196eb0-71cb-11ed-9749-93c174f3c18d, f196eb0-81av-11ed-9749-93c174f3c18d]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "approverTeamIds": {
            "description": "A collection of all team IDs that are configured as approvers",
            "example": "[f196eb0-71cb-11ed-9749-93c174f3c18d, f196eb0-81av-11ed-9749-93c174f3c18d]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "approverUserIds": {
            "description": "A collection of all user IDs that are configured as approvers",
            "example": "[f196eb0-71cb-11ed-9749-93c174f3c18d, f196eb0-81av-11ed-9749-93c174f3c18d]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "caOrderId": {
            "description": "A CA order ID",
            "example": "63364861",
            "type": "string"
          },
          "certificateIds": {
            "description": "A collection of certificate IDs",
            "example": [
              "1441c6f0-9136-11ed-bd65-ed926a033704",
              "12257370-9132-11ed-bd65-ed926a033704"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "certificateIssuingTemplateId": {
            "description": "UUID of a certificate issuing template",
            "example": "ce9c2cc0-9131-11ed-a8f1-bf0e7991f912",
            "format": "uuid",
            "type": "string"
          },
          "certificateOwnerUserId": {
            "description": "UUID of the certificate request's owner",
            "example": "88932c30-8e14-11ed-87e3-755db050f29d",
            "format": "uuid",
            "type": "string"
          },
          "certificateSigningRequest": {
            "description": "A certificate signing request (CSR) in PEM format",
            "type": "string"
          },
          "certificateUsageMetadata": {
            "description": "A collection of certificate request metadata",
            "example": [
              {
                "appName": "venafi app1",
                "automationMetadata": "automation data 008",
                "nodeName": "venafi node 007"
              },
              {
                "appName": "venafi app2",
                "automationMetadata": "automation data 0013",
                "nodeName": "venafi node 005"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CertificateUsageMetadata"
            },
            "type": "array"
          },
          "companyId": {
            "description": "UUID of a company",
            "example": "85595df0-8e14-11ed-87e3-755db050f29d",
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "description": "The date a certificate request was created",
            "example": "2023-01-10T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "customAttributesInformation": {
            "$ref": "#/components/schemas/CustomAttributesInformation"
          },
          "errorInformation": {
            "$ref": "#/components/schemas/ErrorInformation"
          },
          "finalApproverId": {
            "description": "UUID of the final approver if configured",
            "example": "dc6eb020-9131-11ed-9ce4-1d9554d648cd",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "UUID of a certificate request",
            "example": "fa4a2210-9135-11ed-a8f1-bf0e7991f912",
            "format": "uuid",
            "type": "string"
          },
          "keyCurve": {
            "description": "Certificate request key curve",
            "enum": [
              "P256",
              "P384",
              "P521",
              "ED25519",
              "UNKNOWN"
            ],
            "example": "P521",
            "type": "string"
          },
          "keyLength": {
            "description": "Certificate request key length",
            "example": 2048,
            "format": "int32",
            "type": "integer"
          },
          "keyType": {
            "description": "Certificate request key type",
            "enum": [
              "RSA",
              "DSA",
              "EC",
              "GOST3410",
              "ECGOST3410",
              "RESERVED3",
              "UNKNOWN"
            ],
            "example": "RSA",
            "type": "string"
          },
          "modificationDate": {
            "description": "The date a certificate request was modified",
            "example": "2023-01-11T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The status of a certificate request",
            "enum": [
              "NEW",
              "PENDING",
              "PENDING_APPROVAL",
              "PENDING_FINAL_APPROVAL",
              "REJECTED_APPROVAL",
              "REQUESTED",
              "ISSUED",
              "REJECTED",
              "CANCELLED",
              "REVOKED",
              "FAILED",
              "DELETED"
            ],
            "example": "ISSUED",
            "type": "string"
          },
          "subjectAlternativeNamesByType": {
            "$ref": "#/components/schemas/GeneralNamesData2"
          },
          "subjectDN": {
            "description": "Certificate request subject DN",
            "example": "cn=venafi.com,ou=devops,o=venafi,c=US,st=Utah,l=Salt Lake City",
            "type": "string"
          },
          "tags": {
            "description": "A collection of tags",
            "example": [
              "test",
              "category:security"
            ],
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "P10M",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateRequestRequest": {
        "properties": {
          "apiClientInformation": {
            "$ref": "#/components/schemas/ApiClientInformation"
          },
          "applicationId": {
            "description": "Application UUID",
            "example": "b00701b0-886f-11ed-9f39-3d586ab80cf2",
            "format": "uuid",
            "type": "string"
          },
          "certificateIssuingTemplateId": {
            "description": "Certificate issuing template UUID",
            "example": "a305d810-886f-11ed-9ccf-0dbf748eb1ae",
            "format": "uuid",
            "type": "string"
          },
          "certificateOwnerUserId": {
            "description": "Certificate owner UUID",
            "example": "a305d810-886f-11ed-9ccf-0dbf748eb1ae",
            "format": "uuid",
            "type": "string"
          },
          "certificateSigningRequest": {
            "description": "A certificate signing request(CSR) in PEM format",
            "type": "string"
          },
          "certificateUsageMetadata": {
            "description": "A collection of certificate request metadata",
            "example": [
              {
                "appName": "venafi app1",
                "automationMetadata": "automation data 008",
                "nodeName": "venafi node 007"
              },
              {
                "appName": "venafi app2",
                "automationMetadata": "automation data 0013",
                "nodeName": "venafi node 005"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CertificateUsageMetadata"
            },
            "type": "array"
          },
          "csrAttributes": {
            "$ref": "#/components/schemas/CSRAttributesInformation"
          },
          "customAttributes": {
            "$ref": "#/components/schemas/CustomAttributesInformation"
          },
          "existingCertificateId": {
            "description": "Existing certificate UUID",
            "example": "b505d810-886f-11ed-9ccf-0dbf748eb1ae",
            "format": "uuid",
            "type": "string"
          },
          "isVaaSGenerated": {
            "description": "Specify whether VaaS should generate the request.",
            "example": true,
            "type": "boolean"
          },
          "reuseCSR": {
            "description": "Specifies whether an existing CSR is reused",
            "example": true,
            "type": "boolean"
          },
          "tags": {
            "description": "A collection of tags",
            "example": [
              "test",
              "category:security"
            ],
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "P10M",
            "type": "string"
          }
        },
        "required": [
          "applicationId",
          "certificateIssuingTemplateId",
          "certificateSigningRequest",
          "csrAttributes",
          "existingCertificateId",
          "isVaaSGenerated"
        ],
        "type": "object"
      },
      "CertificateRequestResponse": {
        "properties": {
          "certificateRequests": {
            "description": "A collection of certificate information",
            "example": [
              {
                "applicationId": "813700b0-c357-11ed-aea1-99c5a9067cde",
                "caOrderId": "3a:5f:7e:9f:8c:e4:b6:f7:25:a7:81:0d:f0:ac:28:ec:fe:05:9b:30",
                "certificateIds": [
                  "a27dfc10-c357-11ed-946f-7db55f9ae03e",
                  "a275beb0-c357-11ed-946f-7db55f9ae03e",
                  "a24c16a0-c357-11ed-946f-7db55f9ae03e"
                ],
                "certificateIssuingTemplateId": "73a22290-c357-11ed-a00c-e3953fcf04eb",
                "certificateOwnerUserId": "9bf1e760-b797-11ed-a508-c13aa0641666",
                "companyId": "98996d90-b797-11ed-a508-c13aa0641666",
                "creationDate": "2023-03-15T17:34:26.466+00:00",
                "id": "a1c0c690-c357-11ed-a00c-e3953fcf04eb",
                "keyLength": 4096,
                "keyType": "RSA",
                "modificationDate": "2023-03-15T17:34:27.479+00:00",
                "status": "ISSUED",
                "subjectAlternativeNamesByType": {
                  "dNSName": [
                    "localhost"
                  ]
                },
                "subjectCN": "localhost",
                "subjectDN": "cn=localhost,ou=devops,o=venafi,c=MX,st=Yucatan,l=Merida",
                "validityPeriod": "P10D"
              },
              {
                "applicationId": "813700b0-c357-11ed-aea1-99c5a9067cde",
                "caOrderId": "6f:b7:27:c8:2c:bd:1a:b0:6f:43:fb:8a:6b:5b:a3:a6:c2:52:38:85",
                "certificateIds": [
                  "b767aef0-c357-11ed-946f-7db55f9ae03e",
                  "a275beb0-c357-11ed-946f-7db55f9ae03e",
                  "a24c16a0-c357-11ed-946f-7db55f9ae03e"
                ],
                "certificateIssuingTemplateId": "73a22290-c357-11ed-a00c-e3953fcf04eb",
                "certificateOwnerUserId": "9bf1e760-b797-11ed-a508-c13aa0641666",
                "companyId": "98996d90-b797-11ed-a508-c13aa0641666",
                "creationDate": "2023-03-15T17:35:02.384+00:00",
                "id": "b7502f50-c357-11ed-a00c-e3953fcf04eb",
                "keyLength": 4096,
                "keyType": "RSA",
                "modificationDate": "2023-03-15T17:35:02.544+00:00",
                "status": "ISSUED",
                "subjectAlternativeNamesByType": {
                  "dNSName": [
                    "venafi.com"
                  ]
                },
                "subjectCN": "venafi.com",
                "subjectDN": "cn=venafi.com,ou=devops,o=venafi,c=MX,st=Yucatan,l=Merida",
                "validityPeriod": "P12D"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CertificateRequestInformation2"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CertificateRequestResubmissionRequest": {
        "properties": {
          "certificateIssuingTemplateId": {
            "description": "Certificate issuing template UUID",
            "example": "a305d810-886f-11ed-9ccf-dbf748eb1ae0",
            "format": "uuid",
            "type": "string"
          },
          "certificateOwnerUserId": {
            "description": "Certificate owner UUID",
            "example": "a305d810-886f-11ed-4bbe-dbf748eb1ae0",
            "format": "uuid",
            "type": "string"
          },
          "certificateUsageMetadata": {
            "description": "A collection of certificate request metadata",
            "example": [
              {
                "appName": "venafi app1",
                "automationMetadata": "automation data 008",
                "nodeName": "venafi node 007"
              },
              {
                "appName": "venafi app2",
                "automationMetadata": "automation data 0013",
                "nodeName": "venafi node 005"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CertificateUsageMetadata"
            },
            "type": "array"
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "P10M",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateResponse": {
        "properties": {
          "certificates": {
            "description": "A collection of certificates",
            "items": {
              "$ref": "#/components/schemas/CertificateInformation"
            },
            "type": "array"
          },
          "count": {
            "description": "The number of certificates.",
            "example": 2,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CertificateRetirementRequest": {
        "properties": {
          "addToBlocklist": {
            "description": "This parameter ensures the deleted certificate will not be discovered again.",
            "example": true,
            "type": "boolean"
          },
          "certificateIds": {
            "description": "A collection of certificates UUIDs",
            "example": [
              "f2b42d60-df9c-11ed-b8ab-4788d83ace9f",
              "f2c173d0-df9c-11ed-b8ab-4788d83ace9f"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "certificateIds"
        ],
        "type": "object"
      },
      "CertificateUsageMetadata": {
        "properties": {
          "appName": {
            "type": "string"
          },
          "automationMetadata": {
            "type": "string"
          },
          "nodeName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateValidationRequest": {
        "properties": {
          "certificateIds": {
            "description": "A collection of certificates UUIDs  ",
            "example": [
              "f2b42d60-df9c-11ed-b8ab-4788d83ace9f",
              "f2c173d0-df9c-11ed-b8ab-4788d83ace9f"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "certificateIds"
        ],
        "type": "object"
      },
      "CertificateValidationResponse": {
        "properties": {
          "fingerprints": {
            "description": "A collection of certificate's fingerprints",
            "example": [
              "2C85B0AD64F55AA70BAC75F69711578DC505C3F9",
              "051ECFBD202B0383A7745F479F978C8E9FA9ADE1"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CertificationRequestInformation": {
        "properties": {
          "hashAlgorithm": {
            "description": "A certificate request signature hash algorithm",
            "enum": [
              "MD5",
              "SHA1",
              "MD2",
              "SHA224",
              "SHA256",
              "SHA384",
              "SHA512",
              "UNKNOWN",
              "GOSTR3411_94"
            ],
            "example": "SHA256",
            "type": "string"
          },
          "keyCurve": {
            "description": "Certificate request key length",
            "enum": [
              "P256",
              "P384",
              "P521",
              "ED25519",
              "UNKNOWN"
            ],
            "example": "P256",
            "type": "string"
          },
          "keyLength": {
            "description": "Certificate request key length",
            "example": 2048,
            "format": "int32",
            "type": "integer"
          },
          "keyType": {
            "description": "Certificate request key type",
            "enum": [
              "RSA",
              "DSA",
              "EC",
              "GOST3410",
              "ECGOST3410",
              "RESERVED3",
              "UNKNOWN"
            ],
            "example": "RSA",
            "type": "string"
          },
          "publicKeyHash": {
            "description": "A certificate request public hash key",
            "example": "0048AA1D7E2F0017F9CA2E687D8776A1A340553D",
            "type": "string"
          },
          "signatureAlgorithm": {
            "description": "A certificate request signature algorithm",
            "enum": [
              "MD2_WITH_RSA_ENCRYPTION",
              "MD5_WITH_RSA_ENCRYPTION",
              "SHA1_WITH_RSA_ENCRYPTION",
              "SHA1_WITH_RSA_ENCRYPTION2",
              "SHA256_WITH_RSA_ENCRYPTION",
              "SHA384_WITH_RSA_ENCRYPTION",
              "SHA512_WITH_RSA_ENCRYPTION",
              "ID_DSA_WITH_SHA1",
              "dsaWithSHA1",
              "EC_DSA_WITH_SHA1",
              "EC_DSA_WITH_SHA224",
              "EC_DSA_WITH_SHA256",
              "EC_DSA_WITH_SHA384",
              "EC_DSA_WITH_SHA512",
              "UNKNOWN",
              "SHA1_WITH_RSAandMGF1",
              "GOST_R3411_94_WITH_GOST_R3410_2001",
              "GOST_R3411_94_WITH_GOST_R3410_94"
            ],
            "example": "SHA256_WITH_RSA_ENCRYPTION",
            "type": "string"
          },
          "subjectAlternativeNamesByType": {
            "$ref": "#/components/schemas/GeneralNamesData2"
          },
          "subjectDN": {
            "description": "A certificate request subject DN",
            "example": "cn=www.venafi.com,o=Venafi, Inc.,c=US,st=Utah,l=Salt Lake City",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Channel": {
        "enum": [
          "email"
        ],
        "type": "string"
      },
      "ChartDetails": {
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientAuthenticationInformation": {
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "ClientAuthenticationOpenApi": {
        "discriminator": {
          "mapping": {
            "JWT_JWKS": "#/components/schemas/JwtJwksAuthenticationOpenApi",
            "JWT_OIDC": "#/components/schemas/JwtOidcAuthenticationOpenApi"
          },
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientAuthenticationRequestOpenApi": {
        "properties": {
          "clientAuthentication": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/JwtJwksAuthenticationOpenApi"
              },
              {
                "$ref": "#/components/schemas/JwtOidcAuthenticationOpenApi"
              }
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "CloudProvidersInformation": {
        "properties": {
          "aws": {
            "$ref": "#/components/schemas/AwsCloudProviderInformation"
          },
          "azure": {
            "$ref": "#/components/schemas/AzureCloudProviderInformation"
          },
          "google": {
            "$ref": "#/components/schemas/GoogleCloudProviderInformation"
          }
        },
        "type": "object"
      },
      "CompanyId": {
        "description": "The company ID",
        "format": "uuid",
        "readOnly": true,
        "type": "string"
      },
      "CompanyInformation": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "companyType": {
            "$ref": "#/components/schemas/CompanyType"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "domains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "productEntitlements": {
            "items": {
              "$ref": "#/components/schemas/ProductEntitlementInformation"
            },
            "type": "array"
          },
          "referralPartner": {
            "$ref": "#/components/schemas/ReferralPartner"
          },
          "urlPrefix": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "productEntitlements"
        ],
        "type": "object"
      },
      "CompanyType": {
        "enum": [
          "INTERNAL",
          "CA",
          "TPP_CUSTOMER",
          "REGULAR",
          "OTHER"
        ],
        "type": "string"
      },
      "Condition": {
        "description": "A Condition for filtering",
        "properties": {
          "field": {
            "description": "Represents a field for filtering",
            "example": "certificateName",
            "type": "string"
          },
          "operator": {
            "description": "An operator for filtering",
            "enum": [
              "EQ",
              "LT",
              "LTE",
              "GT",
              "GTE",
              "MATCH",
              "FIND",
              "IN"
            ],
            "example": "EQ",
            "type": "string"
          },
          "value": {
            "description": "represents a field's value",
            "example": "venafi.com",
            "type": "string"
          },
          "values": {
            "description": "represents a field's values",
            "example": [
              "venafi.com",
              "www.venafi.com"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ConfigurationCreateRequest": {
        "properties": {
          "clientAuthentication": {
            "$ref": "#/components/schemas/ClientAuthenticationInformation"
          },
          "cloudProviders": {
            "$ref": "#/components/schemas/CloudProvidersInformation"
          },
          "name": {
            "description": "Name of the configuration",
            "example": "Some configuration",
            "maxLength": 64,
            "type": "string"
          },
          "policyIds": {
            "description": "UUIDs of policies to associate with the new configuration",
            "example": "[8ae92800-b1e0-11ed-859d-b39255f965ee]",
            "format": "uuid",
            "items": {
              "description": "UUIDs of policies to associate with the new configuration",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "serviceAccountIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "subCaProviderId": {
            "description": "UUID of Sub CA provider to associate with the new configuration",
            "example": "2f3c6030-b1e0-11ed-a3ed-e3dbaf56a746",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "name",
          "policyIds",
          "subCaProviderId"
        ],
        "type": "object"
      },
      "ConfigurationDeleteResponse": {
        "properties": {
          "id": {
            "description": "UUID of the configuration",
            "example": "7268d820-a08d-11ed-bbc0-252385d6d389",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the configuration",
            "example": "Some configuration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigurationInformation": {
        "properties": {
          "clientAuthentication": {
            "$ref": "#/components/schemas/ClientAuthenticationInformation"
          },
          "cloudProviders": {
            "$ref": "#/components/schemas/CloudProvidersInformation"
          },
          "companyId": {
            "description": "UUID specific to your company",
            "example": "03eb6e61-9806-11ed-84f2-c747fb71e467",
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "description": "When the configuration was initially created",
            "example": "2022-10-10T14:50:41.710+00:00",
            "type": "string"
          },
          "id": {
            "description": "UUID of the configuration",
            "example": "7268d820-a08d-11ed-bbc0-252385d6d389",
            "format": "uuid",
            "type": "string"
          },
          "longLivedCertCount": {
            "description": "Number of long lived certificates",
            "example": 2,
            "format": "int64",
            "type": "integer"
          },
          "modificationDate": {
            "description": "When the configuration was last modified",
            "example": "2023-12-12T20:00:10.500+00:00",
            "type": "string"
          },
          "name": {
            "description": "Name of the configuration",
            "example": "Some configuration",
            "type": "string"
          },
          "serviceAccountIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "shortLivedCertCount": {
            "description": "Number of short lived certificates",
            "example": 20,
            "format": "int64",
            "type": "integer"
          },
          "ultraShortLivedCertCount": {
            "description": "Number of ultra short lived certificates",
            "example": 200,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ConfigurationResponse": {
        "properties": {
          "configurations": {
            "items": {
              "$ref": "#/components/schemas/ExtendedConfigurationInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ConfigurationUpdateRequest": {
        "properties": {
          "clientAuthentication": {
            "$ref": "#/components/schemas/ClientAuthenticationRequestOpenApi"
          },
          "cloudProviders": {
            "$ref": "#/components/schemas/CloudProvidersInformation"
          },
          "name": {
            "description": "Name of the configuration",
            "example": "Some configuration",
            "maxLength": 64,
            "type": "string"
          },
          "policyIds": {
            "description": "UUIDs of policies to associate with the configuration",
            "example": "[8ae92800-b1e0-11ed-859d-b39255f965ee]",
            "format": "uuid",
            "items": {
              "description": "UUIDs of policies to associate with the configuration",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "serviceAccountIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "subCaProviderId": {
            "description": "UUID of Sub CA provider to associate with the configuration",
            "example": "2f3c6030-b1e0-11ed-a3ed-e3dbaf56a746",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConnectorsCreationRequest": {
        "properties": {
          "name": {
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/WebhookProperties"
          }
        },
        "required": [
          "name",
          "properties"
        ],
        "type": "object"
      },
      "ConnectorsInformation": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/WebhookProperties"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "properties"
        ],
        "type": "object"
      },
      "ConnectorsResponse": {
        "properties": {
          "connectors": {
            "items": {
              "$ref": "#/components/schemas/ConnectorsInformation"
            },
            "type": "array"
          }
        },
        "required": [
          "connectors"
        ],
        "type": "object"
      },
      "ConnectorsUpdateRequest": {
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/WebhookProperties"
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "CreateCMSConfigurationRequest": {
        "description": "The information representing a Credential Manager Service configuration for creation purpose.",
        "properties": {
          "cmsDetails": {
            "$ref": "#/components/schemas/CreateCMSDetails"
          },
          "cmsType": {
            "$ref": "#/components/schemas/CMSType"
          },
          "vSatelliteIds": {
            "$ref": "#/components/schemas/VSatelliteIds"
          }
        },
        "required": [
          "cmsType",
          "vSatelliteIds",
          "cmsDetails"
        ],
        "type": "object"
      },
      "CreateCMSConfigurationsRequest": {
        "description": "The array of Credential Manager Service configurations to create.",
        "properties": {
          "cmsConfigurations": {
            "items": {
              "$ref": "#/components/schemas/CreateCMSConfigurationRequest"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "cmsConfigurations"
        ],
        "type": "object"
      },
      "CreateCMSConfigurationsResponse": {
        "description": "The array of Credential Manager Service configurations created.",
        "properties": {
          "cmsConfigurationsCreated": {
            "items": {
              "$ref": "#/components/schemas/CMSConfigurationResponse"
            },
            "minItems": 1,
            "type": "array"
          },
          "count": {
            "type": "integer"
          }
        },
        "required": [
          "cmsConfigurationsCreated",
          "count"
        ],
        "type": "object"
      },
      "CreateCMSDetails": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreateCyberArkDetails"
          }
        ]
      },
      "CreateCredentialDetails": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreateCyberArkCredDetails"
          }
        ]
      },
      "CreateCyberArkCredDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CyberArkDetailsRequiredProp"
          }
        ]
      },
      "CreateCyberArkDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CyberArkConfigurationRequiredProp"
          }
        ]
      },
      "CreateServiceAccountRequestBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceAccountBaseObject"
          },
          {
            "required": [
              "name",
              "scopes"
            ],
            "type": "object"
          }
        ],
        "example": {
          "applications": [
            "dc96438b-7a80-464b-a09b-9e5ec746c3e3",
            "5bce5ff4-a69b-4e78-9b7e-6d4029995000"
          ],
          "authenticationType": "rsaKey",
          "credentialLifetime": 30,
          "name": "Firefly SA",
          "owner": "2620f8e0-fdbf-11ee-b275-2754a4f7e272",
          "publicKey": "-----BEGIN PUBLIC KEY-----\\nMCowBQYDK2VwAyEAzRCyRWzXlyhFp3RcUrum1Q6j7YR8jyL0L1fWnh7zgt4=\\n-----END PUBLIC KEY-----",
          "scopes": [
            "distributed-issuance"
          ]
        }
      },
      "CreateServiceAccountResponseBody": {
        "example": {
          "id": "933507dd-0286-11ef-bc25-8a00a468403f",
          "privateKey": "-----BEGIN PRIVATE KEY-----\n⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆⋆\n-----END PRIVATE KEY-----\n",
          "publicKey": "-----BEGIN PUBLIC KEY-----\\nMCowBQYDK2VwAyEAzRCyRWzXlyhFp3RcUrum1Q6j7YR8jyL0L1fWnh7zgt4=\\n-----END PUBLIC KEY-----"
        },
        "properties": {
          "id": {
            "description": "The ID for this service account",
            "format": "UUID",
            "type": "string",
            "x-go-type": "uuid.UUID",
            "x-go-type-import": {
              "path": "github.com/google/uuid"
            }
          },
          "ociAccountName": {
            "description": "The OCI account name generated for a robot in case of the registry scope",
            "type": "string"
          },
          "ociRegistryToken": {
            "description": "The OCI registry token generated for a robot in case of the registry scope",
            "type": "string"
          },
          "privateKey": {
            "description": "The generated private key for the service account when not providing a public key on the create payload",
            "type": "string"
          },
          "publicKey": {
            "description": "The generated public key for the service account when not providing a public key on the create payload",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateTeamRequest": {
        "properties": {
          "members": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "name": {
            "type": "string"
          },
          "owners": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "role": {
            "$ref": "#/components/schemas/TeamRole"
          },
          "userMatchingRules": {
            "items": {
              "$ref": "#/components/schemas/UserMatchingRule"
            },
            "type": "array"
          }
        },
        "required": [
          "members",
          "name",
          "owners",
          "role"
        ],
        "type": "object"
      },
      "CreatedBy": {
        "description": "The ID of the user whom created the credential.",
        "type": "string"
      },
      "CreatedOn": {
        "description": "The date in ISO 8601 full-date format when the credential was created.",
        "format": "date",
        "type": "string"
      },
      "CredentialId": {
        "description": "The ID of the Credential in TLS Protect Cloud.",
        "example": "94e86140-d85f-11ed-afa1-0242ac120002",
        "format": "uuid",
        "type": "string"
      },
      "CredentialName": {
        "description": "The name of the Credential in TLS Protect Cloud.",
        "type": "string"
      },
      "CredentialResponse": {
        "description": "The properties representing a Credential for response purposes.",
        "properties": {
          "authType": {
            "$ref": "#/components/schemas/AuthType"
          },
          "cmsConfigId": {
            "$ref": "#/components/schemas/CMSConfId"
          },
          "cmsType": {
            "$ref": "#/components/schemas/CMSType"
          },
          "createdBy": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "createdOn": {
            "$ref": "#/components/schemas/CreatedOn"
          },
          "credentialDetails": {
            "$ref": "#/components/schemas/ResponseCredentialDetails"
          },
          "id": {
            "$ref": "#/components/schemas/CredentialId"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/LastModifiedBy"
          },
          "lastModifiedOn": {
            "$ref": "#/components/schemas/LastModifiedOn"
          },
          "name": {
            "$ref": "#/components/schemas/CredentialName"
          },
          "references": {
            "$ref": "#/components/schemas/References"
          },
          "teamsIds": {
            "$ref": "#/components/schemas/TeamsIds"
          }
        },
        "required": [
          "id",
          "name",
          "authType",
          "cmsType"
        ],
        "type": "object"
      },
      "CustomAttributes1": {
        "description": "A certificate request custom attributes",
        "example": {
          "dnsNames": [
            "www.venafi.com",
            "venafi.com"
          ]
        },
        "properties": {
          "dnsNames": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "overwriteSans": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CustomAttributes2": {
        "description": "Certificate request custom attributes",
        "example": {
          "dnsNames": [
            "www.venafi.com",
            "venafi.com"
          ]
        },
        "properties": {
          "dnsNames": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "overwriteSans": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CustomAttributesInformation": {
        "description": "Represents custom attributes for certificate requests",
        "example": "        {\n            \"dnsNames\": [venafi.com, venafi.eu],\n            \"overwriteSans\": true,\n        }\n",
        "properties": {
          "dnsNames": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "overwriteSans": {
            "description": "Defines if the csr sans should be overwritten by the custom attributes dns sans",
            "type": "boolean"
          }
        },
        "required": [
          "dnsNames"
        ],
        "type": "object"
      },
      "CyberArkConfiguration": {
        "allOf": [
          {
            "properties": {
              "appID": {
                "$ref": "#/components/schemas/AppId"
              },
              "baseUrl": {
                "$ref": "#/components/schemas/CMSURL"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/CertificateCredentialData"
          }
        ],
        "description": "The configuration for the CyberArk app. It's required to set the value for the `cmsType` property to `cyberark`."
      },
      "CyberArkConfigurationRequiredProp": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CyberArkConfiguration"
          }
        ],
        "description": "The configuration for the CyberArk app. It's required to set the value for the `cmsType` property to `cyberark`.",
        "required": [
          "appID",
          "baseUrl"
        ]
      },
      "CyberArkDetails": {
        "description": "The CyberArk Credential information.",
        "properties": {
          "folder": {
            "description": "The folder property into the CyberArk Safe.",
            "type": "string"
          },
          "objectName": {
            "description": "The account's name which represents the credential in the CyberArk instance.",
            "type": "string"
          },
          "safe": {
            "description": "The CyberArk Safe property.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CyberArkDetailsRequiredProp": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CyberArkDetails"
          }
        ],
        "required": [
          "objectName",
          "safe"
        ]
      },
      "DeleteCredentialsResponse": {
        "description": "The response for the delete credentials action.",
        "properties": {
          "count": {
            "type": "integer"
          },
          "idsCredentialsDeleted": {
            "items": {
              "$ref": "#/components/schemas/CredentialId"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "idsCredentialsDeleted",
          "count"
        ],
        "type": "object"
      },
      "Deployment": {
        "properties": {
          "executionTarget": {
            "default": "vsat",
            "description": "HELP",
            "type": "string"
          },
          "image": {
            "description": "URL for where the plugin image resides.",
            "type": "string"
          }
        },
        "required": [
          "image",
          "executionTarget"
        ],
        "title": "Deployment",
        "type": "object",
        "x-examples": {
          "Example 1": {
            "deployment": {
              "executionTarget": "vsat",
              "image": "public.ecr.aws/docker/library/nginx:mainline-alpine3.18-slim"
            }
          }
        }
      },
      "Details": {
        "properties": {
          "credentialsExpiringOn": {
            "description": "The exact date on which the credentials will expire",
            "format": "date-time",
            "type": "string"
          },
          "enabled": {
            "description": "Indicates if the given service account must be enabled or disabled where disable means that the credentials cannot be used for",
            "type": "boolean"
          },
          "id": {
            "description": "The ID for this service account",
            "format": "UUID",
            "type": "string",
            "x-go-type": "uuid.UUID",
            "x-go-type-import": {
              "path": "github.com/google/uuid"
            }
          },
          "lastUsedOn": {
            "description": "The last time the account credentials were used to authenticate a machine",
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "description": "The UUID of the latest user that modified the account",
            "format": "UUID",
            "type": "string",
            "x-go-type": "uuid.UUID",
            "x-go-type-import": {
              "path": "github.com/google/uuid"
            }
          },
          "updatedOn": {
            "description": "The last time the account details were updated",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Direction": {
        "description": "An ordering direction",
        "enum": [
          "ASC",
          "DESC"
        ],
        "example": "DESC",
        "type": "string"
      },
      "EdgeInstanceConnectionDetails": {
        "properties": {
          "activeMessageCount": {
            "format": "int32",
            "type": "integer"
          },
          "edgeInstanceId": {
            "format": "uuid",
            "type": "string"
          },
          "expiredMessageCount": {
            "format": "int32",
            "type": "integer"
          },
          "failedMessageCount": {
            "format": "int32",
            "type": "integer"
          },
          "lastConnectedDate": {
            "format": "date-time",
            "type": "string"
          },
          "lastDisconnectedDate": {
            "format": "date-time",
            "type": "string"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EdgeInstanceHealthDetails": {
        "properties": {
          "edgeInstanceId": {
            "format": "uuid",
            "type": "string"
          },
          "installedCharts": {
            "items": {
              "$ref": "#/components/schemas/NamespaceChartDetails"
            },
            "type": "array"
          },
          "nodeStatus": {
            "items": {
              "$ref": "#/components/schemas/NodeStatusDetails"
            },
            "type": "array"
          },
          "systemstatus": {
            "items": {
              "$ref": "#/components/schemas/NamespaceStatusDetails"
            },
            "type": "array"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EdgeInstanceInformation": {
        "properties": {
          "address": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "deploymentDate": {
            "format": "date-time",
            "type": "string"
          },
          "edgeStatus": {
            "$ref": "#/components/schemas/EdgeStatus"
          },
          "edgeType": {
            "$ref": "#/components/schemas/EdgeType"
          },
          "encryptionKeyDeploymentDate": {
            "format": "date-time",
            "type": "string"
          },
          "encryptionKeyId": {
            "type": "string"
          },
          "environmentId": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "integrationServicesCount": {
            "format": "int64",
            "type": "integer"
          },
          "kubernetesVersion": {
            "type": "string"
          },
          "lastSeenOnDate": {
            "format": "date-time",
            "type": "string"
          },
          "modificationDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pairingCodeId": {
            "format": "uuid",
            "type": "string"
          },
          "productEntitlements": {
            "items": {
              "$ref": "#/components/schemas/ProductEntitlement"
            },
            "type": "array"
          },
          "reconciliationFailed": {
            "type": "boolean"
          },
          "statusDetails": {
            "$ref": "#/components/schemas/EdgeInstanceStatusDetailsInformation"
          },
          "version": {
            "format": "int32",
            "type": "integer"
          },
          "workerStatusDetails": {
            "items": {
              "$ref": "#/components/schemas/EdgeWorkerStatusDetailsInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EdgeInstanceResponse": {
        "properties": {
          "edgeInstances": {
            "items": {
              "$ref": "#/components/schemas/EdgeInstanceInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EdgeInstanceStatusDetailsInformation": {
        "properties": {
          "connectionDetails": {
            "items": {
              "$ref": "#/components/schemas/EdgeInstanceConnectionDetails"
            },
            "type": "array"
          },
          "healthDetails": {
            "items": {
              "$ref": "#/components/schemas/EdgeInstanceHealthDetails"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EdgeStatus": {
        "enum": [
          "ACTIVE",
          "LOST_CONNECTION",
          "REGISTERED",
          "PAIRED",
          "LOST_CONNECTION_DURING_INSTALL",
          "INSTALLED",
          "INSTALL_FAILED",
          "UNHEALTHY",
          "ERROR",
          "INSTALLING"
        ],
        "type": "string"
      },
      "EdgeType": {
        "enum": [
          "ALL",
          "HUB",
          "SATELLITE"
        ],
        "type": "string"
      },
      "EdgeWorkerHealthDetails": {
        "properties": {
          "age": {
            "format": "int64",
            "type": "integer"
          },
          "cpuUsage": {
            "format": "int32",
            "type": "integer"
          },
          "edgeInstanceId": {
            "format": "uuid",
            "type": "string"
          },
          "edgeWorkerId": {
            "format": "uuid",
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "memoryUsage": {
            "format": "int64",
            "type": "integer"
          },
          "port": {
            "format": "int32",
            "type": "integer"
          },
          "services": {
            "items": {
              "$ref": "#/components/schemas/WorkerServiceStatusDetails"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EdgeWorkerStatusDetailsInformation": {
        "properties": {
          "edgeWorkerId": {
            "format": "uuid",
            "type": "string"
          },
          "healthDetails": {
            "items": {
              "$ref": "#/components/schemas/EdgeWorkerHealthDetails"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EncryptionKeyInformation": {
        "properties": {
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "keyAlgorithm": {
            "$ref": "#/components/schemas/KeyAlgorithm"
          },
          "lastBackupDate": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EncryptionKeysResponse": {
        "properties": {
          "encryptionKeys": {
            "items": {
              "$ref": "#/components/schemas/EncryptionKeyInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EntityTag": {
        "properties": {
          "value": {
            "type": "string"
          },
          "weak": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Error": {
        "description": "Hold the error details.",
        "properties": {
          "args": {
            "description": "List of arguments used to generate the error message.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "code": {
            "description": "The error code.",
            "type": "integer"
          },
          "message": {
            "description": "The error message.",
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "ErrorInformation": {
        "properties": {
          "args": {
            "items": {
              "$ref": "#/components/schemas/AnyValue"
            },
            "type": "array"
          },
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorResponse1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ErrorInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ErrorResponse2": {
        "description": "Holds the response body returned for errors.",
        "properties": {
          "errors": {
            "description": "List of encountered errors.",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ExportedActivityLogEntryInformation": {
        "properties": {
          "activityDate": {
            "description": "The date when a log entry was produced",
            "example": "2023-01-24T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "activityName": {
            "description": "An activity name",
            "example": "Login Succeeded",
            "type": "string"
          },
          "activityType": {
            "description": "An activity type",
            "example": "Authentication",
            "type": "string"
          },
          "criticality": {
            "description": "An activity criticality",
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "description": "UUID of a log entry",
            "example": "2eb29780-9046-11ed-8e50-b994b27d2ece",
            "format": "uuid",
            "type": "string"
          },
          "message": {
            "description": "An activity log message",
            "example": "user logged in",
            "type": "string"
          },
          "payload": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Expression": {
        "type": "object"
      },
      "ExtendedApplicationOwnership": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "owningTeams": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "owningUsers": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExtendedCertificateInformation": {
        "properties": {
          "applicationIds": {
            "description": "A collection of application IDs",
            "example": [
              "561baf7c-98b7-49af-ab9c-7b3a9fea3028",
              "4adeba6f-0c94-4595-a5b6-babea458249f"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "archivedDate": {
            "description": "The date a certificate was archived",
            "example": "2022-05-24T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "authorityKeyIdentifierHash": {
            "description": "An authority key identifier hash",
            "example": "40572B10F85DDAF18BFF987372178532AB875BCA",
            "type": "string"
          },
          "certificateAuthorityAccountId": {
            "description": "UUID  of a certificate authority account",
            "format": "uuid",
            "type": "string"
          },
          "certificateName": {
            "description": "A certificate name",
            "example": "venafi.com",
            "type": "string"
          },
          "certificateRequestId": {
            "description": "UUID  of a certificate request",
            "example": "2e8964a0-9046-11ed-8e50-b994b27d2ece",
            "format": "uuid",
            "type": "string"
          },
          "certificateStatus": {
            "description": "Certificate's status",
            "enum": [
              "ACTIVE",
              "RETIRED",
              "DELETED"
            ],
            "example": "ACTIVE",
            "type": "string"
          },
          "companyId": {
            "description": "UUID  of a company",
            "example": "85595df0-8e14-11ed-87e3-755db050f29d",
            "format": "uuid",
            "type": "string"
          },
          "dekHash": {
            "description": "A certificate dek hash",
            "example": "RaBDrLmQ69hACXOrPU6542RBT-M-yZOkw4XKsT-r55i=",
            "type": "string"
          },
          "encryptionType": {
            "description": "A certificate encryption type",
            "enum": [
              "RSA",
              "DSA",
              "EC",
              "GOST3410",
              "ECGOST3410",
              "RESERVED3",
              "UNKNOWN"
            ],
            "example": "EC",
            "type": "string"
          },
          "extendedKeyUsage": {
            "description": "A collection of certificate extended key usages",
            "example": [
              "1.3.6.1.5.5.7.3.2",
              "1.3.6.1.5.5.7.3.1"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fingerprint": {
            "description": "A certificate fingerprint",
            "example": "6D4C95512C117B004191F1A096ECAD13242FCD9F",
            "type": "string"
          },
          "id": {
            "description": "UUID of a certificate",
            "example": "2eb29780-9046-11ed-8e50-b994b27d2ece",
            "format": "uuid",
            "type": "string"
          },
          "inhibitAnyPolicy": {
            "description": "Inhibit any policy",
            "example": 150,
            "format": "int32",
            "type": "integer"
          },
          "inhibitPolicyMapping": {
            "description": "Inhibit policy mapping",
            "example": 200,
            "format": "int32",
            "type": "integer"
          },
          "instances": {
            "description": "A collection of certificate instances information",
            "example": [
              {
                "certificateId": "7ec12010-9051-11ed-8e50-b994b27d2ece",
                "certificateInstanceId": "7ec1bc50-9051-11ed-8e50-b994b27d2ece",
                "certificateSource": "USER_SCAN",
                "deploymentStatus": "IN_USE",
                "hostname": "venafi.com",
                "instanceChainValidationStatus": [
                  "OK"
                ],
                "ipAddress": "23.185.0.2",
                "lastScanDate": "2023-01-09T19:12:05.314+00:00",
                "lastValidatedAttempt": "2023-01-09T19:12:05.446+00:00",
                "modificationDate": "2023-01-09T19:12:14.865+00:00",
                "port": 443,
                "serviceIds": [
                  "1d61e9e0-9046-11ed-bf12-53a1b041cf25"
                ],
                "sslProtocols": [
                  "TLSv1.3",
                  "TLSv1.2"
                ],
                "sslValidationErrorArguments": [],
                "sslValidationStatus": "OK"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CertificateInstanceInformation"
            },
            "type": "array"
          },
          "issuerAlternativeNameDns": {
            "description": "A collection of certificate issuer alternative names DNs",
            "example": [
              "venafi.com",
              "www.venafi.com"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuerAlternativeNameNonDns": {
            "description": "A collection of certificate issuer alternative name none DNs",
            "example": [
              "venafi issuer doman"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuerC": {
            "description": "A certificate issues Country",
            "example": "US",
            "type": "string"
          },
          "issuerCN": {
            "description": "A collection of certificate issuer Common names",
            "example": [
              "HydrantID SSL CA G3"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuerCertificateIds": {
            "description": "A collection of issuer certificate IDs",
            "example": [
              "2e8964a0-9046-11ed-8e50-b994b27d2ece",
              "d5b418a0-297e-11eb-bc4c-8b24e5a66fb6"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "issuerCertificates": {
            "description": "A collection of certificate information",
            "items": {
              "$ref": "#/components/schemas/CertificateInformation"
            },
            "type": "array"
          },
          "issuerDN": {
            "description": "A certificate issue DN",
            "example": "cn=HydrantID SSL CA G3,o=HydrantID (Avalanche Cloud Corporation),c=US",
            "type": "string"
          },
          "issuerL": {
            "description": "A certificate issues Locality",
            "example": "Salt Lake City",
            "type": "string"
          },
          "issuerOU": {
            "description": "A collection of certificate issuer Organization units",
            "example": [
              "Issuer CA"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuerST": {
            "description": "A certificate issuer State",
            "example": "Utah",
            "type": "string"
          },
          "keyCurve": {
            "description": "A certificate key curve",
            "enum": [
              "P256",
              "P384",
              "P521",
              "ED25519",
              "UNKNOWN"
            ],
            "example": "P256",
            "type": "string"
          },
          "keyStrength": {
            "description": "A certificate key strength",
            "example": 2048,
            "format": "int32",
            "type": "integer"
          },
          "keyUsage": {
            "description": "A collection of certificate key usages",
            "example": [
              "digitalSignature",
              "keyEncipherment"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "lastNotification": {
            "format": "int32",
            "type": "integer"
          },
          "managedCertificateId": {
            "description": "UUID  of a managed certificate",
            "example": "2f0e7320-9046-11ed-8ab8-19e0a618d9cd",
            "format": "uuid",
            "type": "string"
          },
          "modificationDate": {
            "description": "The last date a certificate was modified",
            "example": "2022-03-24T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "ocspNoCheck": {
            "description": "If a certificate no ocsp check",
            "example": false,
            "type": "boolean"
          },
          "ownership": {
            "$ref": "#/components/schemas/CertificateOwnership"
          },
          "pathLength": {
            "description": "A certificate path length",
            "example": 3,
            "format": "int32",
            "type": "integer"
          },
          "requireExplicitPolicy": {
            "description": "Required explicit policy is required",
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "selfSigned": {
            "description": "If the certificate is self singed",
            "example": true,
            "type": "boolean"
          },
          "serialNumber": {
            "description": "A certificate serial number",
            "example": "0C51A562B02A19A222FFB4730C47A8E2",
            "type": "string"
          },
          "signatureAlgorithm": {
            "description": "A certificate signature algorithm",
            "enum": [
              "MD2_WITH_RSA_ENCRYPTION",
              "MD5_WITH_RSA_ENCRYPTION",
              "SHA1_WITH_RSA_ENCRYPTION",
              "SHA1_WITH_RSA_ENCRYPTION2",
              "SHA256_WITH_RSA_ENCRYPTION",
              "SHA384_WITH_RSA_ENCRYPTION",
              "SHA512_WITH_RSA_ENCRYPTION",
              "ID_DSA_WITH_SHA1",
              "dsaWithSHA1",
              "EC_DSA_WITH_SHA1",
              "EC_DSA_WITH_SHA224",
              "EC_DSA_WITH_SHA256",
              "EC_DSA_WITH_SHA384",
              "EC_DSA_WITH_SHA512",
              "UNKNOWN",
              "SHA1_WITH_RSAandMGF1",
              "GOST_R3411_94_WITH_GOST_R3410_2001",
              "GOST_R3411_94_WITH_GOST_R3410_94"
            ],
            "example": "SHA256_WITH_RSA_ENCRYPTION",
            "type": "string"
          },
          "signatureHashAlgorithm": {
            "description": "A certificate signature hash algorithm",
            "enum": [
              "MD5",
              "SHA1",
              "MD2",
              "SHA224",
              "SHA256",
              "SHA384",
              "SHA512",
              "UNKNOWN",
              "GOSTR3411_94"
            ],
            "example": "SHA256",
            "type": "string"
          },
          "statusModificationDate": {
            "description": "The date a certificate's status was modified",
            "example": "2022-04-24T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "statusModificationUserId": {
            "description": "UUID of the user that modified the certificate installation",
            "example": "3c9964a0-9046-11ed-8e50-b994b27d2ece",
            "format": "uuid",
            "type": "string"
          },
          "subjectAlternativeNameDns": {
            "description": "A collection of certificate subject alternative names DNs",
            "example": [
              "venafi.com",
              "www.venafi.com"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectAlternativeNameNonDns": {
            "description": "A collection of certificate subject alternative name none DNs",
            "example": [
              "venafi domain"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectAlternativeNamesByType": {
            "$ref": "#/components/schemas/GeneralNamesData2"
          },
          "subjectC": {
            "description": "A certificate subject Country",
            "example": "US",
            "type": "string"
          },
          "subjectCN": {
            "description": "A collection of certificate subject CNs",
            "example": [
              "venafi.com",
              "cloud.venafi"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectDN": {
            "description": "A certificate subject DN",
            "example": "cn=www.venafi.com,o=Venafi, Inc.,c=US,st=Utah,l=Salt Lake City",
            "type": "string"
          },
          "subjectKeyIdentifierHash": {
            "description": "A subject key identifier hash",
            "example": "4E0CE93D3240561F468C33A85F08FCD3B04CC9DC",
            "type": "string"
          },
          "subjectL": {
            "description": "A certificate subject Locality",
            "example": "Salt Lake City",
            "type": "string"
          },
          "subjectO": {
            "description": "A certificate subject Organization",
            "example": "Venafi, Inc.",
            "type": "string"
          },
          "subjectOU": {
            "description": "A collection of certificate subject Organization units",
            "example": [
              "devops",
              "test"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectST": {
            "description": "A certificate subject State",
            "example": "Utah",
            "type": "string"
          },
          "tags": {
            "description": "A collection of tags",
            "example": [
              "owner:test.user",
              "90-day"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "totalActiveInstanceCount": {
            "description": "total active instances of a certificate",
            "example": 50,
            "format": "int32",
            "type": "integer"
          },
          "totalInstanceCount": {
            "description": "total instances of a certificate",
            "example": 100,
            "format": "int32",
            "type": "integer"
          },
          "validityEnd": {
            "description": "The date a certificate validity ends",
            "example": "2023-01-24T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "validityStart": {
            "description": "The date a certificate validity starts",
            "example": "2022-01-24T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "versionType": {
            "description": "A certificate version type",
            "enum": [
              "OLD",
              "CURRENT"
            ],
            "example": "CURRENT",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExtendedCertificateInstanceInformation": {
        "properties": {
          "applicationIds": {
            "description": "A collection of application IDs",
            "example": [
              "d3cce873-6957-4071-a65e-7676c0ae1123",
              "322bcd99-286a-47ea-8dcd-8291ec5bff14"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateInformation"
          },
          "certificateId": {
            "description": "UUID of a certificate",
            "example": "2eb29780-9046-11ed-8e50-b994b27d2ece",
            "format": "uuid",
            "type": "string"
          },
          "certificateInstanceId": {
            "description": "UUID of a certificate instance",
            "example": "f68daf30-4690-45bc-85b3-bb327024735e",
            "format": "uuid",
            "type": "string"
          },
          "certificateSource": {
            "description": "Certificate source",
            "enum": [
              "UNKNOWN",
              "USER_PROVIDED",
              "USER_IMPORTED",
              "USER_SCAN",
              "TRUSTNET_SCAN",
              "ON_PREM_CA_IMPORT",
              "EXTERNAL_CA_IMPORT",
              "FILE_IMPORT",
              "EXTERNAL_SCAN",
              "DOMAIN_SCAN",
              "SMART_SCAN_INTERNAL",
              "SMART_SCAN_EXTERNAL",
              "SMART_VALIDATION_INTERNAL",
              "SMART_VALIDATION_EXTERNAL",
              "MACHINE_DISCOVERY",
              "KUBERNETES_DISCOVERY",
              "AWS_DISCOVERY",
              "AZURE_DISCOVERY",
              "GCP_DISCOVERY"
            ],
            "example": "USER_SCAN",
            "type": "string"
          },
          "deploymentStatus": {
            "description": "The deployment status",
            "enum": [
              "UNKNOWN",
              "IN_USE",
              "SUPERSEDED"
            ],
            "example": "IN_USE",
            "type": "string"
          },
          "hostname": {
            "description": "A hostname",
            "example": "venafi.com",
            "type": "string"
          },
          "instanceChainValidationStatus": {
            "description": "A collection of the instance chain validation status",
            "example": [
              "OK"
            ],
            "items": {
              "enum": [
                "OK",
                "CHAIN_BUILDING_FAILED",
                "INCOMPLETE_CHAIN",
                "CHAIN_EXPIRE_BEFORE_EE",
                "DISTRUSTED",
                "UNKNOWN_ERROR",
                "SELF_SIGNED"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "ipAddress": {
            "description": "An ip address",
            "example": "14.183.1.32",
            "type": "string"
          },
          "lastScanDate": {
            "description": "The last scan date",
            "example": "2023-01-10T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "lastValidatedAttempt": {
            "description": "The last validation attempt date",
            "example": "2023-01-11T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "modificationDate": {
            "description": "The last modification date",
            "example": "2023-01-10T09:12:28Z",
            "format": "date-time",
            "type": "string"
          },
          "port": {
            "description": "A port number",
            "example": 443,
            "format": "int32",
            "type": "integer"
          },
          "serviceIds": {
            "description": "A collection of service IDs",
            "example": [
              "1d61e9e0-9046-11ed-bf12-53a1b041cf2"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "sslProtocols": {
            "description": "A collection of ssl protocols",
            "example": [
              "TLSv1.1",
              "TLSv1.2"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sslValidationErrorArguments": {
            "description": "A collection of ssl validation error arguments",
            "example": [
              "B69950CC5F51EDDF55F36AD2BC898767BC43CC2A",
              "24E5796GA7298E78EDE47D6FAED0790E8F464G54"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sslValidationStatus": {
            "description": "SSL validation status",
            "enum": [
              "HOSTNAME_NOT_RESOLVABLE",
              "NO_CERTIFICATE_PRESENTED",
              "INVALID_CERTIFICATE_FOUND",
              "UNEXPECTED_CERTIFICATE_FOUND",
              "OLD_VERSION_CERTIFICATE_FOUND",
              "TARGET_UNREACHABLE",
              "UNKNOWN_ERROR",
              "OK"
            ],
            "example": "OK",
            "type": "string"
          },
          "sslValidationStatusMessage": {
            "description": "SSL validation status message",
            "example": "Certificate installation is using older versions of certificate",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExtendedCertificateInstanceResponse": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/ExtendedCertificateInstanceInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ExtendedConfigurationInformation": {
        "properties": {
          "clientAuthentication": {
            "$ref": "#/components/schemas/ClientAuthenticationInformation"
          },
          "cloudProviders": {
            "$ref": "#/components/schemas/CloudProvidersInformation"
          },
          "companyId": {
            "description": "UUID specific to your company",
            "example": "03eb6e61-9806-11ed-84f2-c747fb71e467",
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "description": "When the configuration was initially created",
            "example": "2022-10-10T14:50:41.710+00:00",
            "type": "string"
          },
          "id": {
            "description": "UUID of the configuration",
            "example": "7268d820-a08d-11ed-bbc0-252385d6d389",
            "format": "uuid",
            "type": "string"
          },
          "longLivedCertCount": {
            "description": "Number of long lived certificates",
            "example": 2,
            "format": "int64",
            "type": "integer"
          },
          "modificationDate": {
            "description": "When the configuration was last modified",
            "example": "2023-12-12T20:00:10.500+00:00",
            "type": "string"
          },
          "name": {
            "description": "Name of the configuration",
            "example": "Some configuration",
            "type": "string"
          },
          "policies": {
            "items": {
              "$ref": "#/components/schemas/PolicyInformation"
            },
            "type": "array"
          },
          "serviceAccountIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "shortLivedCertCount": {
            "description": "Number of short lived certificates",
            "example": 20,
            "format": "int64",
            "type": "integer"
          },
          "subCaProvider": {
            "$ref": "#/components/schemas/SubCaProviderInformation"
          },
          "ultraShortLivedCertCount": {
            "description": "Number of ultra short lived certificates",
            "example": 200,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ExtendedPolicyInformation": {
        "properties": {
          "companyId": {
            "description": "UUID specific to your company",
            "example": "03eb6e61-9806-11ed-84f2-c747fb71e467",
            "format": "uuid",
            "type": "string"
          },
          "configurations": {
            "items": {
              "$ref": "#/components/schemas/ConfigurationInformation"
            },
            "type": "array"
          },
          "creationDate": {
            "description": "When the policy was initially created",
            "example": "2022-10-10T14:50:41.710+00:00",
            "type": "string"
          },
          "extendedKeyUsages": {
            "description": "Extended key usages",
            "enum": [
              "ANY",
              "SERVER_AUTH",
              "CLIENT_AUTH",
              "CODE_SIGNING",
              "EMAIL_PROTECTION",
              "IPSEC_ENDSYSTEM",
              "IPSEC_TUNNEL",
              "IPSEC_USER",
              "TIME_STAMPING",
              "OCSP_SIGNING",
              "DVCS",
              "SBGP_CERT_AA_SERVER_AUTH",
              "SCVP_RESPONDER",
              "EAP_OVER_PPP",
              "EAP_OVER_LAN",
              "SCVP_SERVER",
              "SCVP_CLIENT",
              "IPSEC_IKE",
              "CAPWAP_AC",
              "CAPWAP_WTP",
              "IPSEC_IKE_INTERMEDIATE",
              "SMARTCARD_LOGON"
            ],
            "example": "[\"CLIENT_AUTH\",\"SERVER_AUTH\"]",
            "type": "string"
          },
          "id": {
            "description": "UUID of the policy",
            "example": "8ae92800-b1e0-11ed-859d-b39255f965ee",
            "format": "uuid",
            "type": "string"
          },
          "keyAlgorithm": {
            "$ref": "#/components/schemas/KeyAlgorithmInformation"
          },
          "keyUsages": {
            "description": "Key usages",
            "enum": [
              "digitalSignature",
              "nonRepudiation",
              "keyEncipherment",
              "dataEncipherment",
              "keyAgreement",
              "keyCertSign",
              "cRLSign",
              "encipherOnly",
              "decipherOnly"
            ],
            "example": "[\"keyEncipherment\",\"digitalSignature\"]",
            "type": "string"
          },
          "modificationDate": {
            "description": "When the policy was last modified",
            "example": "2023-12-12T20:00:10.500+00:00",
            "type": "string"
          },
          "name": {
            "description": "Name of the policy",
            "example": "Some policy",
            "type": "string"
          },
          "sans": {
            "$ref": "#/components/schemas/SansInformation"
          },
          "subject": {
            "$ref": "#/components/schemas/SubjectAttributesInformation"
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "P30D",
            "format": "PnYnMnDTnHnMnS",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Facet": {
        "properties": {
          "domain": {
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyValue"
            },
            "type": "object"
          },
          "facets": {
            "items": {
              "$ref": "#/components/schemas/Facet"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Filter1": {
        "format": "json",
        "type": "string"
      },
      "Filter2": {
        "properties": {
          "expression": {
            "$ref": "#/components/schemas/BaseFilter"
          },
          "ordering": {
            "$ref": "#/components/schemas/BaseOrdering"
          },
          "paging": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "type": "object"
      },
      "FilterOperand": {
        "properties": {
          "operand": {
            "$ref": "#/components/schemas/Condition"
          },
          "operator": {
            "description": "An operator for filtering",
            "enum": [
              "NOT"
            ],
            "example": "NOT",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FilterOperands": {
        "properties": {
          "operands": {
            "description": "A list of conditions that will be used for filtering",
            "example": [
              {
                "field": "certificateStatus",
                "operator": "EQ",
                "value": "ACTIVE"
              },
              {
                "field": "certificateName",
                "operator": "EQ",
                "value": "venafi.com"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/BaseFilter"
            },
            "type": "array"
          },
          "operator": {
            "description": "An operator for filtering",
            "enum": [
              "AND",
              "OR"
            ],
            "example": "OR",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeneralNamesData1": {
        "description": "A certificate request subject alternative name (SAN) type",
        "example": {
          "dNSName": [
            "www.venafi.com",
            "venafi.com"
          ]
        },
        "properties": {
          "dNSName": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "directoryName": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ediPartyName": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "iPAddress": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "otherName": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "registeredID": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rfc822Name": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uniformResourceIdentifier": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x400Address": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GeneralNamesData2": {
        "description": "A certificate subject alternative name by type",
        "example": {
          "dNSName": [
            "www.venafi.com",
            "venafi.com"
          ]
        },
        "properties": {
          "dNSName": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "directoryName": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ediPartyName": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "iPAddress": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "otherName": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "registeredID": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rfc822Name": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uniformResourceIdentifier": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x400Address": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetCMSConfigurationsResponse": {
        "description": "The array of Credential Manager Service configurations received.",
        "properties": {
          "cmsConfigurations": {
            "items": {
              "$ref": "#/components/schemas/CMSConfigurationResponse"
            },
            "minItems": 1,
            "type": "array"
          },
          "count": {
            "type": "integer"
          }
        },
        "required": [
          "cmsConfigurations",
          "count"
        ],
        "type": "object"
      },
      "GetCredentialsResponse": {
        "description": "Array of credentials received.",
        "properties": {
          "count": {
            "type": "integer"
          },
          "credentials": {
            "items": {
              "$ref": "#/components/schemas/CredentialResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "credentials",
          "count"
        ],
        "type": "object"
      },
      "GetServiceAccountScopesResponseBody": {
        "example": [
          {
            "authenticationType": "rsaKey",
            "id": "distributed-issuance",
            "readableName": "Distributed Issuance"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/ScopeDetails"
        },
        "type": "array"
      },
      "GetServiceAccountsByClientIDResponseBody": {
        "$ref": "#/components/schemas/ServiceAccountDetails"
      },
      "GetServiceAccountsResponseBody": {
        "example": [
          {
            "authenticationType": "rsaKey",
            "companyId": "145f12e0-fdbf-11ee-b275-2754a4f7e272",
            "credentialLifetime": 365,
            "credentialsExpiringOn": "2025-01-01T00:00:00.000000Z",
            "enabled": true,
            "id": "933507dd-0286-11ef-bc25-8a00a468403f",
            "name": "Service Account I",
            "owner": "2620f8e0-fdbf-11ee-b275-2754a4f7e272",
            "scopes": [
              "distributed-issuance"
            ],
            "updatedBy": "150760d0-fdbf-11ee-b275-2754a4f7e272",
            "updatedOn": "2024-01-01T00:00:00.000000Z"
          },
          {
            "authenticationType": "rsaKey",
            "companyId": "145f12e0-fdbf-11ee-b275-2754a4f7e272",
            "credentialLifetime": 365,
            "credentialsExpiringOn": "2025-01-01T00:00:00.000000Z",
            "enabled": true,
            "id": "933507dd-0286-11ef-bc25-8a00a468403a",
            "name": "Service Account II",
            "owner": "2620f8e0-fdbf-11ee-b275-2754a4f7e272",
            "scopes": [
              "distributed-issuance"
            ],
            "updatedBy": "150760d0-fdbf-11ee-b275-2754a4f7e272",
            "updatedOn": "2024-01-01T00:00:00.000000Z"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/ServiceAccountDetailsNoKey"
        },
        "type": "array"
      },
      "GoogleCloudProviderInformation": {
        "properties": {
          "projectIdentifiers": {
            "description": "Array of Google project identifiers each of which should be a string with int64 number or 6 to 30 lowercase letters, digits, or hyphens, should start with a letter and not contain trailing hyphens",
            "example": "415104041262 or tokyo-rain-123",
            "items": {
              "description": "Array of Google project identifiers each of which should be a string with int64 number or 6 to 30 lowercase letters, digits, or hyphens, should start with a letter and not contain trailing hyphens",
              "example": "415104041262 or tokyo-rain-123",
              "type": "string"
            },
            "type": "array"
          },
          "regions": {
            "description": "Array of Google regions",
            "example": "us-west1-a",
            "items": {
              "description": "Array of Google regions",
              "enum": [
                "asia-east1",
                "asia-east2",
                "asia-northeast1",
                "asia-northeast2",
                "asia-northeast3",
                "asia-south1",
                "asia-south2",
                "asia-southeast1",
                "asia-southeast2",
                "australia-southeast1",
                "australia-southeast2",
                "europe-central2",
                "europe-north1",
                "europe-southwest1",
                "europe-west1",
                "europe-west12",
                "europe-west2",
                "europe-west3",
                "europe-west4",
                "europe-west6",
                "europe-west8",
                "europe-west9",
                "me-central1",
                "me-west1",
                "northamerica-northeast1",
                "northamerica-northeast2",
                "southamerica-east1",
                "southamerica-west1",
                "us-central1",
                "us-east1",
                "us-east4",
                "us-east5",
                "us-south1",
                "us-west1",
                "us-west2",
                "us-west3",
                "us-west4"
              ],
              "example": "us-west1-a",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "projectIdentifiers",
          "regions"
        ],
        "type": "object"
      },
      "ImportedCertificateInformation": {
        "properties": {
          "apiClientInformation": {
            "$ref": "#/components/schemas/ApiClientInformation"
          },
          "base64Certificate": {
            "description": "Certificate base64 encoded format (PEM without header/footer",
            "type": "string"
          },
          "certificateSource": {
            "description": "A certificate source",
            "enum": [
              "UNKNOWN",
              "USER_PROVIDED",
              "USER_IMPORTED",
              "USER_SCAN",
              "TRUSTNET_SCAN",
              "ON_PREM_CA_IMPORT",
              "EXTERNAL_CA_IMPORT",
              "FILE_IMPORT",
              "EXTERNAL_SCAN",
              "DOMAIN_SCAN",
              "SMART_SCAN_INTERNAL",
              "SMART_SCAN_EXTERNAL",
              "SMART_VALIDATION_INTERNAL",
              "SMART_VALIDATION_EXTERNAL",
              "MACHINE_DISCOVERY",
              "KUBERNETES_DISCOVERY",
              "AWS_DISCOVERY",
              "AZURE_DISCOVERY",
              "GCP_DISCOVERY"
            ],
            "example": "USER_PROVIDED",
            "type": "string"
          },
          "certificateUsageMetadata": {
            "description": "A collection of certificate request metadata",
            "example": [
              {
                "appName": "venafi app1",
                "automationMetadata": "automation data 008",
                "nodeName": "venafi node 007"
              },
              {
                "appName": "venafi app2",
                "automationMetadata": "automation data 0013",
                "nodeName": "venafi node 005"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CertificateUsageMetadata"
            },
            "type": "array"
          },
          "companyId": {
            "description": "UUID of a company",
            "example": "2d558b30-da16-11ed-8e4f-8339a1bc8d58",
            "format": "uuid",
            "type": "string"
          },
          "fingerprint": {
            "description": "A certificate fingerprint",
            "example": "2C85B0AD64F55AA70BAC75F69711578DC505C3F9",
            "type": "string"
          },
          "id": {
            "description": "UUID of a Certificate",
            "example": "16cb6940-e2de-11ed-a644-4fab0ea00b60",
            "format": "uuid",
            "type": "string"
          },
          "issuerCertificateIds": {
            "description": "A collection of issuer certificates",
            "example": [
              "Venafi issuer",
              "QA Venafi issuer"
            ],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "managedCertificateId": {
            "description": "UUID of a managed certificate",
            "example": "17488880-e2de-11ed-aed6-79d407efea73",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntegrationServiceCreationRequest": {
        "properties": {
          "edgeInstancesIds": {
            "description": "A collection of Vsatellite instance IDs",
            "example": "[f196eb0-71cb-11ed-9749-93c174f3c18d, f196eb0-81av-11ed-9749-93c174f3c18d]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "environmentId": {
            "description": "UUID of an environment",
            "example": "2e8cfc70-74ce-11ed-9051-cfa579eae364",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Integration service name",
            "example": "Internet discovery",
            "type": "string"
          },
          "scheduleEnabled": {
            "description": "If a integration service is scheduled for execution",
            "example": true,
            "type": "boolean"
          },
          "schedulePattern": {
            "$ref": "#/components/schemas/SchedulerPatternInformation"
          },
          "serviceType": {
            "description": "The type of an integration service",
            "enum": [
              "BASIC_DISCOVERY",
              "ENHANCED_DISCOVERY",
              "EXTERNAL_SCAN",
              "INTERNET_DISCOVERY",
              "SMART_DISCOVERY_EXTERNAL",
              "KEY_GENERATION",
              "MSCA",
              "ACME"
            ],
            "example": "ENHANCED_DISCOVERY",
            "type": "string"
          },
          "targets": {
            "$ref": "#/components/schemas/TargetsInformation"
          },
          "workTypes": {
            "description": "A collection of work types",
            "example": "DISCOVER",
            "items": {
              "enum": [
                "DISCOVER",
                "MANAGE"
              ],
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "environmentId",
          "name",
          "serviceType",
          "workTypes"
        ],
        "type": "object"
      },
      "IntegrationServiceDetailsResponse": {
        "properties": {
          "integrationsServices": {
            "items": {
              "$ref": "#/components/schemas/IntegrationServiceInformation"
            },
            "type": "array"
          },
          "totalCount": {
            "description": "The total number of integration services returned",
            "example": 10,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "IntegrationServiceInformation": {
        "properties": {
          "companyId": {
            "description": "UUID of a company",
            "example": "2b391680-74ce-11ed-bf7a-a3d5ccdf275c",
            "format": "uuid",
            "type": "string"
          },
          "edgeInstancesIds": {
            "description": "A collection of Vsatellite instance IDs",
            "example": "[f196eb0-71cb-11ed-9749-93c174f3c18d, f196eb0-81av-11ed-9749-93c174f3c18d]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "encryptionKeyId": {
            "description": "Encryption key UUID",
            "example": "41bb5280-7193-11ed-a059-a7f274bd0b5b",
            "format": "uuid",
            "type": "string"
          },
          "environmentId": {
            "description": "UUID of an environment",
            "example": "2e8cfc70-74ce-11ed-9051-cfa579eae364",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "UUID of an integration service",
            "example": "2e8d71a0-74ce-11ed-9051-cfa579eae364",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Integration service name",
            "example": "Internet discovery",
            "type": "string"
          },
          "schedulePattern": {
            "$ref": "#/components/schemas/SchedulerPatternInformation"
          },
          "schedulerEnabled": {
            "description": "If a integration service is scheduled for execution",
            "example": true,
            "type": "boolean"
          },
          "serviceType": {
            "description": "The type of an integration service",
            "enum": [
              "BASIC_DISCOVERY",
              "ENHANCED_DISCOVERY",
              "EXTERNAL_SCAN",
              "INTERNET_DISCOVERY",
              "SMART_DISCOVERY_EXTERNAL",
              "KEY_GENERATION",
              "MSCA",
              "ACME"
            ],
            "example": "ENHANCED_DISCOVERY",
            "type": "string"
          },
          "status": {
            "description": "Integration service status",
            "enum": [
              "ACTIVE",
              "DISABLED",
              "RUNNING",
              "WARNING",
              "DRAFT",
              "ERROR"
            ],
            "example": "DISABLED",
            "type": "string"
          },
          "statusMessage": {
            "description": "Integration service status message",
            "example": "Integration service is disable",
            "type": "string"
          },
          "systemGenerated": {
            "description": "If an integration service was generated automatically",
            "example": true,
            "type": "boolean"
          },
          "targets": {
            "$ref": "#/components/schemas/TargetsInformation"
          },
          "workTypes": {
            "description": "A collection of work types",
            "example": "DISCOVER",
            "items": {
              "enum": [
                "DISCOVER",
                "MANAGE"
              ],
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "IntegrationServiceUpdateRequest": {
        "properties": {
          "edgeInstancesIds": {
            "description": "A collection of Vsatellite instance IDs",
            "example": "[f196eb0-71cb-11ed-9749-93c174f3c18d, f196eb0-81av-11ed-9749-93c174f3c18d]",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "name": {
            "description": "Integration service name",
            "example": "Internet discovery",
            "type": "string"
          },
          "scheduleEnabled": {
            "description": "If a integration service is scheduled for execution",
            "example": true,
            "type": "boolean"
          },
          "schedulePattern": {
            "$ref": "#/components/schemas/SchedulerPatternInformation"
          },
          "targets": {
            "$ref": "#/components/schemas/TargetsInformation"
          },
          "workTypes": {
            "description": "A collection of work types",
            "example": "DISCOVER",
            "items": {
              "enum": [
                "DISCOVER",
                "MANAGE"
              ],
              "type": "string"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "IntermediateCertificateInformation": {
        "properties": {
          "certificate": {
            "description": "Intermediate certificate bytes in PEM format",
            "format": "PEM",
            "type": "string"
          },
          "commonName": {
            "description": "Common name of the Intermediate certificate",
            "example": "example.com",
            "type": "string"
          },
          "companyId": {
            "description": "UUID specific to your company",
            "example": "03eb6e61-9806-11ed-84f2-c747fb71e467",
            "format": "uuid",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/ConfigurationInformation"
          },
          "creationDate": {
            "description": "When the intermediate certificate was created",
            "example": "2022-10-10T14:50:41.710+00:00",
            "type": "string"
          },
          "errorInformation": {
            "$ref": "#/components/schemas/ErrorInformation"
          },
          "fingerprint": {
            "description": "Intermediate certificate fingerprint",
            "type": "string"
          },
          "id": {
            "description": "UUID of the intermediate certificate",
            "example": "265f6d30-a0bb-11ed-aee0-89fe7e5f5d0c",
            "format": "uuid",
            "type": "string"
          },
          "issuerCertificates": {
            "description": "Intermediate certificate chain bytes in PEM format",
            "items": {
              "description": "Intermediate certificate chain bytes in PEM format",
              "type": "string"
            },
            "type": "array"
          },
          "longLivedCertCount": {
            "description": "Number of long lived certificates",
            "example": 1,
            "format": "int64",
            "type": "integer"
          },
          "modificationDate": {
            "description": "When the intermediate certificate was last modified",
            "example": "2023-12-12T20:00:10.500+00:00",
            "type": "string"
          },
          "shortLivedCertCount": {
            "description": "Number of short lived certificates",
            "example": 10,
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "description": "Status of the Intermediate certificate request",
            "example": "ISSUED",
            "type": "string"
          },
          "ultraShortLivedCertCount": {
            "description": "Number of ultra short lived certificates",
            "example": 100,
            "format": "int64",
            "type": "integer"
          },
          "validityEnd": {
            "description": "Intermediate certificate validity end date",
            "type": "string"
          },
          "validityStart": {
            "description": "Intermediate certificate validity start date",
            "type": "string"
          },
          "workflowId": {
            "description": "Intermediate certificate workflow id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntermediateCertificateResponse": {
        "properties": {
          "intermediateCertificates": {
            "items": {
              "$ref": "#/components/schemas/IntermediateCertificateInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InventoryMonitoringConfig": {
        "discriminator": {
          "mapping": {
            "CERTIFICATE_EXPIRATION": "#/components/schemas/CertificateExpirationInventoryMonitoringConfig"
          },
          "propertyName": "inventoryMonitoringConfigurationType"
        },
        "properties": {
          "inventoryMonitoringConfigurationType": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "InventoryMonitoringConfigRequest": {
        "properties": {
          "inventoryMonitoringConfiguration": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CertificateExpirationInventoryMonitoringConfig"
              }
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "InventoryMonitoringConfiguration": {
        "discriminator": {
          "propertyName": "inventoryMonitoringConfigurationType"
        },
        "properties": {
          "inventoryMonitoringConfigurationType": {
            "type": "string"
          }
        },
        "required": [
          "inventoryMonitoringConfigurationType"
        ],
        "type": "object"
      },
      "InventoryMonitoringConfigurationResponse": {
        "properties": {
          "companyId": {
            "description": "UUID specific to your company",
            "example": "2b391680-74ce-11ed-bf7a-a3d5ccdf275c",
            "format": "uuid",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/InventoryMonitoringConfiguration"
          },
          "id": {
            "description": "UUID of the configuration",
            "example": "2e8d71a0-74ce-11ed-9051-cfa579eae364",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InventoryMonitoringSchedulerInformation": {
        "properties": {
          "name": {
            "description": "Name of the configuration",
            "type": "string"
          },
          "status": {
            "description": "Status of the configuration",
            "enum": [
              "PENDING",
              "RUNNING",
              "DONE",
              "FAILED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "InvitationInformation": {
        "properties": {
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "productRoles": {
            "additionalProperties": {
              "items": {
                "enum": [
                  "SECURITY_ADMIN",
                  "DEVOPS_LEAD",
                  "DEVOPS_USER",
                  "OUTAGEDETECTION_ADMIN",
                  "RESOURCE_OWNER",
                  "PKI_ADMIN",
                  "GUEST",
                  "PLATFORM_ADMIN"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "type": "object"
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "userId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InvitationRequest": {
        "properties": {
          "role": {
            "enum": [
              "SECURITY_ADMIN",
              "DEVOPS_LEAD",
              "DEVOPS_USER",
              "OUTAGEDETECTION_ADMIN",
              "RESOURCE_OWNER",
              "PKI_ADMIN",
              "GUEST",
              "PLATFORM_ADMIN"
            ],
            "type": "string"
          }
        },
        "required": [
          "role"
        ],
        "type": "object"
      },
      "InvitationResponse": {
        "properties": {
          "invitations": {
            "items": {
              "$ref": "#/components/schemas/InvitationInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JwtJwksAuthenticationOpenApi": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClientAuthenticationOpenApi"
          },
          {
            "properties": {
              "urls": {
                "description": "Array JWT JWKS urls",
                "example": "[https://jwks.example.com]",
                "items": {
                  "description": "Array JWT JWKS urls",
                  "example": "[https://jwks.example.com]",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "JwtOidcAuthenticationOpenApi": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClientAuthenticationOpenApi"
          },
          {
            "properties": {
              "audience": {
                "description": "OpenId audience",
                "example": "Alpha testers",
                "type": "string"
              },
              "baseUrl": {
                "description": "JWT OpenId base URL",
                "example": "[https://oidc.example.com/]",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "KeyAlgorithm": {
        "enum": [
          "RSA",
          "ED25519"
        ],
        "type": "string"
      },
      "KeyAlgorithmInformation": {
        "description": "Key algorithm",
        "properties": {
          "allowedValues": {
            "description": "Key algorithm allowed values",
            "enum": [
              "RSA_2048",
              "RSA_3072",
              "RSA_4096",
              "EC_P256",
              "EC_P384",
              "EC_P521",
              "EC_ED25519"
            ],
            "type": "string"
          },
          "defaultValue": {
            "description": "Key algorithm default value",
            "enum": [
              "RSA_2048",
              "RSA_3072",
              "RSA_4096",
              "EC_P256",
              "EC_P384",
              "EC_P521",
              "EC_ED25519"
            ],
            "example": "RSA_4096",
            "type": "string"
          }
        },
        "required": [
          "allowedValues",
          "defaultValue"
        ],
        "type": "object"
      },
      "KeyTypeInformation": {
        "discriminator": {
          "propertyName": "keyType"
        },
        "properties": {
          "keyType": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "KeyTypeParameters1": {
        "properties": {
          "keyCurves": {
            "items": {
              "enum": [
                "P256",
                "P384",
                "P521",
                "ED25519",
                "UNKNOWN"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "keyLengths": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "keyType": {
            "enum": [
              "RSA",
              "EC"
            ],
            "type": "string"
          }
        },
        "required": [
          "keyType"
        ],
        "type": "object"
      },
      "KeyTypeParameters2": {
        "properties": {
          "keyCurve": {
            "enum": [
              "P256",
              "P384",
              "P521",
              "ED25519",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "keyLength": {
            "format": "int32",
            "type": "integer"
          },
          "keyType": {
            "enum": [
              "RSA",
              "EC"
            ],
            "type": "string"
          }
        },
        "required": [
          "keyCurve",
          "keyLength",
          "keyType"
        ],
        "type": "object"
      },
      "LastModifiedBy": {
        "description": "The ID of the user whom modified the credential.",
        "type": "string"
      },
      "LastModifiedOn": {
        "description": "The date in ISO 8601 full-date format when the credential was modified.",
        "format": "date",
        "type": "string"
      },
      "Link": {
        "properties": {
          "params": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "rel": {
            "type": "string"
          },
          "rels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uri": {
            "format": "uri",
            "type": "string"
          },
          "uriBuilder": {
            "$ref": "#/components/schemas/UriBuilder"
          }
        },
        "type": "object"
      },
      "LocalLoginRequest": {
        "properties": {
          "localLoginDisabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LocalizationResource": {
        "description": "Translation map for the UI being rendered. This map is used with the manifest schema. The keys represent the values provided for the \"x-localizationKey\" property in the domain entity definition, and each key's value is used to represent field labels, enum values, or error messages.",
        "nullable": true,
        "properties": {
          "en": {
            "type": "object"
          }
        },
        "title": "LocalizationResources",
        "type": "object",
        "x-examples": {
          "Example 1": {
            "en": {
              "address": {
                "label": "Server Hostname"
              },
              "binding": {
                "label": "Server Store Details"
              },
              "certificateName": {
                "description": "How the certificate should appear on the server.",
                "label": "Certificate Name"
              },
              "chainName": {
                "label": "Chain Bundle Name"
              },
              "discovery": {
                "expiredCertificatesLabel": "Exclude expired certificates",
                "inactiveProfilesLabel": "Exclude certificates that are not in use by either a virtual server or a monitor.",
                "partitionDescription": "A comma separated list of partition names.",
                "partitionLabel": "Partition(s)"
              },
              "discoveryType": {
                "all": "Both Monitors and Virtual Servers",
                "label": "Resource Types to Discover",
                "monitor": "Monitors",
                "virtualServer": "Virtual Servers"
              },
              "keystore": {
                "label": "Certificate Information"
              },
              "parentProfile": {
                "description": "No value is interpreted as \"clientssl\" or \"serverssl\" depending on the Profile Type selected.",
                "label": "Parent Profile"
              },
              "partition": {
                "description": "No value is interpreted as the \"Common\" partition.",
                "label": "Partition"
              },
              "password": {
                "hidePassword": "Hide Password",
                "label": "Password",
                "showPassword": "Show Password"
              },
              "port": {
                "description": "No value is interpreted as 443.",
                "label": "Port"
              },
              "serverName": {
                "description": "An alternative DNS name used for Server Name Indication.",
                "label": "SNI"
              },
              "sslProfile": {
                "label": "SSL Profile"
              },
              "sslProfileType": {
                "client": "Client SSL Profile",
                "label": "Profile Type",
                "server": "Server SSL Profile"
              },
              "username": {
                "label": "Username"
              }
            }
          }
        }
      },
      "MachineBatchProvisioningResultInformation": {
        "properties": {
          "endDate": {
            "format": "date-time",
            "type": "string"
          },
          "errorMessage": {
            "type": "string"
          },
          "machineIdentitiesCount": {
            "format": "int64",
            "type": "integer"
          },
          "machineIdentitiesFailedCount": {
            "format": "int64",
            "type": "integer"
          },
          "machineIdentitiesSucceedCount": {
            "format": "int64",
            "type": "integer"
          },
          "startDate": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "enum": [
              "MANUAL",
              "SCHEDULED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MachineCreationRequest": {
        "properties": {
          "connectionDetails": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "dekId": {
            "type": "string"
          },
          "edgeInstanceId": {
            "format": "uuid",
            "type": "string"
          },
          "machineTypeId": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owningTeamId": {
            "format": "uuid",
            "type": "string"
          },
          "pluginId": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "DRAFT",
              "VERIFIED",
              "UNVERIFIED",
              "DELETING"
            ],
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "connectionDetails",
          "dekId",
          "edgeInstanceId",
          "name",
          "owningTeamId",
          "pluginId"
        ],
        "type": "object"
      },
      "MachineDiscoveryResultInformation": {
        "properties": {
          "certificatesCountCurrent": {
            "format": "int64",
            "type": "integer"
          },
          "certificatesCountTotal": {
            "format": "int64",
            "type": "integer"
          },
          "discoveryStatus": {
            "enum": [
              "NEVER INITIATED",
              "INITIATED",
              "RUNNING",
              "COMPLETED",
              "ABORTED",
              "ABORTING",
              "FAILED"
            ],
            "type": "string"
          },
          "endDate": {
            "format": "date-time",
            "type": "string"
          },
          "errorCount": {
            "format": "int32",
            "type": "integer"
          },
          "machineIdentitiesCount": {
            "format": "int64",
            "type": "integer"
          },
          "machineIdentitiesDeletedCount": {
            "format": "int64",
            "type": "integer"
          },
          "machineIdentitiesMissingCount": {
            "format": "int64",
            "type": "integer"
          },
          "startDate": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MachineDocumentInformation": {
        "properties": {
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "integrationId": {
            "format": "uuid",
            "type": "string"
          },
          "machineIdentitiesCount": {
            "format": "int32",
            "type": "integer"
          },
          "machineName": {
            "type": "string"
          },
          "machineType": {
            "type": "string"
          },
          "machineTypeId": {
            "format": "uuid",
            "type": "string"
          },
          "modificationDate": {
            "format": "date-time",
            "type": "string"
          },
          "ownership": {
            "$ref": "#/components/schemas/MachineOwnership"
          },
          "owningTeam": {
            "format": "uuid",
            "type": "string"
          },
          "pluginId": {
            "format": "uuid",
            "type": "string"
          },
          "pluginName": {
            "type": "string"
          },
          "status": {
            "enum": [
              "DRAFT",
              "VERIFIED",
              "UNVERIFIED",
              "DELETING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MachineDocumentResponse": {
        "properties": {
          "machines": {
            "items": {
              "$ref": "#/components/schemas/MachineDocumentInformation"
            },
            "type": "array"
          },
          "totalCount": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MachineIdentityCreationRequest": {
        "properties": {
          "binding": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "certificateId": {
            "format": "uuid",
            "type": "string"
          },
          "keystore": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "machineId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "certificateId",
          "machineId"
        ],
        "type": "object"
      },
      "MachineIdentityDocumentInformation": {
        "properties": {
          "applicationIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "certificateFingerprint": {
            "type": "string"
          },
          "certificateId": {
            "format": "uuid",
            "type": "string"
          },
          "certificateName": {
            "type": "string"
          },
          "certificateValidityEnd": {
            "format": "date-time",
            "type": "string"
          },
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "lastSeenOn": {
            "format": "date-time",
            "type": "string"
          },
          "machineId": {
            "format": "uuid",
            "type": "string"
          },
          "machineName": {
            "type": "string"
          },
          "modificationDate": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "enum": [
              "NEW",
              "PENDING",
              "INSTALLED",
              "DISCOVERED",
              "VALIDATED",
              "MISSING",
              "FAILED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MachineIdentityDocumentResponse": {
        "properties": {
          "machineIdentities": {
            "items": {
              "$ref": "#/components/schemas/MachineIdentityDocumentInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MachineIdentityInformation": {
        "properties": {
          "binding": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "certificateId": {
            "format": "uuid",
            "type": "string"
          },
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "keystore": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "lastSeenOn": {
            "format": "date-time",
            "type": "string"
          },
          "machineId": {
            "format": "uuid",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "modificationDate": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "enum": [
              "NEW",
              "PENDING",
              "INSTALLED",
              "DISCOVERED",
              "VALIDATED",
              "MISSING",
              "FAILED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MachineIdentityResponse": {
        "properties": {
          "machineIdentities": {
            "items": {
              "$ref": "#/components/schemas/MachineIdentityInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MachineIdentitySearchRequest": {
        "properties": {
          "expression": {
            "$ref": "#/components/schemas/Expression"
          },
          "ordering": {
            "$ref": "#/components/schemas/Ordering"
          },
          "paging": {
            "$ref": "#/components/schemas/Paging"
          }
        },
        "type": "object"
      },
      "MachineIdentityUpdateRequest": {
        "properties": {
          "binding": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "certificateId": {
            "format": "uuid",
            "type": "string"
          },
          "keystore": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "status": {
            "enum": [
              "NEW",
              "PENDING",
              "INSTALLED",
              "DISCOVERED",
              "VALIDATED",
              "MISSING",
              "FAILED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MachineIdentityWorkflowInformation": {
        "properties": {
          "workflowId": {
            "type": "string"
          },
          "workflowName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MachineIdentityWorkflowRequest": {
        "properties": {
          "workflowInput": {
            "$ref": "#/components/schemas/ProvisionCertificateWorkflowInputInformation"
          },
          "workflowName": {
            "type": "string"
          }
        },
        "required": [
          "workflowName"
        ],
        "type": "object"
      },
      "MachineInformation": {
        "properties": {
          "batchProvisioningResult": {
            "$ref": "#/components/schemas/MachineBatchProvisioningResultInformation"
          },
          "batchProvisioningSchedulerEnabled": {
            "type": "boolean"
          },
          "batchProvisioningSchedulerPattern": {
            "$ref": "#/components/schemas/SchedulerPatternInformation"
          },
          "batchProvisioningStatus": {
            "enum": [
              "NEVER_INITIATED",
              "INITIATED",
              "RUNNING",
              "COMPLETED",
              "ABORTED",
              "ABORTING",
              "FAILED"
            ],
            "type": "string"
          },
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "discoveryJson": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "discoverySchedulerEnabled": {
            "type": "boolean"
          },
          "discoverySchedulerPattern": {
            "$ref": "#/components/schemas/SchedulerPatternInformation"
          },
          "discoveryStatus": {
            "enum": [
              "NEVER INITIATED",
              "INITIATED",
              "RUNNING",
              "COMPLETED",
              "ABORTED",
              "ABORTING",
              "FAILED"
            ],
            "type": "string"
          },
          "edgeInstanceId": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "integrationId": {
            "format": "uuid",
            "type": "string"
          },
          "machineType": {
            "type": "string"
          },
          "modificationDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owningTeamId": {
            "format": "uuid",
            "type": "string"
          },
          "pluginId": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "DRAFT",
              "VERIFIED",
              "UNVERIFIED",
              "DELETING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MachineOwnership": {
        "properties": {
          "owningTeams": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "MachineTypeInformation": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "machineType": {
            "type": "string"
          },
          "pluginId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MachineTypeResponse": {
        "properties": {
          "machineTypes": {
            "items": {
              "$ref": "#/components/schemas/MachineTypeInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MachineUpdateRequest": {
        "properties": {
          "batchProvisioningSchedulerEnabled": {
            "type": "boolean"
          },
          "batchProvisioningSchedulerPattern": {
            "$ref": "#/components/schemas/SchedulerPatternInformation"
          },
          "connectionDetails": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "discoveryJson": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "discoverySchedulerEnabled": {
            "type": "boolean"
          },
          "discoverySchedulerPattern": {
            "$ref": "#/components/schemas/SchedulerPatternInformation"
          },
          "edgeInstanceId": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owningTeamId": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "DRAFT",
              "VERIFIED",
              "UNVERIFIED",
              "DELETING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MachineWorkflowRequest": {
        "properties": {
          "workflowInput": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "workflowName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MachinesResponse": {
        "properties": {
          "machines": {
            "items": {
              "$ref": "#/components/schemas/MachineInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MachinesSearchRequest": {
        "properties": {
          "expression": {
            "$ref": "#/components/schemas/Expression"
          },
          "ordering": {
            "$ref": "#/components/schemas/Ordering"
          },
          "paging": {
            "$ref": "#/components/schemas/Paging"
          }
        },
        "type": "object"
      },
      "Manifest": {
        "properties": {
          "deployment": {
            "$ref": "#/components/schemas/Deployment"
          },
          "description": {
            "description": "Description text for the plugin.",
            "type": "string"
          },
          "domainSchema": {
            "type": "object"
          },
          "hooks": {
            "properties": {
              "mapping": {
                "type": "object"
              },
              "requestConverters": {
                "items": {

                },
                "nullable": true,
                "type": "array"
              }
            },
            "required": [
              "mapping"
            ],
            "type": "object"
          },
          "localizationResources": {
            "$ref": "#/components/schemas/LocalizationResource"
          },
          "name": {
            "description": "Name of the plugin.",
            "type": "string"
          },
          "pluginType": {
            "$ref": "#/components/schemas/PluginType"
          },
          "workTypes": {
            "description": "Defines the type of workflows supported for the plugin.",
            "items": {
              "$ref": "#/components/schemas/WorkType"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "name",
          "workTypes",
          "deployment",
          "domainSchema",
          "hooks"
        ],
        "title": "Manifest",
        "type": "object",
        "x-examples": {
          "Example 1": {
            "deployment": {
              "executionTarget": "vsat",
              "image": "public.ecr.aws/docker/library/nginx:mainline-alpine3.18-slim"
            },
            "description": "Description text.",
            "domainSchema": {
              "binding": {
                "properties": {
                  "parentProfile": {
                    "description": "parentProfile.description",
                    "type": "string",
                    "x-labelLocalizationKey": "parentProfile.label",
                    "x-rank": 1
                  },
                  "serverName": {
                    "description": "serverName.description",
                    "format": "hostname",
                    "type": "string",
                    "x-labelLocalizationKey": "serverName.label",
                    "x-rank": 3,
                    "x-rule": {
                      "condition": {
                        "type": "#/properties/sslProfileType"
                      },
                      "effect": "SHOW"
                    }
                  },
                  "sslProfile": {
                    "type": "string",
                    "x-labelLocalizationKey": "sslProfile.label",
                    "x-rank": 2
                  },
                  "sslProfileType": {
                    "oneOf": [
                      {
                        "const": "client",
                        "x-labelLocalizationKey": "sslProfileType.client"
                      },
                      {
                        "const": "server",
                        "x-labelLocalizationKey": "sslProfileType.server"
                      }
                    ],
                    "x-labelLocalizationKey": "sslProfileType.label",
                    "x-rank": 0
                  }
                },
                "required": [
                  "sslProfile",
                  "sslProfileType"
                ],
                "type": "object",
                "x-labelLocalizationKey": "binding.label",
                "x-primaryKey": [
                  "#/sslProfileType",
                  "#/sslProfile"
                ]
              },
              "certificateBundle": {
                "properties": {
                  "certificate": {
                    "contentEncoding": "base64",
                    "type": "string"
                  },
                  "certificateChain": {
                    "contentEncoding": "base64",
                    "type": "string"
                  },
                  "privateKey": {
                    "contentEncoding": "base64",
                    "type": "string",
                    "x-encrypted-base64": true
                  }
                },
                "required": [
                  "certificate",
                  "privateKey",
                  "certificateChain"
                ],
                "type": "object"
              },
              "connection": {
                "properties": {
                  "hostnameOrAddress": {
                    "type": "string",
                    "x-labelLocalizationKey": "address.label",
                    "x-rank": 0
                  },
                  "password": {
                    "type": "string",
                    "x-controlOptions": {
                      "hidePasswordLabel": "password.hidePassword",
                      "password": true,
                      "showPasswordLabel": "password.showPassword"
                    },
                    "x-encrypted": true,
                    "x-labelLocalizationKey": "password.label",
                    "x-rank": 3
                  },
                  "port": {
                    "description": "port.description",
                    "maximum": 65535,
                    "minimum": 1,
                    "type": "integer",
                    "x-labelLocalizationKey": "port.label",
                    "x-rank": 1
                  },
                  "username": {
                    "type": "string",
                    "x-encrypted": true,
                    "x-labelLocalizationKey": "username.label",
                    "x-rank": 2
                  }
                },
                "required": [
                  "hostnameOrAddress",
                  "username",
                  "password"
                ],
                "type": "object"
              },
              "discovery": {
                "properties": {
                  "discoveryType": {
                    "oneOf": [
                      {
                        "const": "all",
                        "x-labelLocalizationKey": "discoveryType.all"
                      },
                      {
                        "const": "monitor",
                        "x-labelLocalizationKey": "discoveryType.monitor"
                      },
                      {
                        "const": "virtualServer",
                        "x-labelLocalizationKey": "discoveryType.virtualServer"
                      }
                    ],
                    "x-labelLocalizationKey": "discoveryType.label",
                    "x-rank": 0
                  },
                  "excludeExpiredCertificates": {
                    "type": "boolean",
                    "x-labelLocalizationKey": "discovery.expiredCertificatesLabel",
                    "x-rank": 2
                  },
                  "excludeInactiveProfiles": {
                    "type": "boolean",
                    "x-labelLocalizationKey": "discovery.inactiveProfilesLabel",
                    "x-rank": 3
                  },
                  "partition": {
                    "default": "Common",
                    "description": "discovery.partitionDescription",
                    "maxLength": 64,
                    "type": "string",
                    "x-labelLocalizationKey": "discovery.partitionLabel",
                    "x-rank": 1
                  }
                },
                "type": "object"
              },
              "discoveryControl": {
                "properties": {
                  "maxResults": {
                    "type": "int"
                  }
                },
                "required": [
                  "maxResults"
                ],
                "type": "object"
              },
              "discoveryPage": {
                "properties": {
                  "discoveryType": {
                    "type": "string"
                  },
                  "paginator": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "keystore": {
                "properties": {
                  "certificateName": {
                    "description": "certificateName.description",
                    "type": "string",
                    "x-labelLocalizationKey": "certificateName.label",
                    "x-rank": 0
                  },
                  "chainName": {
                    "type": "string",
                    "x-labelLocalizationKey": "chainName.label",
                    "x-rank": 1
                  },
                  "partition": {
                    "description": "partition.description",
                    "maxLength": 64,
                    "type": "string",
                    "x-labelLocalizationKey": "partition.label",
                    "x-rank": 2,
                    "x-targetConfigurationRef": "/partitions"
                  }
                },
                "required": [
                  "certificateName",
                  "chainName"
                ],
                "type": "object",
                "x-labelLocalizationKey": "keystore.label",
                "x-primaryKey": [
                  "#/certificateName",
                  "#/partition"
                ]
              }
            },
            "hooks": {
              "mapping": {
                "configureInstallationEndpoint": "/v1/configureinstallationendpoint",
                "discoverCertificates": "/v1/discovercertificates",
                "installCertificateBundle": "/v1/installcertificatebundle",
                "testConnection": "/v1/testconnection"
              },
              "requestConverters": [
                "arguments-decrypter"
              ]
            },
            "localizationResources": {
              "en": {
                "address": {
                  "label": "Server Hostname"
                },
                "binding": {
                  "label": "Server Store Details"
                },
                "certificateName": {
                  "description": "How the certificate should appear on the server.",
                  "label": "Certificate Name"
                },
                "chainName": {
                  "label": "Chain Bundle Name"
                },
                "discovery": {
                  "expiredCertificatesLabel": "Exclude expired certificates.",
                  "inactiveProfilesLabel": "Exclude certificates that are not in use by either a virtual server or a monitor.",
                  "partitionDescription": "A comma separated list of partition names.",
                  "partitionLabel": "Partition(s)"
                },
                "discoveryType": {
                  "all": "Both Monitors and Virtual Servers",
                  "label": "Resource Types to Discover",
                  "monitor": "Monitors",
                  "virtualServer": "Virtual Servers"
                },
                "keystore": {
                  "label": "Certificate Information"
                },
                "parentProfile": {
                  "description": "No value is interpreted as \"clientssl\" or \"serverssl\" depending on the Profile Type selected.",
                  "label": "Parent Profile"
                },
                "partition": {
                  "description": "No value is interpreted as the \"Common\" partition.",
                  "label": "Partition"
                },
                "password": {
                  "hidePassword": "Hide Password",
                  "label": "Password",
                  "showPassword": "Show Password"
                },
                "port": {
                  "description": "No value is interpreted as 443.",
                  "label": "Port"
                },
                "serverName": {
                  "description": "An alternative DNS name used for Server Name Indication.",
                  "label": "SNI"
                },
                "sslProfile": {
                  "label": "SSL Profile"
                },
                "sslProfileType": {
                  "client": "Client SSL Profile",
                  "label": "Profile Type",
                  "server": "Server SSL Profile"
                },
                "username": {
                  "label": "Username"
                }
              }
            },
            "name": "Sample Manifest"
          }
        }
      },
      "MediaType": {
        "properties": {
          "parameters": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "subtype": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "wildcardSubtype": {
            "type": "boolean"
          },
          "wildcardType": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "MetadataInformation": {
        "properties": {
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "productEntitlement": {
            "enum": [
              "ANY",
              "MIRA",
              "DEVOPS",
              "OUTAGE_DETECTION",
              "CODESIGN"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "NamespaceChartDetails": {
        "properties": {
          "charts": {
            "items": {
              "$ref": "#/components/schemas/ChartDetails"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NamespaceStatusDetails": {
        "properties": {
          "name": {
            "type": "string"
          },
          "pods": {
            "items": {
              "$ref": "#/components/schemas/PodStatusDetails"
            },
            "type": "array"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NaryOperator": {
        "description": "An operator for filtering",
        "enum": [
          "AND",
          "OR"
        ],
        "example": "OR",
        "type": "string"
      },
      "NewCookie": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "expiry": {
            "format": "date-time",
            "type": "string"
          },
          "httpOnly": {
            "type": "boolean"
          },
          "maxAge": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "sameSite": {
            "enum": [
              "NONE",
              "LAX",
              "STRICT"
            ],
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          },
          "version": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NodeCondition": {
        "properties": {
          "Status": {
            "type": "string",
            "writeOnly": true
          },
          "Type": {
            "type": "string",
            "writeOnly": true
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeInfo": {
        "properties": {
          "kubelet_version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeStatusDetails": {
        "properties": {
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/NodeCondition"
            },
            "type": "array"
          },
          "info": {
            "$ref": "#/components/schemas/NodeInfo"
          }
        },
        "type": "object"
      },
      "Operator": {
        "enum": [
          "EQUALS",
          "NOT_EQUALS",
          "CONTAINS",
          "NOT_CONTAINS",
          "STARTS_WITH",
          "ENDS_WITH"
        ],
        "type": "string"
      },
      "Order": {
        "properties": {
          "direction": {
            "description": "An ordering direction",
            "enum": [
              "ASC",
              "DESC"
            ],
            "example": "DESC",
            "type": "string"
          },
          "field": {
            "description": "A field, that will be used for ordering",
            "example": "modificationDate",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrderObject": {
        "properties": {
          "direction": {
            "enum": [
              "ASC",
              "DESC"
            ],
            "type": "string"
          },
          "field": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Ordering": {
        "properties": {
          "orders": {
            "items": {
              "$ref": "#/components/schemas/OrderObject"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OwnerIdAndType": {
        "properties": {
          "ownerId": {
            "format": "uuid",
            "type": "string"
          },
          "ownerType": {
            "enum": [
              "USER",
              "TEAM",
              "SERVICE_ACCOUNT"
            ],
            "type": "string"
          }
        },
        "required": [
          "ownerId",
          "ownerType"
        ],
        "type": "object"
      },
      "Page": {
        "description": "Specify pagination on the search request",
        "properties": {
          "pageNumber": {
            "description": "page number",
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "pageSize": {
            "description": "page size",
            "example": 10,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Paging": {
        "properties": {
          "pageNumber": {
            "format": "int32",
            "type": "integer"
          },
          "pageSize": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PatchServiceAccountByClientIDRequestBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceAccountPatchBaseObject"
          },
          {
            "properties": {
              "enabled": {
                "description": "Indicates if the given service account must be enabled or disabled where disable means that the credentials cannot be used for authentication",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "example": {
          "credentialLifetime": 365,
          "enabled": true,
          "name": "New name",
          "owner": "2620f8e0-fdbf-11ee-b275-2754a4f7e272",
          "publicKey": "-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAor3JRni8bObnKbmWzRubiNyKMoCXLVrswqiMm2h8zl8=\n-----END PUBLIC KEY-----\n",
          "scopes": [
            "distributed-issuance"
          ]
        }
      },
      "Persona": {
        "enum": [
          "Application Owners",
          "All PKI Admins",
          "All Admins"
        ],
        "type": "string"
      },
      "Plugin": {
        "properties": {
          "creationTime": {
            "description": "Represents the date when the plugin was created.",
            "format": "date-time",
            "type": "string"
          },
          "disabled": {
            "description": "Indicates whether the tenant has disabled the plugin from its list of plugins.",
            "type": "boolean"
          },
          "id": {
            "description": "Represents the plugin ID.",
            "type": "string"
          },
          "lastModifiedOn": {
            "description": "Date the plugin was last modified.",
            "format": "date-time",
            "type": "string"
          },
          "maintainer": {
            "description": "Refers to the organization, individual, email, location, or website responsible for maintaining the plugin.",
            "nullable": true,
            "type": "string"
          },
          "manifest": {
            "$ref": "#/components/schemas/Manifest"
          },
          "name": {
            "description": "Represents the name of the plugin. This must be unique.",
            "type": "string"
          },
          "pluginType": {
            "$ref": "#/components/schemas/PluginType"
          },
          "revision": {
            "description": "Represents the number of times the plugins has been updated.",
            "type": "integer"
          },
          "workTypes": {
            "description": "Represents the type of workflow the plugin supports.",
            "items": {
              "$ref": "#/components/schemas/WorkType"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "revision",
          "pluginType",
          "workTypes",
          "manifest",
          "lastModifiedOn",
          "creationTime"
        ],
        "title": "Plugin",
        "type": "object"
      },
      "PluginResponse": {
        "properties": {
          "plugins": {
            "items": {
              "$ref": "#/components/schemas/Plugin"
            },
            "type": "array"
          }
        },
        "required": [
          "plugins"
        ],
        "title": "PluginResponse",
        "type": "object"
      },
      "PluginType": {
        "description": "Used for differentiation between different types of plugins.",
        "enum": [
          "MACHINE",
          "CA",
          "TPP",
          "CREDENTIAL_MANAGER"
        ],
        "title": "PluginType",
        "type": "string"
      },
      "PodStatusDetails": {
        "properties": {
          "age": {
            "format": "int64",
            "type": "integer"
          },
          "cpuUsage": {
            "format": "int32",
            "type": "integer"
          },
          "memoryUsage": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "restartCount": {
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PolicyCreateRequest": {
        "properties": {
          "extendedKeyUsages": {
            "description": "Extended key usages",
            "enum": [
              "ANY",
              "SERVER_AUTH",
              "CLIENT_AUTH",
              "CODE_SIGNING",
              "EMAIL_PROTECTION",
              "IPSEC_ENDSYSTEM",
              "IPSEC_TUNNEL",
              "IPSEC_USER",
              "TIME_STAMPING",
              "OCSP_SIGNING",
              "DVCS",
              "SBGP_CERT_AA_SERVER_AUTH",
              "SCVP_RESPONDER",
              "EAP_OVER_PPP",
              "EAP_OVER_LAN",
              "SCVP_SERVER",
              "SCVP_CLIENT",
              "IPSEC_IKE",
              "CAPWAP_AC",
              "CAPWAP_WTP",
              "IPSEC_IKE_INTERMEDIATE",
              "SMARTCARD_LOGON"
            ],
            "example": "[\"CLIENT_AUTH\",\"SERVER_AUTH\"]",
            "type": "string"
          },
          "keyAlgorithm": {
            "$ref": "#/components/schemas/KeyAlgorithmInformation"
          },
          "keyUsages": {
            "description": "Key usages",
            "enum": [
              "digitalSignature",
              "nonRepudiation",
              "keyEncipherment",
              "dataEncipherment",
              "keyAgreement",
              "keyCertSign",
              "cRLSign",
              "encipherOnly",
              "decipherOnly"
            ],
            "example": "[\"keyEncipherment\",\"digitalSignature\"]",
            "type": "string"
          },
          "name": {
            "description": "Name of the policy",
            "example": "Some policy",
            "maxLength": 64,
            "type": "string"
          },
          "sans": {
            "$ref": "#/components/schemas/SansInformation"
          },
          "subject": {
            "$ref": "#/components/schemas/SubjectAttributesInformation"
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "P30D",
            "format": "PnYnMnDTnHnMnS",
            "type": "string"
          }
        },
        "required": [
          "extendedKeyUsages",
          "keyAlgorithm",
          "keyUsages",
          "name",
          "sans",
          "subject",
          "validityPeriod"
        ],
        "type": "object"
      },
      "PolicyDeleteResponse": {
        "properties": {
          "id": {
            "description": "UUID of the policy",
            "example": "8ae92800-b1e0-11ed-859d-b39255f965ee",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the policy",
            "example": "Some policy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PolicyInformation": {
        "properties": {
          "companyId": {
            "description": "UUID specific to your company",
            "example": "03eb6e61-9806-11ed-84f2-c747fb71e467",
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "description": "When the policy was initially created",
            "example": "2022-10-10T14:50:41.710+00:00",
            "type": "string"
          },
          "extendedKeyUsages": {
            "description": "Extended key usages",
            "enum": [
              "ANY",
              "SERVER_AUTH",
              "CLIENT_AUTH",
              "CODE_SIGNING",
              "EMAIL_PROTECTION",
              "IPSEC_ENDSYSTEM",
              "IPSEC_TUNNEL",
              "IPSEC_USER",
              "TIME_STAMPING",
              "OCSP_SIGNING",
              "DVCS",
              "SBGP_CERT_AA_SERVER_AUTH",
              "SCVP_RESPONDER",
              "EAP_OVER_PPP",
              "EAP_OVER_LAN",
              "SCVP_SERVER",
              "SCVP_CLIENT",
              "IPSEC_IKE",
              "CAPWAP_AC",
              "CAPWAP_WTP",
              "IPSEC_IKE_INTERMEDIATE",
              "SMARTCARD_LOGON"
            ],
            "example": "[\"CLIENT_AUTH\",\"SERVER_AUTH\"]",
            "type": "string"
          },
          "id": {
            "description": "UUID of the policy",
            "example": "8ae92800-b1e0-11ed-859d-b39255f965ee",
            "format": "uuid",
            "type": "string"
          },
          "keyAlgorithm": {
            "$ref": "#/components/schemas/KeyAlgorithmInformation"
          },
          "keyUsages": {
            "description": "Key usages",
            "enum": [
              "digitalSignature",
              "nonRepudiation",
              "keyEncipherment",
              "dataEncipherment",
              "keyAgreement",
              "keyCertSign",
              "cRLSign",
              "encipherOnly",
              "decipherOnly"
            ],
            "example": "[\"keyEncipherment\",\"digitalSignature\"]",
            "type": "string"
          },
          "modificationDate": {
            "description": "When the policy was last modified",
            "example": "2023-12-12T20:00:10.500+00:00",
            "type": "string"
          },
          "name": {
            "description": "Name of the policy",
            "example": "Some policy",
            "type": "string"
          },
          "sans": {
            "$ref": "#/components/schemas/SansInformation"
          },
          "subject": {
            "$ref": "#/components/schemas/SubjectAttributesInformation"
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "P30D",
            "format": "PnYnMnDTnHnMnS",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PolicyResponse": {
        "properties": {
          "policies": {
            "items": {
              "$ref": "#/components/schemas/ExtendedPolicyInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PolicyUpdateRequest": {
        "properties": {
          "extendedKeyUsages": {
            "description": "Extended key usages",
            "enum": [
              "ANY",
              "SERVER_AUTH",
              "CLIENT_AUTH",
              "CODE_SIGNING",
              "EMAIL_PROTECTION",
              "IPSEC_ENDSYSTEM",
              "IPSEC_TUNNEL",
              "IPSEC_USER",
              "TIME_STAMPING",
              "OCSP_SIGNING",
              "DVCS",
              "SBGP_CERT_AA_SERVER_AUTH",
              "SCVP_RESPONDER",
              "EAP_OVER_PPP",
              "EAP_OVER_LAN",
              "SCVP_SERVER",
              "SCVP_CLIENT",
              "IPSEC_IKE",
              "CAPWAP_AC",
              "CAPWAP_WTP",
              "IPSEC_IKE_INTERMEDIATE",
              "SMARTCARD_LOGON"
            ],
            "example": "[\"CLIENT_AUTH\",\"SERVER_AUTH\"]",
            "type": "string"
          },
          "keyAlgorithm": {
            "$ref": "#/components/schemas/KeyAlgorithmInformation"
          },
          "keyUsages": {
            "description": "Key usages",
            "enum": [
              "digitalSignature",
              "nonRepudiation",
              "keyEncipherment",
              "dataEncipherment",
              "keyAgreement",
              "keyCertSign",
              "cRLSign",
              "encipherOnly",
              "decipherOnly"
            ],
            "example": "[\"keyEncipherment\",\"digitalSignature\"]",
            "type": "string"
          },
          "name": {
            "description": "Name of the policy",
            "example": "Some policy",
            "maxLength": 64,
            "type": "string"
          },
          "sans": {
            "$ref": "#/components/schemas/SansInformation"
          },
          "subject": {
            "$ref": "#/components/schemas/SubjectAttributesInformation"
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "P30D",
            "format": "PnYnMnDTnHnMnS",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductEntitlement": {
        "enum": [
          "ANY",
          "MIRA",
          "DEVOPS",
          "OUTAGE_DETECTION",
          "CODESIGN"
        ],
        "type": "string"
      },
      "ProductEntitlementInformation": {
        "properties": {
          "capabilities": {
            "items": {
              "$ref": "#/components/schemas/CapabilityInformation"
            },
            "type": "array"
          },
          "label": {
            "$ref": "#/components/schemas/ProductEntitlement"
          },
          "visibilityConstraintsInformation": {
            "$ref": "#/components/schemas/VisibilityConstraintsInformation"
          }
        },
        "required": [
          "capabilities",
          "label",
          "visibilityConstraintsInformation"
        ],
        "type": "object"
      },
      "PropertyInformation": {
        "properties": {
          "allowedValues": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "defaultValues": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "maxOccurrences": {
            "format": "int32",
            "type": "integer"
          },
          "minOccurrences": {
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "enum": [
              "IGNORED",
              "FORBIDDEN",
              "OPTIONAL",
              "REQUIRED",
              "LOCKED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProviderConfigInformation": {
        "properties": {
          "api_key": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProviderInformation": {
        "properties": {
          "config": {
            "$ref": "#/components/schemas/ProviderConfigInformation"
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/ProviderInputInformation"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProviderInputInformation": {
        "properties": {
          "hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ports": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subnet": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProvisionCertificateWorkflowInputInformation": {
        "properties": {
          "wsClientId": {
            "type": "string"
          }
        },
        "required": [
          "wsClientId"
        ],
        "type": "object"
      },
      "PublicPluginCreationRequest": {
        "properties": {
          "maintainer": {
            "description": "Refers to the organization, individual, email, location, or website responsible for maintaining the plugin.",
            "nullable": true,
            "type": "string"
          },
          "manifest": {
            "$ref": "#/components/schemas/Manifest"
          },
          "pluginType": {
            "$ref": "#/components/schemas/PluginType"
          }
        },
        "required": [
          "manifest",
          "pluginType"
        ],
        "title": "PublicPluginCreationRequest",
        "type": "object",
        "x-stoplight": {
          "id": "sto5fs3n5bxmf"
        }
      },
      "PublicPluginUpdateRequest": {
        "properties": {
          "image": {
            "nullable": true,
            "type": "string"
          },
          "maintainer": {
            "nullable": true,
            "type": "string"
          },
          "manifest": {
            "$ref": "#/components/schemas/Manifest"
          }
        },
        "title": "PublicPluginUpdateRequest",
        "type": "object",
        "x-stoplight": {
          "id": "8ypau6to0udah"
        }
      },
      "PutServiceAccountByClientIDCredentialsRequestBody": {
        "example": {
          "extendCredentialLifetime": true
        },
        "properties": {
          "extendCredentialLifetime": {
            "description": "Extend the credential lifetime",
            "type": "boolean"
          }
        },
        "required": [
          "extendCredentialLifetime"
        ],
        "type": "object"
      },
      "PutServiceAccountByClientIDCredentialsResponseBody": {
        "properties": {
          "credentialExpiresIn": {
            "description": "Expiration in hours for service account credentials",
            "format": "float",
            "type": "number",
            "x-go-type": "float64"
          }
        },
        "type": "object"
      },
      "PutServiceAccountByClientIDOCITokenResponseBody": {
        "properties": {
          "ociRegistryToken": {
            "description": "The OCI registry token generated for a robot in case of the registry scope",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Recipient": {
        "properties": {
          "id": {
            "description": "The ID of a user or team who should be included as a recipient.",
            "format": "UUID",
            "type": "string"
          },
          "type": {
            "description": "The type of the recipient.",
            "enum": [
              "User",
              "Team"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "id"
        ],
        "type": "object"
      },
      "RecommendedSettingsInformation1": {
        "properties": {
          "key": {
            "$ref": "#/components/schemas/RecommendedSettingsKeyTypeInformation"
          },
          "keyGeneratedBy": {
            "type": "string"
          },
          "sanRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectCNRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectCValue": {
            "type": "string"
          },
          "subjectLValue": {
            "type": "string"
          },
          "subjectOUValue": {
            "type": "string"
          },
          "subjectOValue": {
            "type": "string"
          },
          "subjectSTValue": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RecommendedSettingsInformation2": {
        "properties": {
          "key": {
            "$ref": "#/components/schemas/RecommendedSettingsKeyTypeInformation"
          },
          "sanRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectCNRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectCValue": {
            "type": "string"
          },
          "subjectLValue": {
            "type": "string"
          },
          "subjectOUValue": {
            "type": "string"
          },
          "subjectOValue": {
            "type": "string"
          },
          "subjectSTValue": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RecommendedSettingsKeyTypeInformation": {
        "properties": {
          "curve": {
            "enum": [
              "P256",
              "P384",
              "P521",
              "ED25519",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "length": {
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "enum": [
              "RSA",
              "EC"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "RecommendedSettingsKeyTypeParameter": {
        "properties": {
          "curve": {
            "enum": [
              "P256",
              "P384",
              "P521",
              "ED25519",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "length": {
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "enum": [
              "RSA",
              "EC"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "RecommendedSettingsRequest": {
        "properties": {
          "key": {
            "$ref": "#/components/schemas/RecommendedSettingsKeyTypeParameter"
          },
          "keyGeneratedBy": {
            "type": "string"
          },
          "sanRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectCNRegexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subjectCValue": {
            "pattern": "^(([A-Z]{2})|(\\.\\*))$",
            "type": "string"
          },
          "subjectLValue": {
            "pattern": "[^\\*]*",
            "type": "string"
          },
          "subjectOUValue": {
            "pattern": "[^\\*]*",
            "type": "string"
          },
          "subjectOValue": {
            "pattern": "[^\\*]*",
            "type": "string"
          },
          "subjectSTValue": {
            "pattern": "[^\\*]*",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Reference": {
        "description": "The machine referenced.",
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ReferenceType"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "ReferenceType": {
        "description": "The type of the reference:\n  * `machine`\n",
        "enum": [
          "machine"
        ],
        "type": "string"
      },
      "References": {
        "description": "The machines referenced.",
        "items": {
          "$ref": "#/components/schemas/Reference"
        },
        "type": "array",
        "uniqueItems": true
      },
      "ReferralPartner": {
        "enum": [
          "globalsign-hvca",
          "digicert-certcentral"
        ],
        "type": "string"
      },
      "Response": {
        "properties": {
          "allowedMethods": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "closed": {
            "type": "boolean"
          },
          "cookies": {
            "additionalProperties": {
              "$ref": "#/components/schemas/NewCookie"
            },
            "type": "object"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "entity": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "entityTag": {
            "$ref": "#/components/schemas/EntityTag"
          },
          "headers": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/AnyValue"
              },
              "type": "array"
            },
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "language": {
            "properties": {
              "country": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "iso3Country": {
                "type": "string"
              },
              "iso3Language": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "unicodeLocaleKeys": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "variant": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "lastModified": {
            "format": "date-time",
            "type": "string"
          },
          "length": {
            "format": "int32",
            "type": "integer"
          },
          "links": {
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "type": "array",
            "uniqueItems": true
          },
          "location": {
            "format": "uri",
            "type": "string"
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "metadata": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/AnyValue"
              },
              "type": "array"
            },
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "status": {
            "format": "int32",
            "type": "integer"
          },
          "statusInfo": {
            "$ref": "#/components/schemas/StatusType"
          },
          "stringHeaders": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ResponseCMSDetails": {
        "description": "An string containing the JSON content representing the details of the specific privileged access management.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ResponseCyberArkDetails"
          }
        ]
      },
      "ResponseCredentialDetails": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ResponseCyberArkCredDetails"
          }
        ]
      },
      "ResponseCyberArkCredDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CyberArkDetailsRequiredProp"
          }
        ]
      },
      "ResponseCyberArkDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CyberArkConfiguration"
          }
        ]
      },
      "Role1": {
        "enum": [
          "SYSTEM_ADMIN",
          "OUTAGE_DETECTION_PLATFORM_ADMIN",
          "OUTAGE_DETECTION_PKI_ADMIN",
          "OUTAGE_DETECTION_RESOURCE_OWNER",
          "OUTAGE_DETECTION_GUEST"
        ],
        "type": "string"
      },
      "Role2": {
        "enum": [
          "SECURITY_ADMIN",
          "DEVOPS_LEAD",
          "DEVOPS_USER",
          "OUTAGEDETECTION_ADMIN",
          "RESOURCE_OWNER",
          "PKI_ADMIN",
          "GUEST",
          "PLATFORM_ADMIN"
        ],
        "type": "string"
      },
      "RolesRequest": {
        "properties": {
          "roles": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Role2"
            },
            "type": "object"
          },
          "systemAdmin": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SSOStatus": {
        "enum": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "string"
      },
      "SansInformation": {
        "description": "Subject alternative names",
        "properties": {
          "dnsNames": {
            "$ref": "#/components/schemas/PropertyInformation"
          },
          "ipAddresses": {
            "$ref": "#/components/schemas/PropertyInformation"
          },
          "rfc822Names": {
            "$ref": "#/components/schemas/PropertyInformation"
          },
          "uniformResourceIdentifiers": {
            "$ref": "#/components/schemas/PropertyInformation"
          }
        },
        "type": "object"
      },
      "ScanafiConfigResponseV1": {
        "properties": {
          "id": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataInformation"
          },
          "provider": {
            "$ref": "#/components/schemas/ProviderInformation"
          }
        },
        "type": "object"
      },
      "SchedulerPatternInformation": {
        "discriminator": {
          "propertyName": "recurrenceType"
        },
        "properties": {
          "recurrenceType": {
            "type": "string"
          }
        },
        "required": [
          "recurrenceType"
        ],
        "type": "object"
      },
      "Scope": {
        "description": "The service account authorization scopes",
        "example": "distributed-issuance",
        "type": "string"
      },
      "ScopeDetails": {
        "description": "The service account authorization scopes detailed",
        "example": {
          "authenticationType": "rsaKey",
          "id": "distributed-issuance",
          "readableName": "Distributed Issuance"
        },
        "properties": {
          "authenticationType": {
            "description": "Type of authentication used in the scope",
            "type": "string"
          },
          "id": {
            "description": "ID for the given scope",
            "type": "string"
          },
          "readableName": {
            "description": "User friendly name for the scope",
            "type": "string"
          }
        },
        "required": [
          "id",
          "readableName"
        ],
        "type": "object"
      },
      "ServiceAccountBaseObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceAccountBaseObjectNoKey"
          },
          {
            "properties": {
              "publicKey": {
                "description": "The client generated public key",
                "maxLength": 2000,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "ServiceAccountBaseObjectNoKey": {
        "properties": {
          "applications": {
            "description": "The list of applications for which the account is authorized",
            "example": [
              "dc96438b-7a80-464b-a09b-9e5ec746c3e3",
              "5bce5ff4-a69b-4e78-9b7e-6d4029995000"
            ],
            "items": {
              "$ref": "#/components/schemas/Application"
            },
            "type": "array",
            "uniqueItems": true
          },
          "audience": {
            "description": "The intended audience or recipients of the entity",
            "example": "Audience",
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          },
          "authenticationType": {
            "description": "Type of authentication used in the scope. Currently supporting two types rsaKey and ociToken",
            "example": "rsaKey",
            "type": "string"
          },
          "companyId": {
            "description": "The UUID of the company/tenant",
            "format": "UUID",
            "type": "string",
            "x-go-type": "uuid.UUID",
            "x-go-type-import": {
              "path": "github.com/google/uuid"
            }
          },
          "credentialLifetime": {
            "description": "The number of days for which the credentials will be valid before expiring and requiring renewal",
            "example": 365,
            "maximum": 365,
            "minimum": 1,
            "type": "integer"
          },
          "issuerURL": {
            "description": "The URL of the entity issuer, providing the source or origin",
            "example": "https://accounts.google.com/",
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          },
          "jwksURI": {
            "description": "The URI pointing to the JSON Web Key Set (JWKS) for the entity, facilitating secure authentication",
            "example": "https://www.googleapis.com/oauth2/v3/certs",
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "description": "User friendly name for the given account",
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          },
          "owner": {
            "description": "The UUID of the owning team",
            "format": "UUID",
            "type": "string",
            "x-go-type": "uuid.UUID",
            "x-go-type-import": {
              "path": "github.com/google/uuid"
            }
          },
          "scopes": {
            "description": "The list of scopes for which the account is authorized",
            "example": [
              "distributed-issuance"
            ],
            "items": {
              "$ref": "#/components/schemas/Scope"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "subject": {
            "description": "The subject of the entity, representing the main topic or title.",
            "example": "Subject",
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceAccountBasePatchObjectNoKey": {
        "properties": {
          "applications": {
            "description": "The list of applications for which the account is authorized",
            "example": [
              "dc96438b-7a80-464b-a09b-9e5ec746c3e3",
              "5bce5ff4-a69b-4e78-9b7e-6d4029995000"
            ],
            "items": {
              "$ref": "#/components/schemas/Application"
            },
            "type": "array",
            "uniqueItems": true
          },
          "audience": {
            "description": "The intended audience or recipients of the entity",
            "example": "Audience",
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          },
          "credentialLifetime": {
            "description": "The number of days for which the credentials will be valid before expiring and requiring renewal",
            "maximum": 365,
            "minimum": 1,
            "type": "integer"
          },
          "issuerURL": {
            "description": "The URL of the entity issuer, providing the source or origin",
            "example": "https://accounts.google.com/",
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          },
          "jwksURI": {
            "description": "The URI pointing to the JSON Web Key Set (JWKS) for the entity, facilitating secure authentication",
            "example": "https://www.googleapis.com/oauth2/v3/certs",
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "description": "User friendly name for the given account",
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          },
          "owner": {
            "description": "The UUID of the owning team",
            "format": "UUID",
            "type": "string",
            "x-go-type": "uuid.UUID",
            "x-go-type-import": {
              "path": "github.com/google/uuid"
            }
          },
          "scopes": {
            "description": "The list of scopes for which the account is authorized",
            "items": {
              "$ref": "#/components/schemas/Scope"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "subject": {
            "description": "The subject of the entity, representing the main topic or title.",
            "example": "Subject",
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceAccountDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceAccountBaseObject"
          },
          {
            "$ref": "#/components/schemas/Details"
          }
        ]
      },
      "ServiceAccountDetailsNoKey": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceAccountBaseObjectNoKey"
          },
          {
            "$ref": "#/components/schemas/Details"
          }
        ],
        "example": {
          "authenticationType": "rsaKey",
          "companyId": "145f12e0-fdbf-11ee-b275-2754a4f7e272",
          "credentialLifetime": 365,
          "credentialsExpiringOn": "2025-01-01T00:00:00.000000Z",
          "enabled": true,
          "id": "933507dd-0286-11ef-bc25-8a00a468403f",
          "name": "Service Account I",
          "owner": "2620f8e0-fdbf-11ee-b275-2754a4f7e272",
          "scopes": [
            "distributed-issuance"
          ],
          "updatedBy": "150760d0-fdbf-11ee-b275-2754a4f7e272",
          "updatedOn": "2024-01-01T00:00:00.000000Z"
        }
      },
      "ServiceAccountInformation": {
        "properties": {
          "applications": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "applicationsAdded": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "applicationsRemoved": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "authType": {
            "type": "string"
          },
          "authenticationType": {
            "type": "string"
          },
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "format": "uuid",
            "type": "string"
          },
          "ownership": {
            "additionalProperties": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "type": "object"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "tenantId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceAccountPatchBaseObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceAccountBasePatchObjectNoKey"
          },
          {
            "properties": {
              "publicKey": {
                "description": "The client generated public key",
                "maxLength": 2000,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "StatusResponse": {
        "description": "Details about the current in-progress certificate auto-renewal process, and the most recently completed process.",
        "properties": {
          "current": {
            "$ref": "#/components/schemas/StatusResponseItem"
          },
          "previous": {
            "$ref": "#/components/schemas/StatusResponseItem"
          }
        },
        "required": [
          "current"
        ],
        "type": "object"
      },
      "StatusResponseItem": {
        "description": "Details about the upcoming certificate auto-renewal run.",
        "example": {
          "applications": 13,
          "certificates": {
            "eligible": 47,
            "renewal": {
              "failed": 1,
              "successful": 9,
              "triggered": 3
            }
          },
          "state": "running",
          "timestamp": "2023-08-25T20:59:36.688019837Z"
        },
        "properties": {
          "applications": {
            "description": "The number of applications that have auto-renewal enabled.",
            "example": 13,
            "format": "int64",
            "type": "integer"
          },
          "certificates": {
            "description": "A set of statistics related to the certificates that were included in the auto-renewal process.",
            "example": {
              "eligible": 47,
              "renewal": {
                "failed": 1,
                "successful": 9,
                "triggered": 3
              }
            },
            "properties": {
              "eligible": {
                "description": "The number of certificates that belong to an application that has auto-renewal enabled.",
                "format": "int64",
                "type": "integer"
              },
              "renewal": {
                "properties": {
                  "failed": {
                    "description": "The number of certificates for which renewal failed",
                    "format": "int64",
                    "type": "integer"
                  },
                  "successful": {
                    "description": "The number of certificates for which renewal completed successfully",
                    "format": "int64",
                    "type": "integer"
                  },
                  "triggered": {
                    "description": "The number of certificates for which the renewal has been started",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "triggered",
                  "successful",
                  "failed"
                ],
                "type": "object"
              }
            },
            "required": [
              "eligible",
              "renewal"
            ],
            "type": "object"
          },
          "state": {
            "description": "A string representing the status of a specific run of the auto-renewal process.",
            "enum": [
              "pending",
              "triggered",
              "running",
              "complete",
              "awaiting results",
              "no enabled apps",
              "no automated keypair service active",
              "failure"
            ],
            "example": "running",
            "type": "string"
          },
          "timestamp": {
            "description": "The date and time when certificate auto-renewal is estimated to begin.",
            "example": "2023-08-25T20:59:36.688019837Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "timestamp",
          "state",
          "applications",
          "certificates"
        ],
        "type": "object"
      },
      "StatusType": {
        "properties": {
          "family": {
            "enum": [
              "INFORMATIONAL",
              "SUCCESSFUL",
              "REDIRECTION",
              "CLIENT_ERROR",
              "SERVER_ERROR",
              "OTHER"
            ],
            "type": "string"
          },
          "reasonPhrase": {
            "type": "string"
          },
          "statusCode": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SubCaProviderCreateRequest": {
        "properties": {
          "caAccountId": {
            "description": "UUID of the CA account used by this Sub CA provider",
            "example": "4ece3180-b1e0-11ed-862d-ad36b18e787a",
            "format": "uuid",
            "type": "string"
          },
          "caProductOptionId": {
            "description": "UUID of the CA product option used by this Sub CA provider",
            "example": "6b3d8d20-b1e0-11ed-9c2f-953e35982bbd",
            "format": "uuid",
            "type": "string"
          },
          "caType": {
            "description": "Type of CA this Sub CA provider works with",
            "enum": [
              "MOCKCA",
              "DIGICERT",
              "GLOBALSIGN",
              "BUILTIN",
              "ENTRUST",
              "MICROSOFT",
              "ACME",
              "ZTPKI",
              "GLOBALSIGNMSSL",
              "TPP"
            ],
            "example": "BUILTIN",
            "type": "string"
          },
          "commonName": {
            "description": "Common name",
            "example": "example.com",
            "maxLength": 64,
            "type": "string"
          },
          "country": {
            "description": "Country",
            "example": "US",
            "maxLength": 64,
            "type": "string"
          },
          "keyAlgorithm": {
            "description": "Key algorithm type",
            "enum": [
              "RSA_2048",
              "RSA_3072",
              "RSA_4096",
              "EC_P256",
              "EC_P384",
              "EC_P521",
              "EC_ED25519"
            ],
            "example": "EC_P256",
            "type": "string"
          },
          "locality": {
            "description": "Locality",
            "example": "San Antonio",
            "maxLength": 64,
            "type": "string"
          },
          "name": {
            "description": "Name of the Sub CA provider",
            "example": "Some Sub CA provider",
            "maxLength": 64,
            "type": "string"
          },
          "organization": {
            "description": "Organization",
            "example": "Some organization",
            "maxLength": 64,
            "type": "string"
          },
          "organizationalUnit": {
            "description": "Organizational unit",
            "example": "Some organizational unit",
            "maxLength": 64,
            "type": "string"
          },
          "pkcs11": {
            "$ref": "#/components/schemas/SubCaProviderPkcs11ConfigurationInformation"
          },
          "stateOrProvince": {
            "description": "State or province",
            "example": "Texas",
            "maxLength": 64,
            "type": "string"
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "P30D",
            "format": "PnYnMnDTnHnMnS",
            "type": "string"
          }
        },
        "required": [
          "caAccountId",
          "caProductOptionId",
          "caType",
          "commonName",
          "keyAlgorithm",
          "name",
          "validityPeriod"
        ],
        "type": "object"
      },
      "SubCaProviderDeleteResponse": {
        "properties": {
          "id": {
            "description": "UUID of the Sub CA provider",
            "example": "2f3c6030-b1e0-11ed-a3ed-e3dbaf56a746",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the Sub CA provider",
            "example": "Some Sub CA",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubCaProviderInformation": {
        "properties": {
          "caAccountId": {
            "description": "UUID of the CA account used by this Sub CA provider",
            "example": "4ece3180-b1e0-11ed-862d-ad36b18e787a",
            "format": "uuid",
            "type": "string"
          },
          "caProductOptionId": {
            "description": "UUID of the CA product option used by this Sub CA provider",
            "example": "6b3d8d20-b1e0-11ed-9c2f-953e35982bbd",
            "format": "uuid",
            "type": "string"
          },
          "caType": {
            "description": "Type of CA this Sub CA provider works with",
            "enum": [
              "MOCKCA",
              "DIGICERT",
              "GLOBALSIGN",
              "BUILTIN",
              "ENTRUST",
              "MICROSOFT",
              "ACME",
              "ZTPKI",
              "GLOBALSIGNMSSL",
              "TPP"
            ],
            "example": "BUILTIN",
            "type": "string"
          },
          "commonName": {
            "description": "Common name",
            "example": "example.com",
            "type": "string"
          },
          "companyId": {
            "description": "UUID specific to your company",
            "example": "03eb6e61-9806-11ed-84f2-c747fb71e467",
            "format": "uuid",
            "type": "string"
          },
          "country": {
            "description": "Country",
            "example": "US",
            "type": "string"
          },
          "creationDate": {
            "description": "When the Sub CA provider was initially created",
            "example": "2022-10-10T14:50:41.710+00:00",
            "type": "string"
          },
          "id": {
            "description": "UUID of the Sub CA provider",
            "example": "2f3c6030-b1e0-11ed-a3ed-e3dbaf56a746",
            "format": "uuid",
            "type": "string"
          },
          "keyAlgorithm": {
            "description": "Key algorithm type",
            "enum": [
              "RSA_2048",
              "RSA_3072",
              "RSA_4096",
              "EC_P256",
              "EC_P384",
              "EC_P521",
              "EC_ED25519"
            ],
            "example": "EC_P256",
            "type": "string"
          },
          "locality": {
            "description": "Locality",
            "example": "San Antonio",
            "type": "string"
          },
          "modificationDate": {
            "description": "When the Sub CA provider was last modified",
            "example": "2023-12-12T20:00:10.500+00:00",
            "type": "string"
          },
          "name": {
            "description": "Name of the Sub CA provider",
            "example": "Some Sub CA provider",
            "type": "string"
          },
          "organization": {
            "description": "Organization",
            "example": "Some organization",
            "type": "string"
          },
          "organizationalUnit": {
            "description": "Organizational unit",
            "example": "Some organizational unit",
            "type": "string"
          },
          "pkcs11": {
            "$ref": "#/components/schemas/SubCaProviderPkcs11ConfigurationInformation"
          },
          "stateOrProvince": {
            "description": "State or province",
            "example": "Texas",
            "type": "string"
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "P30D",
            "format": "PnYnMnDTnHnMnS",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubCaProviderPkcs11ConfigurationInformation": {
        "properties": {
          "allowedClientLibraries": {
            "description": "A collection of strings each of which represents SHA256 hash of an allowed HSM client library",
            "example": [
              "c34d199f2e30bb679cd9b8533b99975465aefe8b023be1b37972f1ab43ab7b2d"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pin": {
            "description": "HSM PIN",
            "example": "1234",
            "type": "string",
            "writeOnly": true
          },
          "signingEnabled": {
            "description": "Indicates whether HSM signing is enabled or not",
            "example": true,
            "type": "boolean"
          },
          "slot": {
            "description": "HSM Slot number",
            "example": 1472789662,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SubCaProviderResponse": {
        "properties": {
          "subCaProviders": {
            "items": {
              "$ref": "#/components/schemas/SubCaProviderInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SubCaProviderUpdateRequest": {
        "properties": {
          "caProductOptionId": {
            "description": "UUID of the CA product option used by this Sub CA provider",
            "example": "6b3d8d20-b1e0-11ed-9c2f-953e35982bbd",
            "format": "uuid",
            "type": "string"
          },
          "commonName": {
            "description": "Common name",
            "example": "example.com",
            "maxLength": 64,
            "type": "string"
          },
          "country": {
            "description": "Country",
            "example": "US",
            "maxLength": 64,
            "type": "string"
          },
          "keyAlgorithm": {
            "description": "Key algorithm type",
            "enum": [
              "RSA_2048",
              "RSA_3072",
              "RSA_4096",
              "EC_P256",
              "EC_P384",
              "EC_P521",
              "EC_ED25519"
            ],
            "example": "EC_P256",
            "type": "string"
          },
          "locality": {
            "description": "Locality",
            "example": "San Antonio",
            "maxLength": 64,
            "type": "string"
          },
          "name": {
            "description": "Name of the Sub CA provider",
            "example": "Some Sub CA",
            "maxLength": 64,
            "type": "string"
          },
          "organization": {
            "description": "Organization",
            "example": "Some organization",
            "maxLength": 64,
            "type": "string"
          },
          "organizationalUnit": {
            "description": "Organizational unit",
            "example": "Some organizational unit",
            "maxLength": 64,
            "type": "string"
          },
          "pkcs11": {
            "$ref": "#/components/schemas/SubCaProviderPkcs11ConfigurationInformation"
          },
          "stateOrProvince": {
            "description": "State or province",
            "example": "Texas",
            "maxLength": 64,
            "type": "string"
          },
          "validityPeriod": {
            "description": "ISO8601 Period Format",
            "example": "PnYnMnDTnHnMnS",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubjectAlternativeNamesByType": {
        "properties": {
          "dnsNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ipAddresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rfc822Names": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uniformResourceIdentifiers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SubjectAttributesInformation": {
        "description": "Subject attributes",
        "properties": {
          "commonName": {
            "$ref": "#/components/schemas/PropertyInformation"
          },
          "country": {
            "$ref": "#/components/schemas/PropertyInformation"
          },
          "locality": {
            "$ref": "#/components/schemas/PropertyInformation"
          },
          "organization": {
            "$ref": "#/components/schemas/PropertyInformation"
          },
          "organizationalUnit": {
            "$ref": "#/components/schemas/PropertyInformation"
          },
          "stateOrProvince": {
            "$ref": "#/components/schemas/PropertyInformation"
          }
        },
        "type": "object"
      },
      "SystemRole": {
        "enum": [
          "SYSTEM_ADMIN",
          "CONDOR_METRICS"
        ],
        "type": "string"
      },
      "TagAssignmentErrorInformation": {
        "description": "Error information for tags not assigned",
        "example": {
          "errorInformation": {
            "message": "not assigned",
            "statusCode": 1111
          }
        },
        "properties": {
          "args": {
            "items": {
              "$ref": "#/components/schemas/AnyValue"
            },
            "type": "array"
          },
          "message": {
            "type": "string"
          },
          "statusCode": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TagInformation": {
        "properties": {
          "companyId": {
            "description": "UUID specific to your company",
            "example": "265f6d30-a0bb-11ed-aee0-89fe7e5f5d0c",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "UUID of the tag",
            "example": "265f6d30-a0bb-11ed-aee0-89fe7e5f5d0c",
            "format": "uuid",
            "type": "string"
          },
          "isReserved": {
            "description": "Used by Venafi to reserve system tags",
            "example": false,
            "type": "boolean"
          },
          "key": {
            "description": "Same as tag name, though all lowercase",
            "example": "application",
            "type": "string"
          },
          "name": {
            "description": "Name of the tag",
            "example": "Application",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TagRequest": {
        "description": "Array of tag and tag-value objects",
        "properties": {
          "name": {
            "description": "Name of the tag",
            "example": "Application",
            "type": "string"
          },
          "values": {
            "description": "Array of values associated with the tag",
            "example": [
              "TLS Protect",
              "Jetstack"
            ],
            "items": {
              "description": "Array of values associated with the tag",
              "example": "[\"TLS Protect\",\"Jetstack\"]",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "TagResponse": {
        "properties": {
          "count": {
            "description": "Number of tags returned",
            "example": 7,
            "format": "int32",
            "type": "integer"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TagValueInformation": {
        "properties": {
          "companyId": {
            "description": "UUID specific to your company",
            "example": "265f6d30-a0bb-11ed-aee0-89fe7e5f5d0c",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "The ID of the value",
            "example": "265f6d30-a0bb-11ed-aee0-89fe7e5f5d0c",
            "format": "uuid",
            "type": "string"
          },
          "tagId": {
            "description": "The ID of the tag the value applies to",
            "example": "265f6d30-a0bb-11ed-aee0-89fe7e5f5d0c",
            "format": "uuid",
            "type": "string"
          },
          "value": {
            "description": "Name of the value",
            "example": "TLS Protect",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TagValuesRequest": {
        "properties": {
          "values": {
            "description": "Array of value names to associate with the tag",
            "example": "265f6d30-a0bb-11ed-aee0-89fe7e5f5d0c",
            "items": {
              "description": "Array of value names to associate with the tag",
              "example": "265f6d30-a0bb-11ed-aee0-89fe7e5f5d0c",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "TagValuesResponse": {
        "properties": {
          "count": {
            "description": "Number of values returned",
            "example": 7,
            "format": "int32",
            "type": "integer"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/TagValueInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TagsAndValuesInformation": {
        "properties": {
          "tag": {
            "$ref": "#/components/schemas/TagInformation"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/TagValueInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TagsAndValuesResponse": {
        "properties": {
          "tagsAndValues": {
            "items": {
              "$ref": "#/components/schemas/TagsAndValuesInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TagsAssignRequest": {
        "properties": {
          "action": {
            "description": "Action to perform",
            "enum": [
              "REPLACE",
              "ADD",
              "DELETE",
              "DELETE_ALL"
            ],
            "example": "REPLACE",
            "type": "string"
          },
          "entityIds": {
            "description": "Array of UUIDs of the objects",
            "example": [
              "265f6d30-a0bb-11ed-aee0-89fe7e5f5d0c"
            ],
            "items": {
              "description": "Array of UUIDs of the objects",
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "entityType": {
            "description": "Object type that the tag applies to",
            "enum": [
              "CERTIFICATE",
              "CERTIFICATE_INSTANCE",
              "APPLICATION"
            ],
            "example": "CERTIFICATE",
            "type": "string"
          },
          "targetedTags": {
            "description": "Array of tags to apply",
            "example": [
              "265f6d30-a0bb-11ed-aee0-89fe7e5f5d0c"
            ],
            "items": {
              "description": "Array of tags to apply",
              "example": "[\"265f6d30-a0bb-11ed-aee0-89fe7e5f5d0c\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "action",
          "entityIds",
          "entityType",
          "targetedTags"
        ],
        "type": "object"
      },
      "TagsAssignResponse": {
        "properties": {
          "tagsAssignInformation": {
            "items": {
              "$ref": "#/components/schemas/TagsAssignResponseInformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TagsAssignResponseInformation": {
        "properties": {
          "companyId": {
            "description": "UUID specific to your company",
            "example": "265f6d30-a0bb-11ed-aee0-89fe7e5f5d0c",
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "description": "The date when the assignment is created",
            "example": "2023-01-30T16:28:53.166Z",
            "format": "date-time",
            "type": "string"
          },
          "entityId": {
            "description": "UUID of the object",
            "example": "265f6d30-a0bb-11ed-aee0-89fe7e5f5d0c",
            "format": "uuid",
            "type": "string"
          },
          "entityType": {
            "description": "Object type that the tag applies to",
            "example": "CERTIFICATE",
            "type": "string"
          },
          "errorInformation": {
            "$ref": "#/components/schemas/TagAssignmentErrorInformation"
          },
          "modificationDate": {
            "description": "The date when the assignment is last modified",
            "example": "2023-01-30T16:28:53.166Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "Status of the assigned entity",
            "example": "ASSIGNED",
            "type": "string"
          },
          "tags": {
            "description": "The tags that are assigned",
            "example": [
              "Application:TLS"
            ],
            "items": {
              "description": "The tags that are assigned",
              "example": "[\"Application:TLS\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "TagsAssignmentAggregatesRequest": {
        "properties": {
          "entityType": {
            "description": "Object type that the tag applies to. If null, get all object types",
            "enum": [
              "CERTIFICATE",
              "CERTIFICATE_INSTANCE",
              "APPLICATION"
            ],
            "example": "CERTIFICATE",
            "type": "string"
          },
          "tags": {
            "description": "Array of tags",
            "example": [
              "TAG",
              "Tag:Value"
            ],
            "items": {
              "description": "Array of tags",
              "example": "[\"TAG\",\"Tag:Value\"]",
              "type": "string"
            },
            "maxItems": 100,
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "tags"
        ],
        "type": "object"
      },
      "TagsAssignmentAggregatesResponse": {
        "properties": {
          "aggregates": {
            "additionalProperties": {
              "description": "Represents a mapping of tag name to list of aggregates information",
              "example": {
                "TagNew": [
                  {
                    "count": 2,
                    "entityType": "CERTIFICATE"
                  },
                  {
                    "count": 5,
                    "entityType": "APPLICATION"
                  }
                ],
                "tag:value": [
                  {
                    "count": 6,
                    "entityType": "CERTIFICATE"
                  },
                  {
                    "count": 1,
                    "entityType": "APPLICATION"
                  }
                ]
              },
              "items": {
                "$ref": "#/components/schemas/TagsAssignmentAggregatesResponseInformation"
              },
              "type": "array"
            },
            "description": "Represents a mapping of tag name to list of aggregates information",
            "example": {
              "TagNew": [
                {
                  "count": 2,
                  "entityType": "CERTIFICATE"
                },
                {
                  "count": 5,
                  "entityType": "APPLICATION"
                }
              ],
              "tag:value": [
                {
                  "count": 6,
                  "entityType": "CERTIFICATE"
                },
                {
                  "count": 1,
                  "entityType": "APPLICATION"
                }
              ]
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "TagsAssignmentAggregatesResponseInformation": {
        "description": "Represents a mapping of tag name to list of aggregates information",
        "example": {
          "TagNew": [
            {
              "count": 2,
              "entityType": "CERTIFICATE"
            },
            {
              "count": 5,
              "entityType": "APPLICATION"
            }
          ],
          "tag:value": [
            {
              "count": 6,
              "entityType": "CERTIFICATE"
            },
            {
              "count": 1,
              "entityType": "APPLICATION"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "Number of entities per type",
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "entityType": {
            "description": "Object type that the tag applies to",
            "example": "CERTIFICATE",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TagsBulkRequest": {
        "properties": {
          "tags": {
            "description": "Array of tag and tag-value objects",
            "items": {
              "$ref": "#/components/schemas/TagRequest"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Target": {
        "properties": {
          "connection": {
            "format": "json",
            "type": "string"
          },
          "type": {
            "enum": [
              "generic",
              "slack",
              "teams"
            ],
            "type": "string"
          }
        },
        "required": [
          "connection",
          "type"
        ],
        "type": "object"
      },
      "TargetsInformation": {
        "discriminator": {
          "propertyName": "serviceType"
        },
        "properties": {
          "serviceType": {
            "type": "string"
          }
        },
        "required": [
          "serviceType"
        ],
        "type": "object"
      },
      "TeamId": {
        "description": "The ID of a team.",
        "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
        "format": "uuid",
        "type": "string"
      },
      "TeamInformation1": {
        "properties": {
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "members": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "name": {
            "type": "string"
          },
          "owners": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "ownership": {
            "additionalProperties": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "type": "object"
          },
          "productRoles": {
            "additionalProperties": {
              "items": {
                "enum": [
                  "SECURITY_ADMIN",
                  "DEVOPS_LEAD",
                  "DEVOPS_USER",
                  "OUTAGEDETECTION_ADMIN",
                  "RESOURCE_OWNER",
                  "PKI_ADMIN",
                  "GUEST",
                  "PLATFORM_ADMIN"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "type": "object"
          },
          "systemRoles": {
            "items": {
              "enum": [
                "SYSTEM_ADMIN",
                "CONDOR_METRICS"
              ],
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "TeamInformation2": {
        "properties": {
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "members": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "modificationDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owners": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "productRoles": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/Role2"
              },
              "type": "array",
              "uniqueItems": true
            },
            "type": "object"
          },
          "role": {
            "$ref": "#/components/schemas/TeamRole"
          },
          "systemRoles": {
            "items": {
              "$ref": "#/components/schemas/SystemRole"
            },
            "type": "array",
            "uniqueItems": true
          },
          "userMatchingRules": {
            "items": {
              "$ref": "#/components/schemas/UserMatchingRule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TeamMembersRequest": {
        "properties": {
          "members": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "members"
        ],
        "type": "object"
      },
      "TeamOwnersRequest": {
        "properties": {
          "owners": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "owners"
        ],
        "type": "object"
      },
      "TeamRole": {
        "enum": [
          "SYSTEM_ADMIN",
          "PKI_ADMIN",
          "RESOURCE_OWNER",
          "GUEST",
          "PLATFORM_ADMIN"
        ],
        "type": "string"
      },
      "TeamsIds": {
        "description": "The ID's of teams.",
        "items": {
          "$ref": "#/components/schemas/TeamId"
        },
        "type": "array",
        "uniqueItems": true
      },
      "TeamsResponse": {
        "properties": {
          "teams": {
            "items": {
              "$ref": "#/components/schemas/TeamInformation2"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TenantExpirationNotificationConfiguration": {
        "properties": {
          "additionalRecipients": {
            "description": "A list of users and/or teams who should be added as recipients.",
            "example": [
              {
                "id": "22153ae0-4352-11ee-b95c-3531a284802b",
                "type": "User"
              },
              {
                "id": "22153ae0-4352-11ee-b95c-12345abcd123",
                "type": "Team"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Recipient"
            },
            "type": "array",
            "uniqueItems": true
          },
          "channels": {
            "description": "A list of channels that should be used to deliver the notification.",
            "example": [
              "email"
            ],
            "items": {
              "$ref": "#/components/schemas/Channel"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "enabled": {
            "description": "If true, then the system will send notification for certificates which are nearing expiration.",
            "example": true,
            "type": "boolean"
          },
          "fallbackToPKIAdmin": {
            "description": "If true, then all users with the PKI admin role will be added as recipients if the persona list does not include any recipients for a specific certificate.",
            "example": true,
            "type": "boolean"
          },
          "includeCertificateDetails": {
            "description": "If true, then the notification may include potentially sensitive details about the certificate that is nearing expiration.",
            "example": true,
            "type": "boolean"
          },
          "personas": {
            "description": "A list of personas who should be recipients of the notification. If \"Application Owners\" is included then the owners of the Application object to which the certificate is assigned will be added as recipients. If \"All PKI Admins\" or \"All Admins\" are present then all users in the system with that role will be added as recipients.",
            "example": [
              "Application Owners",
              "All PKI Admins"
            ],
            "items": {
              "$ref": "#/components/schemas/Persona"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "TenantExpirationReportsConfiguration": {
        "properties": {
          "additionalRecipients": {
            "description": "A list of users and/or teams who should be added as recipients.",
            "example": [
              {
                "id": "22153ae0-4352-11ee-b95c-3531a284802b",
                "type": "User"
              },
              {
                "id": "22153ae0-4352-11ee-b95c-12345abcd123",
                "type": "Team"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Recipient"
            },
            "type": "array",
            "uniqueItems": true
          },
          "channels": {
            "description": "A list of channels that should be used to deliver the notification.",
            "example": [
              "email"
            ],
            "items": {
              "$ref": "#/components/schemas/Channel"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "enabled": {
            "description": "If true, then the system will send reports providing details of certificates which are nearing expiration.",
            "example": true,
            "type": "boolean"
          },
          "expiringWithinDays": {
            "description": "Any certificates which will expire within the number of days specified here will be included in the report.",
            "example": 30,
            "type": "integer"
          },
          "ignoreAfterDays": {
            "description": "Any certificates which have expired for more than the specified days will be excluded in the report.",
            "example": 30,
            "type": "integer"
          },
          "roles": {
            "description": "All users with the specified VaaS roles will be added as a report recipient.",
            "example": [
              "SYSTEM_ADMIN"
            ],
            "items": {
              "$ref": "#/components/schemas/Role1"
            },
            "type": "array",
            "uniqueItems": true
          },
          "schedule": {
            "description": "A cron string representing the desired schedule for delivering reports. Note that currently reports may not be sent more than once per day. The `hour` and `minute` fields of the cron schedule will be ignored.",
            "example": "0 0 * * Mon",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TenantRenewalConfiguration": {
        "properties": {
          "id": {
            "description": "The object ID",
            "example": "12a05220-4352-11ee-ac28-c1379e5decf9",
            "format": "UUID",
            "type": "string"
          },
          "renewalWindow": {
            "description": "A set of options to control the time window in which auto-renewal of certificates should be attempted.",
            "example": {
              "days": 30
            },
            "properties": {
              "days": {
                "description": "Any certificates associated with this object that are expected to expire within the specified number of days will be acted on.",
                "format": "int64",
                "minimum": 1,
                "type": "integer"
              }
            },
            "required": [
              "days"
            ],
            "type": "object"
          }
        },
        "required": [
          "id",
          "renewalWindow"
        ],
        "type": "object"
      },
      "TestCMSConfigurationRequest": {
        "description": "The information representing a Credential Manager Service configuration for test purposes.",
        "properties": {
          "cmsDetails": {
            "$ref": "#/components/schemas/TestCMSDetails"
          },
          "cmsType": {
            "$ref": "#/components/schemas/CMSType"
          },
          "id": {
            "description": "The Credential Manager Service configuration ID to test.",
            "format": "uuid",
            "type": "string"
          },
          "vSatelliteIds": {
            "$ref": "#/components/schemas/VSatelliteIds"
          },
          "wsClientId": {
            "description": "An ID where you can subscribe to receive the response of the workflow.",
            "type": "string"
          }
        },
        "required": [
          "cmsType",
          "vSatelliteIds",
          "cmsDetails",
          "wsClientId"
        ],
        "type": "object"
      },
      "TestCMSConfigurationResponse": {
        "description": "The result of testing the Credential Manager Service configuration.",
        "properties": {
          "workflowId": {
            "format": "uuid",
            "type": "string"
          },
          "workflowName": {
            "type": "string"
          }
        },
        "required": [
          "workflowId",
          "workflowName"
        ],
        "type": "object"
      },
      "TestCMSDetails": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TestCyberArkDetails"
          }
        ]
      },
      "TestCredentialRequest": {
        "description": "The properties representing a credential to test.",
        "properties": {
          "authType": {
            "$ref": "#/components/schemas/AuthType"
          },
          "cmsType": {
            "$ref": "#/components/schemas/CMSType"
          },
          "credentialDetails": {
            "$ref": "#/components/schemas/CyberArkDetails"
          },
          "id": {
            "description": "The Credential Id in TLS Protect Cloud.",
            "format": "uuid",
            "type": "string"
          },
          "wsClientId": {
            "description": "An ID where you can subscribe to receive the response of the workflow.",
            "type": "string"
          }
        },
        "required": [
          "wsClientId"
        ],
        "type": "object"
      },
      "TestCredentialResponse": {
        "description": "The result of testing access to the credential.",
        "properties": {
          "workflowId": {
            "format": "uuid",
            "type": "string"
          },
          "workflowName": {
            "type": "string"
          }
        },
        "required": [
          "workflowId",
          "workflowName"
        ],
        "type": "object"
      },
      "TestCyberArkDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CyberArkConfigurationRequiredProp"
          }
        ]
      },
      "TrackingDataInformation": {
        "discriminator": {
          "propertyName": "certificateAuthority"
        },
        "properties": {
          "certificateAuthority": {
            "type": "string"
          }
        },
        "required": [
          "certificateAuthority"
        ],
        "type": "object"
      },
      "UnaryOperator": {
        "description": "An operator for filtering",
        "enum": [
          "NOT"
        ],
        "example": "NOT",
        "type": "string"
      },
      "UpdateCMSConfigurationRequest": {
        "description": "The information representing a Credential Manager Service configuration for update.",
        "properties": {
          "cmsDetails": {
            "$ref": "#/components/schemas/UpdateCMSDetails"
          },
          "id": {
            "$ref": "#/components/schemas/CMSConfId"
          },
          "vSatelliteIds": {
            "$ref": "#/components/schemas/VSatelliteIds"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "UpdateCMSDetails": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/UpdateCyberArkDetails"
          }
        ]
      },
      "UpdateCredentialDetails": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/UpdateCyberArkCredDetails"
          }
        ]
      },
      "UpdateCredentialRequest": {
        "description": "The properties representing a credential to update.",
        "properties": {
          "credentialDetails": {
            "$ref": "#/components/schemas/UpdateCredentialDetails"
          },
          "id": {
            "$ref": "#/components/schemas/CredentialId"
          },
          "name": {
            "$ref": "#/components/schemas/CredentialName"
          },
          "teamsIds": {
            "$ref": "#/components/schemas/TeamsIds"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "UpdateCyberArkCredDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CyberArkDetails"
          }
        ]
      },
      "UpdateCyberArkDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CyberArkConfiguration"
          }
        ]
      },
      "UpdateTeamRequest": {
        "properties": {
          "name": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/TeamRole"
          },
          "userMatchingRules": {
            "items": {
              "$ref": "#/components/schemas/UserMatchingRule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UriBuilder": {
        "type": "object"
      },
      "UserAccountResponse": {
        "properties": {
          "apiKey": {
            "$ref": "#/components/schemas/ApiKeyInformation"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyInformation"
          },
          "user": {
            "$ref": "#/components/schemas/UserInformation2"
          }
        },
        "type": "object"
      },
      "UserAccountType": {
        "enum": [
          "WEB_UI",
          "API"
        ],
        "type": "string"
      },
      "UserAccountTypeRequest": {
        "properties": {
          "accountType": {
            "$ref": "#/components/schemas/UserAccountType"
          }
        },
        "required": [
          "accountType"
        ],
        "type": "object"
      },
      "UserInformation1": {
        "properties": {
          "admin": {
            "type": "boolean"
          },
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "memberedTeams": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "ownedTeams": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "productRoles": {
            "additionalProperties": {
              "items": {
                "enum": [
                  "SECURITY_ADMIN",
                  "DEVOPS_LEAD",
                  "DEVOPS_USER",
                  "OUTAGEDETECTION_ADMIN",
                  "RESOURCE_OWNER",
                  "PKI_ADMIN",
                  "GUEST",
                  "PLATFORM_ADMIN"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "type": "object"
          },
          "resourceOwner": {
            "type": "boolean"
          },
          "serviceAccount": {
            "type": "boolean"
          },
          "systemRoles": {
            "items": {
              "enum": [
                "SYSTEM_ADMIN",
                "CONDOR_METRICS"
              ],
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "teamsIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "userAccountType": {
            "type": "string"
          },
          "userStatus": {
            "type": "string"
          },
          "userType": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserInformation2": {
        "properties": {
          "companyId": {
            "format": "uuid",
            "type": "string"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "emailAddress": {
            "type": "string"
          },
          "firstLoginDate": {
            "format": "date-time",
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "hasPassword": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "localLoginDisabled": {
            "type": "boolean"
          },
          "memberedTeams": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "ownedTeams": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "productRoles": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/Role2"
              },
              "type": "array",
              "uniqueItems": true
            },
            "type": "object"
          },
          "signupAttributes": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "ssoStatus": {
            "$ref": "#/components/schemas/SSOStatus"
          },
          "systemRoles": {
            "items": {
              "$ref": "#/components/schemas/SystemRole"
            },
            "type": "array",
            "uniqueItems": true
          },
          "userAccountType": {
            "$ref": "#/components/schemas/UserAccountType"
          },
          "userStatus": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "userType": {
            "$ref": "#/components/schemas/UserType"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserMatchingRule": {
        "properties": {
          "claimName": {
            "type": "string"
          },
          "operator": {
            "$ref": "#/components/schemas/Operator"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "claimName",
          "operator",
          "value"
        ],
        "type": "object"
      },
      "UserResponse": {
        "properties": {
          "users": {
            "items": {
              "$ref": "#/components/schemas/UserInformation2"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UserStatus": {
        "enum": [
          "PENDING_ACTIVATION",
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "string"
      },
      "UserType": {
        "enum": [
          "EXTERNAL",
          "INTERNAL"
        ],
        "type": "string"
      },
      "VSatelliteId": {
        "description": "The VSatellite ID",
        "format": "uuid",
        "type": "string"
      },
      "VSatelliteIds": {
        "description": "An array of the VSatellite Ids which are connected to the CMS provider.",
        "items": {
          "$ref": "#/components/schemas/VSatelliteId"
        },
        "minItems": 1,
        "type": "array",
        "uniqueItems": true
      },
      "VisibilityConstraintsInformation": {
        "properties": {
          "fullAccessDurationDays": {
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "limitedAccessNotificationDays": {
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "limitedVisibilityCertCount": {
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "limitedVisibilityCertInstallPerCertCount": {
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "WebhookProperties": {
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Filter1"
          },
          "target": {
            "$ref": "#/components/schemas/Target"
          }
        },
        "required": [
          "filter",
          "target"
        ],
        "type": "object"
      },
      "WorkType": {
        "description": "Defines the type of supported workflow for the plugin.",
        "enum": [
          "DISCOVERY",
          "CREDENTIAL",
          "PROVISIONING",
          "ISSUANCE",
          "CERTIFICATE_IMPORT"
        ],
        "title": "WorkType",
        "type": "string"
      },
      "WorkerServiceStatusDetails": {
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "tppl-api-key": {
        "in": "header",
        "name": "tppl-api-key",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "title": "TLS Protect API",
    "version": "1.0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/outagedetection/v1/certificates": {
      "get": {
        "description": "This endpoint allows you to retrieve all your certificates according to a specified criteria. This API provides a quick way to gather certificate details in order to install the certificates where they are needed.\n\nUse the `subject` query parameter to limit the search based on the certificate subject common name.",
        "operationId": "certificates_getAll",
        "parameters": [
          {
            "in": "query",
            "name": "ownershipTree",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "excludeSupersededInstances",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Ability to enter regular expression to match specific criteria.",
            "in": "query",
            "name": "subject",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Indicates the maximum integer number of certificates returned.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificates details response": {
                    "description": "Certificates details response",
                    "summary": "Certificates details",
                    "value": {
                      "certificates": [
                        {
                          "applicationIds": [
                            "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                          ],
                          "authorityKeyIdentifierHash": "27811CFCA803A90E617FA5D47441649608417DD4",
                          "certificateAuthorityAccountId": "2ed72220-da16-11ed-b080-e795c8859d29",
                          "certificateName": "venafi.cloud",
                          "certificateRequestId": "3f675520-dfd8-11ed-82b4-074391f91f8b",
                          "certificateStatus": "ACTIVE",
                          "companyId": "2d558b30-da16-11ed-8e4f-8339a1bc8d58",
                          "encryptionType": "RSA",
                          "extendedKeyUsage": [
                            "1.3.6.1.5.5.7.3.1",
                            "1.3.6.1.5.5.7.3.2"
                          ],
                          "fingerprint": "F3CDE0F7539C331D9EF006092161EC8387320B4B",
                          "id": "3fb83440-dfd8-11ed-b8ab-4788d83ace9f",
                          "instances": [
                            {
                              "applicationIds": [
                                "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                              ],
                              "certificateId": "3fb83440-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateInstanceId": "3fba3010-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateSource": "USER_PROVIDED",
                              "deploymentStatus": "SUPERSEDED",
                              "hostname": "",
                              "ipAddress": "254.254.254.254",
                              "modificationDate": "2023-04-21T00:05:39.397+00:00",
                              "port": 443
                            }
                          ],
                          "issuerC": "US",
                          "issuerCN": [
                            "Dedicated - Venafi Cloud Built-In Intermediate CA - G1"
                          ],
                          "issuerCertificateIds": [
                            "73ff23b0-da21-11ed-befa-05892b4b966e",
                            "73e38560-da21-11ed-befa-05892b4b966e"
                          ],
                          "issuerDN": "cn=Dedicated - Venafi Cloud Built-In Intermediate CA - G1,ou=Built-in,o=Venafi, Inc.,c=US",
                          "issuerOU": [
                            "Built-in"
                          ],
                          "keyStrength": 4096,
                          "keyUsage": [
                            "digitalSignature",
                            "keyEncipherment",
                            "keyAgreement"
                          ],
                          "managedCertificateId": "3f3e7060-dfd8-11ed-8850-f18176fc5513",
                          "modificationDate": "2023-04-21T00:05:39.397+00:00",
                          "ocspNoCheck": false,
                          "selfSigned": false,
                          "serialNumber": "173B8702B939C6E3FF702A1DE8386BF35A24A8B7",
                          "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                          "signatureHashAlgorithm": "SHA256",
                          "subjectAlternativeNameDns": [
                            "venafi.com"
                          ],
                          "subjectAlternativeNamesByType": {
                            "dNSName": [
                              "venafi.com"
                            ]
                          },
                          "subjectC": "US",
                          "subjectCN": [
                            "venafi.cloud"
                          ],
                          "subjectDN": "cn=venafi.cloud,ou=dev,o=Venafi,c=US,st=Utah,l=Salt Lake City",
                          "subjectKeyIdentifierHash": "C1EBF01EB166455AAFB6B8D7EFB5CDF78E7A930B",
                          "subjectL": "Salt Lake City",
                          "subjectO": "Venafi",
                          "subjectOU": [
                            "dev"
                          ],
                          "subjectST": "Utah",
                          "totalActiveInstanceCount": 0,
                          "totalInstanceCount": 1,
                          "validityEnd": "2023-07-10T00:05:39.000+00:00",
                          "validityStart": "2023-04-21T00:05:09.000+00:00",
                          "versionType": "CURRENT"
                        },
                        {
                          "applicationIds": [
                            "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                          ],
                          "authorityKeyIdentifierHash": "27811CFCA803A90E617FA5D47441649608417DD4",
                          "certificateAuthorityAccountId": "2ed72220-da16-11ed-b080-e795c8859d29",
                          "certificateName": "venafi.cloud",
                          "certificateRequestId": "567c4c70-dfd8-11ed-82b4-074391f91f8b",
                          "certificateStatus": "ACTIVE",
                          "companyId": "2d558b30-da16-11ed-8e4f-8339a1bc8d58",
                          "encryptionType": "RSA",
                          "extendedKeyUsage": [
                            "1.3.6.1.5.5.7.3.1",
                            "1.3.6.1.5.5.7.3.2"
                          ],
                          "fingerprint": "E8635EE689F6DB249CAA284FD8DDE7E09DEE6F00",
                          "id": "568a0810-dfd8-11ed-b8ab-4788d83ace9f",
                          "instances": [
                            {
                              "applicationIds": [
                                "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                              ],
                              "certificateId": "568a0810-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateInstanceId": "568af270-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateSource": "USER_PROVIDED",
                              "deploymentStatus": "SUPERSEDED",
                              "hostname": " ",
                              "instanceChainValidationStatus": [],
                              "ipAddress": "254.254.254.254",
                              "modificationDate": "2023-04-21T00:06:17.669+00:00",
                              "port": 443
                            }
                          ],
                          "issuerC": "US",
                          "issuerCN": [
                            "Dedicated - Venafi Cloud Built-In Intermediate CA - G1"
                          ],
                          "issuerCertificateIds": [
                            "73ff23b0-da21-11ed-befa-05892b4b966e",
                            "73e38560-da21-11ed-befa-05892b4b966e"
                          ],
                          "issuerDN": "cn=Dedicated - Venafi Cloud Built-In Intermediate CA - G1,ou=Built-in,o=Venafi, Inc.,c=US",
                          "issuerOU": [
                            "Built-in"
                          ],
                          "keyStrength": 4096,
                          "keyUsage": [
                            "digitalSignature",
                            "keyEncipherment",
                            "keyAgreement"
                          ],
                          "managedCertificateId": "5677dfa0-dfd8-11ed-8850-f18176fc5513",
                          "modificationDate": "2023-04-21T00:06:17.669+00:00",
                          "ocspNoCheck": false,
                          "selfSigned": false,
                          "serialNumber": "6CC8CB1433B57D10353284EEC09E5D2D2153F4DC",
                          "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                          "signatureHashAlgorithm": "SHA256",
                          "subjectAlternativeNameDns": [
                            "venafi.cloud"
                          ],
                          "subjectAlternativeNamesByType": {
                            "dNSName": [
                              "venafi.cloud"
                            ]
                          },
                          "subjectC": "US",
                          "subjectCN": [
                            "venafi.cloud"
                          ],
                          "subjectDN": "cn=venafi.cloud,ou=qa,o=Venafi,c=US,st=Utah,l=Salt Lake City",
                          "subjectKeyIdentifierHash": "ACCCCB504BF86D1FD94F6D9DA2230A2B454EB5FC",
                          "subjectL": "Salt Lake City",
                          "subjectO": "Venafi",
                          "subjectOU": [
                            "qa"
                          ],
                          "subjectST": "Utah",
                          "totalActiveInstanceCount": 0,
                          "totalInstanceCount": 1,
                          "validityEnd": "2023-07-10T00:06:17.000+00:00",
                          "validityStart": "2023-04-21T00:05:47.000+00:00",
                          "versionType": "CURRENT"
                        }
                      ],
                      "count": 2
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CertificateResponse"
                }
              },
              "text/csv": {
                "examples": {
                  "Certificates details response": {
                    "description": "Certificates details response",
                    "summary": "Certificates details",
                    "value": {
                      "certificates": [
                        {
                          "applicationIds": [
                            "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                          ],
                          "authorityKeyIdentifierHash": "27811CFCA803A90E617FA5D47441649608417DD4",
                          "certificateAuthorityAccountId": "2ed72220-da16-11ed-b080-e795c8859d29",
                          "certificateName": "venafi.cloud",
                          "certificateRequestId": "3f675520-dfd8-11ed-82b4-074391f91f8b",
                          "certificateStatus": "ACTIVE",
                          "companyId": "2d558b30-da16-11ed-8e4f-8339a1bc8d58",
                          "encryptionType": "RSA",
                          "extendedKeyUsage": [
                            "1.3.6.1.5.5.7.3.1",
                            "1.3.6.1.5.5.7.3.2"
                          ],
                          "fingerprint": "F3CDE0F7539C331D9EF006092161EC8387320B4B",
                          "id": "3fb83440-dfd8-11ed-b8ab-4788d83ace9f",
                          "instances": [
                            {
                              "applicationIds": [
                                "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                              ],
                              "certificateId": "3fb83440-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateInstanceId": "3fba3010-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateSource": "USER_PROVIDED",
                              "deploymentStatus": "SUPERSEDED",
                              "hostname": "",
                              "ipAddress": "254.254.254.254",
                              "modificationDate": "2023-04-21T00:05:39.397+00:00",
                              "port": 443
                            }
                          ],
                          "issuerC": "US",
                          "issuerCN": [
                            "Dedicated - Venafi Cloud Built-In Intermediate CA - G1"
                          ],
                          "issuerCertificateIds": [
                            "73ff23b0-da21-11ed-befa-05892b4b966e",
                            "73e38560-da21-11ed-befa-05892b4b966e"
                          ],
                          "issuerDN": "cn=Dedicated - Venafi Cloud Built-In Intermediate CA - G1,ou=Built-in,o=Venafi, Inc.,c=US",
                          "issuerOU": [
                            "Built-in"
                          ],
                          "keyStrength": 4096,
                          "keyUsage": [
                            "digitalSignature",
                            "keyEncipherment",
                            "keyAgreement"
                          ],
                          "managedCertificateId": "3f3e7060-dfd8-11ed-8850-f18176fc5513",
                          "modificationDate": "2023-04-21T00:05:39.397+00:00",
                          "ocspNoCheck": false,
                          "selfSigned": false,
                          "serialNumber": "173B8702B939C6E3FF702A1DE8386BF35A24A8B7",
                          "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                          "signatureHashAlgorithm": "SHA256",
                          "subjectAlternativeNameDns": [
                            "venafi.com"
                          ],
                          "subjectAlternativeNamesByType": {
                            "dNSName": [
                              "venafi.com"
                            ]
                          },
                          "subjectC": "US",
                          "subjectCN": [
                            "venafi.cloud"
                          ],
                          "subjectDN": "cn=venafi.cloud,ou=dev,o=Venafi,c=US,st=Utah,l=Salt Lake City",
                          "subjectKeyIdentifierHash": "C1EBF01EB166455AAFB6B8D7EFB5CDF78E7A930B",
                          "subjectL": "Salt Lake City",
                          "subjectO": "Venafi",
                          "subjectOU": [
                            "dev"
                          ],
                          "subjectST": "Utah",
                          "totalActiveInstanceCount": 0,
                          "totalInstanceCount": 1,
                          "validityEnd": "2023-07-10T00:05:39.000+00:00",
                          "validityStart": "2023-04-21T00:05:09.000+00:00",
                          "versionType": "CURRENT"
                        },
                        {
                          "applicationIds": [
                            "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                          ],
                          "authorityKeyIdentifierHash": "27811CFCA803A90E617FA5D47441649608417DD4",
                          "certificateAuthorityAccountId": "2ed72220-da16-11ed-b080-e795c8859d29",
                          "certificateName": "venafi.cloud",
                          "certificateRequestId": "567c4c70-dfd8-11ed-82b4-074391f91f8b",
                          "certificateStatus": "ACTIVE",
                          "companyId": "2d558b30-da16-11ed-8e4f-8339a1bc8d58",
                          "encryptionType": "RSA",
                          "extendedKeyUsage": [
                            "1.3.6.1.5.5.7.3.1",
                            "1.3.6.1.5.5.7.3.2"
                          ],
                          "fingerprint": "E8635EE689F6DB249CAA284FD8DDE7E09DEE6F00",
                          "id": "568a0810-dfd8-11ed-b8ab-4788d83ace9f",
                          "instances": [
                            {
                              "applicationIds": [
                                "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                              ],
                              "certificateId": "568a0810-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateInstanceId": "568af270-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateSource": "USER_PROVIDED",
                              "deploymentStatus": "SUPERSEDED",
                              "hostname": " ",
                              "instanceChainValidationStatus": [],
                              "ipAddress": "254.254.254.254",
                              "modificationDate": "2023-04-21T00:06:17.669+00:00",
                              "port": 443
                            }
                          ],
                          "issuerC": "US",
                          "issuerCN": [
                            "Dedicated - Venafi Cloud Built-In Intermediate CA - G1"
                          ],
                          "issuerCertificateIds": [
                            "73ff23b0-da21-11ed-befa-05892b4b966e",
                            "73e38560-da21-11ed-befa-05892b4b966e"
                          ],
                          "issuerDN": "cn=Dedicated - Venafi Cloud Built-In Intermediate CA - G1,ou=Built-in,o=Venafi, Inc.,c=US",
                          "issuerOU": [
                            "Built-in"
                          ],
                          "keyStrength": 4096,
                          "keyUsage": [
                            "digitalSignature",
                            "keyEncipherment",
                            "keyAgreement"
                          ],
                          "managedCertificateId": "5677dfa0-dfd8-11ed-8850-f18176fc5513",
                          "modificationDate": "2023-04-21T00:06:17.669+00:00",
                          "ocspNoCheck": false,
                          "selfSigned": false,
                          "serialNumber": "6CC8CB1433B57D10353284EEC09E5D2D2153F4DC",
                          "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                          "signatureHashAlgorithm": "SHA256",
                          "subjectAlternativeNameDns": [
                            "venafi.cloud"
                          ],
                          "subjectAlternativeNamesByType": {
                            "dNSName": [
                              "venafi.cloud"
                            ]
                          },
                          "subjectC": "US",
                          "subjectCN": [
                            "venafi.cloud"
                          ],
                          "subjectDN": "cn=venafi.cloud,ou=qa,o=Venafi,c=US,st=Utah,l=Salt Lake City",
                          "subjectKeyIdentifierHash": "ACCCCB504BF86D1FD94F6D9DA2230A2B454EB5FC",
                          "subjectL": "Salt Lake City",
                          "subjectO": "Venafi",
                          "subjectOU": [
                            "qa"
                          ],
                          "subjectST": "Utah",
                          "totalActiveInstanceCount": 0,
                          "totalInstanceCount": 1,
                          "validityEnd": "2023-07-10T00:06:17.000+00:00",
                          "validityStart": "2023-04-21T00:05:47.000+00:00",
                          "versionType": "CURRENT"
                        }
                      ],
                      "count": 2
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CertificateResponse"
                }
              }
            },
            "description": "Certificate(s) response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request conditions failed."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request conditions failed."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve all certificate data",
        "tags": [
          "Certificates"
        ]
      },
      "post": {
        "description": "Adds to the inventory one or more certificates to the inventory.the certificates are specified in raw base64-encoded format (PEM without header/footer). Chain CA certificates are optional but may be provided using `issuerCertificates`.",
        "operationId": "certificateimports_create",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Certificate import request": {
                  "description": "Certificate import request",
                  "summary": "Certificate Import",
                  "value": {
                    "certificates": [
                      {
                        "apiClientInformation": {
                          "identifier": "192.168.1.63",
                          "type": "Venafi VCert CLI"
                        },
                        "applicationIds": [
                          "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                        ],
                        "certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUlKekNDQmcrZ0F3SUJBZ0lVWlM1bm5PMEZDemowN3lyYkpyUXZzRTVDbDNBd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1hURUxNQWtHQTFVRUJoTUNWVk14TURBdUJnTlZCQW9NSjBoNVpISmhiblJKUkNBb1FYWmhiR0Z1WTJobApJRU5zYjNWa0lFTnZjbkJ2Y21GMGFXOXVLVEVjTUJvR0ExVUVBd3dUU0hsa2NtRnVkRWxFSUZOVFRDQkRRU0JICk16QWVGdzB5TWpBME1qZ3dOVEE0TURCYUZ3MHlNekEwTWpnd05URTNNREJhTUdZeEN6QUpCZ05WQkFZVEFsVlQKTVEwd0N3WURWUVFJREFSVmRHRm9NUmN3RlFZRFZRUUhEQTVUWVd4MElFeGhhMlVnUTJsMGVURVZNQk1HQTFVRQpDZ3dNVm1WdVlXWnBMQ0JKYm1NdU1SZ3dGZ1lEVlFRRERBOWtiMk56TG5abGJtRm1hUzVqYjIwd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFESTdpYW9yK2U1VFlEQmZwR0tvOCs1eGc0a2F4aWQKUld5a0NDWDloOG04SGU4cU1iTDBNWHk5K2FVYlIxRHFZQVhqU1lBQWx0YzBPS0FvNGY4K0laU3hVY0tNSkpRNAo3UzlPZjhBOW43cU85cVB2RTZzYjltMXovQnZlRWhlYjVBbDNyWEFnWFd0OTE1YTlaV0lCcjRlWHNLeVFYZGJhCk9WVG9SeUVGMndma0UzZVlTdThXckFGSXZPcFl5RExKampENXV3UHpGNGp4eXFvSWh5eVpDU2tnUDl2TVc2Zk8KbXhRdGhST2JaOEJyaTdlQm5EaWgvNyt6YTVXTk1wNm13Q3pDdjJsYWVBc3hHMVJnYnBwZjY4dnBFV1B3ZUh3cwp2VUk0ODFsMUtLUjgwSkZId2UycDJHNDE0Mzk0ZVNnNlVOR0NoZEtrQ3N0bkJadzgvbGxpbzZQVkFnTUJBQUdqCmdnUFVNSUlEMERBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRk15aTh6aXQ5c1ZVSnpKR3hUbGYKU1hJVEU0QjVNSHdHQ0NzR0FRVUZCd0VCQkhBd2JqQkFCZ2dyQmdFRkJRY3dBb1kwYUhSMGNEb3ZMM1J5ZFhOMApMbkYxYjNaaFpHbHpaMnh2WW1Gc0xtTnZiUzlvZVdSeVlXNTBhV1J6YzJ4allXY3pMbU55ZERBcUJnZ3JCZ0VGCkJRY3dBWVllYUhSMGNEb3ZMMjlqYzNBdWNYVnZkbUZrYVhObmJHOWlZV3d1WTI5dE1EUUdBMVVkRVFRdE1DdUMKRDJSdlkzTXVkbVZ1WVdacExtTnZiWUlZWkc5amRXMWxiblJoZEdsdmJpNTJaVzVoWm1rdVkyOXRNRjRHQTFVZApJQVJYTUZVd0NBWUdaNEVNQVFJQ01Fa0dEQ3NHQVFRQnZsZ0FBNGNFQURBNU1EY0dDQ3NHQVFVRkJ3SUJGaXRvCmRIUndPaTh2ZDNkM0xtaDVaSEpoYm5ScFpDNWpiMjB2YzNWd2NHOXlkQzl5WlhCdmMybDBiM0o1TUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUNCZ2dyQmdFRkJRY0RBVEJEQmdOVkhSOEVQREE2TURpZ05xQTBoakpvZEhSdwpPaTh2WTNKc0xuRjFiM1poWkdseloyeHZZbUZzTG1OdmJTOW9lV1J5WVc1MGFXUnpjMnhqWVdjekxtTnliREFkCkJnTlZIUTRFRmdRVXlZSWc4WTVMUnMrZDFyblBuUWVZRXVLb2FqQXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01JSUIKOWdZS0t3WUJCQUhXZVFJRUFnU0NBZVlFZ2dIaUFlQUFkZ0N6YzNjSDRZUlErR09HMWdXcDNCRUpTbmt0c1djTQpDNGZjOEFNT2VUYWxtZ0FBQVlCdW1zNjlBQUFFQXdCSE1FVUNJQVROQmM5ZFBZaVl2SnVGcmxFVzh6ZzNSNnhJClJsUG1BWHhMNlpsa21TNVJBaUVBa241TGQzLzR5MzZLa2R6MzBMb25EQThuSWY0Y1NpY09JdzFrRXQ2dUduY0EKZGdCNk1veFUyTGN0dGlEcU9PQlNIdW1FRm5BeUU0Vk5POUlyd1RwWG8xTHJVZ0FBQVlCdW10RzRBQUFFQXdCSApNRVVDSUF2MURBNjdsY25KZDNpNE5XRVp0ckVOUzlxYVhLb3k2V2tmOUY0SFV3cVhBaUVBOEUwWDlmQW9EcGkvCk9QVnkzL05RdU9OcnFnR08wU0FGaFl5OW41LzY5L0VBZGdDdDk3NzZmUDhReUl1ZFBad2VQaGhxdEdjcFhjK3gKRENUS2hZWTA2OXlDaWdBQUFZQnVtczF2QUFBRUF3QkhNRVVDSVFDUEtjT05jcGVBVjZPSkRLRzhxbW1ic1NUZwo1K25CL09DQ3lOOWRwOFptc2dJZ1lmVVBEL3FrMEdmQkY0dTlVNC9taFo4c1k1b2c1dWZwQjdPRENwd2kwMm9BCmRnQTF6eGtidjdGc1Y3OFByVXh0UXN1N3RpY2dKbEhxUCtFcTc2Z0R3enZXVEFBQUFZQnVtczllQUFBRUF3QkgKTUVVQ0lHQ3owUjR6bUFkc3FXWTBRRVVMc283REpRbEdGanMyS2sxY1g3a3Q3WlcwQWlFQXVuUkRQTENEcG1qNApnQUhSYy9vb1J1c0VNMXdwYXdRQWdJUE14UVk0eUhVd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFDYTZnWDBxCjF0V3k5dlFTeGJPSjl4UFNtY3hYN3RjdkhsbEtjWDRoc1dWaVgxS0EvZlJhblBTNFlHOTd6QnQ0aWZEOWNXaTYKcjBzNWpjTUxwcEhENm04WkxDVkNzZjY3Qnk5WUNWUW04dCtoNFI2YS9DZnJBNWUvaU1wZjhwMVhCS0tjNmZTNgpna0QwSjRDejNyZ2RseGdTWWZONi9HaXVDQk02NHRsTllHWWhXNHF2WEp2R3ZWUjJCeXg2cDNvVlJPbG5TUk5UCmFkTkg5bURHN3R6RzErTW1TMmh3YU5aT04waVNYR2dTTXU0M2thSkhCdllEb2lzL2w1MzBxcEV3R2dLTnlyNncKV2lHWEQ1bEVQUmVvRmh5UWZqWFpxajg5RlIxMGdsSHpudTNCaitEcjFldUp3cytxZWpZc0JHQ3krcDJFTURDcgo0ZUdjUWFZWGIzR1lpOHpnQU9laTRGSFlHQlZ3UU5zeFpPN29EOXZlZmRYQnMxVmxYNU8yYmhldVdpUnd6ZnJjClJEZlc4dGhzWmpxMmpScHEzMXBVWjBIUEJhUjFmaDNSSUFhNTFISTJ6RnVUWWV1V29BcHhiUUoyVjZUZ2UzQkoKSVhQWUkwVnJZQWhvcDZIdHl3RThvRFpvZjZOUHBlSmhJeS96Q0tHTVZLZVJob2FscmtrNnR1emNFL1RQbm1wNApjZXV2T0JNZjZpSlM0S1ZTWGFpeERNSlNRMnJjMnJoS2htaHliQnBveDkyclZ5bWdENEdYckdVZFkvZUVQb2FoCmtyYWVzQlA3cjlXZ09xR2ptNFJKaGZkV29tZHFpSTkzQTBBalZna1BZQ1hpOXp3UGNKS2pkai95b09WSStmQnUKQzJ5YXF4UEJCeGZKZVp2OHpMRVAwbjFKdHRpaFVkcXpaeHJCCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                        "certificateUsageMetadata": [
                          {
                            "appName": "venafi app1",
                            "automationMetadata": "automation data 008",
                            "nodeName": "venafi node 007"
                          }
                        ]
                      }
                    ],
                    "overrideBlocklist": true
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CertificateImportRequest2"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificate import response": {
                    "description": "Certificate import response",
                    "summary": "Certificate import",
                    "value": {
                      "certificateInformations": [
                        {
                          "base64Certificate": "MIIIJzCCBg+gAwIBAgIUZS5nnO0FCzj07yrbJrQvsE5Cl3AwDQYJKoZIhvcNAQELBQAwXTELMAkGA1UEBhMCVVMxMDAuBgNVBAoMJ0h5ZHJhbnRJRCAoQXZhbGFuY2hlIENsb3VkIENvcnBvcmF0aW9uKTEcMBoGA1UEAwwTSHlkcmFudElEIFNTTCBDQSBHMzAeFw0yMjA0MjgwNTA4MDBaFw0yMzA0MjgwNTE3MDBaMGYxCzAJBgNVBAYTAlVTMQ0wCwYDVQQIDARVdGFoMRcwFQYDVQQHDA5TYWx0IExha2UgQ2l0eTEVMBMGA1UECgwMVmVuYWZpLCBJbmMuMRgwFgYDVQQDDA9kb2NzLnZlbmFmaS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDI7iaor+e5TYDBfpGKo8+5xg4kaxidRWykCCX9h8m8He8qMbL0MXy9+aUbR1DqYAXjSYAAltc0OKAo4f8+IZSxUcKMJJQ47S9Of8A9n7qO9qPvE6sb9m1z/BveEheb5Al3rXAgXWt915a9ZWIBr4eXsKyQXdbaOVToRyEF2wfkE3eYSu8WrAFIvOpYyDLJjjD5uwPzF4jxyqoIhyyZCSkgP9vMW6fOmxQthRObZ8Bri7eBnDih/7+za5WNMp6mwCzCv2laeAsxG1Rgbppf68vpEWPweHwsvUI481l1KKR80JFHwe2p2G414394eSg6UNGChdKkCstnBZw8/llio6PVAgMBAAGjggPUMIID0DAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFMyi8zit9sVUJzJGxTlfSXITE4B5MHwGCCsGAQUFBwEBBHAwbjBABggrBgEFBQcwAoY0aHR0cDovL3RydXN0LnF1b3ZhZGlzZ2xvYmFsLmNvbS9oeWRyYW50aWRzc2xjYWczLmNydDAqBggrBgEFBQcwAYYeaHR0cDovL29jc3AucXVvdmFkaXNnbG9iYWwuY29tMDQGA1UdEQQtMCuCD2RvY3MudmVuYWZpLmNvbYIYZG9jdW1lbnRhdGlvbi52ZW5hZmkuY29tMF4GA1UdIARXMFUwCAYGZ4EMAQICMEkGDCsGAQQBvlgAA4cEADA5MDcGCCsGAQUFBwIBFitodHRwOi8vd3d3Lmh5ZHJhbnRpZC5jb20vc3VwcG9ydC9yZXBvc2l0b3J5MB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATBDBgNVHR8EPDA6MDigNqA0hjJodHRwOi8vY3JsLnF1b3ZhZGlzZ2xvYmFsLmNvbS9oeWRyYW50aWRzc2xjYWczLmNybDAdBgNVHQ4EFgQUyYIg8Y5LRs+d1rnPnQeYEuKoajAwDgYDVR0PAQH/BAQDAgWgMIIB9gYKKwYBBAHWeQIEAgSCAeYEggHiAeAAdgCzc3cH4YRQ+GOG1gWp3BEJSnktsWcMC4fc8AMOeTalmgAAAYBums69AAAEAwBHMEUCIATNBc9dPYiYvJuFrlEW8zg3R6xIRlPmAXxL6ZlkmS5RAiEAkn5Ld3/4y36Kkdz30LonDA8nIf4cSicOIw1kEt6uGncAdgB6MoxU2LcttiDqOOBSHumEFnAyE4VNO9IrwTpXo1LrUgAAAYBumtG4AAAEAwBHMEUCIAv1DA67lcnJd3i4NWEZtrENS9qaXKoy6Wkf9F4HUwqXAiEA8E0X9fAoDpi/OPVy3/NQuONrqgGO0SAFhYy9n5/69/EAdgCt9776fP8QyIudPZwePhhqtGcpXc+xDCTKhYY069yCigAAAYBums1vAAAEAwBHMEUCIQCPKcONcpeAV6OJDKG8qmmbsSTg5+nB/OCCyN9dp8ZmsgIgYfUPD/qk0GfBF4u9U4/mhZ8sY5og5ufpB7ODCpwi02oAdgA1zxkbv7FsV78PrUxtQsu7ticgJlHqP+Eq76gDwzvWTAAAAYBums9eAAAEAwBHMEUCIGCz0R4zmAdsqWY0QEULso7DJQlGFjs2Kk1cX7kt7ZW0AiEAunRDPLCDpmj4gAHRc/ooRusEM1wpawQAgIPMxQY4yHUwDQYJKoZIhvcNAQELBQADggIBACa6gX0q1tWy9vQSxbOJ9xPSmcxX7tcvHllKcX4hsWViX1KA/fRanPS4YG97zBt4ifD9cWi6r0s5jcMLppHD6m8ZLCVCsf67By9YCVQm8t+h4R6a/CfrA5e/iMpf8p1XBKKc6fS6gkD0J4Cz3rgdlxgSYfN6/GiuCBM64tlNYGYhW4qvXJvGvVR2Byx6p3oVROlnSRNTadNH9mDG7tzG1+MmS2hwaNZON0iSXGgSMu43kaJHBvYDois/l530qpEwGgKNyr6wWiGXD5lEPReoFhyQfjXZqj89FR10glHznu3Bj+Dr1euJws+qejYsBGCy+p2EMDCr4eGcQaYXb3GYi8zgAOei4FHYGBVwQNsxZO7oD9vefdXBs1VlX5O2bheuWiRwzfrcRDfW8thsZjq2jRpq31pUZ0HPBaR1fh3RIAa51HI2zFuTYeuWoApxbQJ2V6Tge3BJIXPYI0VrYAhop6HtywE8oDZof6NPpeJhIy/zCKGMVKeRhoalrkk6tuzcE/TPnmp4ceuvOBMf6iJS4KVSXaixDMJSQ2rc2rhKhmhybBpox92rVymgD4GXrGUdY/eEPoahkraesBP7r9WgOqGjm4RJhfdWomdqiI93A0AjVgkPYCXi9zwPcJKjdj/yoOVI+fBuC2yaqxPBBxfJeZv8zLEP0n1JttihUdqzZxrB",
                          "certificateSource": "USER_IMPORTED",
                          "companyId": "2d558b30-da16-11ed-8e4f-8339a1bc8d58",
                          "fingerprint": "D9D4965F9A116D457FA43FF23605CFCB5277BE38",
                          "id": "4d4e1c30-e2eb-11ed-a644-4fab0ea00b60",
                          "issuerCertificateIds": [
                            "4d4b8420-e2eb-11ed-a644-4fab0ea00b60",
                            "d50a4410-297e-11eb-bc4c-8b24e5a66fb6"
                          ],
                          "managedCertificateId": "4d515080-e2eb-11ed-aed6-79d407efea73"
                        }
                      ],
                      "statistics": {
                        "existed": 0,
                        "failed": 0,
                        "ignored": 0,
                        "imported": 1
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CertificateImportResponse2"
                }
              }
            },
            "description": "Certificates were imported; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Import a set of raw certificates",
        "tags": [
          "Certificate Import"
        ]
      }
    },
    "/outagedetection/v1/certificates/{id}": {
      "get": {
        "description": "Retrieves the details of the certificate that has the specified `id`.",
        "operationId": "certificates_getById",
        "parameters": [
          {
            "description": "Indicates whether response should include nested ownership data (e.g., `owningContainers`).",
            "in": "query",
            "name": "ownershipTree",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "excludeSupersededInstances",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "UUID of a Certificate.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificate details response": {
                    "description": "Certificate details response",
                    "summary": "Certificate details",
                    "value": {
                      "applicationIds": [
                        "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                      ],
                      "authorityKeyIdentifierHash": "27811CFCA803A90E617FA5D47441649608417DD4",
                      "certificateAuthorityAccountId": "2ed72220-da16-11ed-b080-e795c8859d29",
                      "certificateName": "venafi.cloud",
                      "certificateRequestId": "3f675520-dfd8-11ed-82b4-074391f91f8b",
                      "certificateStatus": "ACTIVE",
                      "companyId": "2d558b30-da16-11ed-8e4f-8339a1bc8d58",
                      "encryptionType": "RSA",
                      "extendedKeyUsage": [
                        "1.3.6.1.5.5.7.3.1",
                        "1.3.6.1.5.5.7.3.2"
                      ],
                      "fingerprint": "F3CDE0F7539C331D9EF006092161EC8387320B4B",
                      "id": "3fb83440-dfd8-11ed-b8ab-4788d83ace9f",
                      "instances": [
                        {
                          "applicationIds": [
                            "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                          ],
                          "certificateId": "3fb83440-dfd8-11ed-b8ab-4788d83ace9f",
                          "certificateInstanceId": "3fba3010-dfd8-11ed-b8ab-4788d83ace9f",
                          "certificateSource": "USER_PROVIDED",
                          "deploymentStatus": "SUPERSEDED",
                          "hostname": " ",
                          "instanceChainValidationStatus": [],
                          "ipAddress": "254.254.254.254",
                          "modificationDate": "2023-04-21T00:05:39.397+00:00",
                          "port": 443,
                          "serviceIds": []
                        }
                      ],
                      "issuerC": "US",
                      "issuerCN": [
                        "Dedicated - Venafi Cloud Built-In Intermediate CA - G1"
                      ],
                      "issuerCertificateIds": [
                        "73ff23b0-da21-11ed-befa-05892b4b966e",
                        "73e38560-da21-11ed-befa-05892b4b966e"
                      ],
                      "issuerCertificates": [
                        {
                          "authorityKeyIdentifierHash": "EF4E4297B08CCB96978B672FCD52E166B3DC1DE3",
                          "certificateName": "Dedicated - Venafi Cloud Built-In Intermediate CA - G1",
                          "certificateStatus": "ACTIVE",
                          "companyId": "85d375a0-8038-11e5-bf87-317fe88bb23a",
                          "encryptionType": "RSA",
                          "fingerprint": "5B8E151A0D23B0E72505C09F0563108ACCD64B24",
                          "id": "73ff23b0-da21-11ed-befa-05892b4b966e",
                          "instances": [
                            {
                              "certificateId": "73ff23b0-da21-11ed-befa-05892b4b966e",
                              "certificateInstanceId": "7401e2d0-da21-11ed-befa-05892b4b966e",
                              "deploymentStatus": "SUPERSEDED",
                              "hostname": " ",
                              "instanceChainValidationStatus": [],
                              "ipAddress": "254.254.254.254",
                              "modificationDate": "2023-04-21T00:06:17.625+00:00",
                              "port": 443
                            }
                          ],
                          "issuerC": "US",
                          "issuerCN": [
                            "Dedicated - Venafi Cloud Built-In CA"
                          ],
                          "issuerCertificateIds": [
                            "73e38560-da21-11ed-befa-05892b4b966e"
                          ],
                          "issuerDN": "cn=Dedicated - Venafi Cloud Built-In CA,ou=Built-in,o=Venafi, Inc.,c=US",
                          "issuerOU": [
                            "Built-in"
                          ],
                          "keyStrength": 2048,
                          "keyUsage": [
                            "keyCertSign",
                            "cRLSign"
                          ],
                          "managedCertificateId": "74463ed0-da21-11ed-a63c-d508f08eeaa0",
                          "modificationDate": "2023-04-21T00:06:17.625+00:00",
                          "ocspNoCheck": false,
                          "selfSigned": false,
                          "serialNumber": "1E3DB051E62ACD3FCC15ED326299C692A8F7ECDB",
                          "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                          "signatureHashAlgorithm": "SHA256",
                          "subjectC": "US",
                          "subjectCN": [
                            "Dedicated - Venafi Cloud Built-In Intermediate CA - G1"
                          ],
                          "subjectDN": "cn=Dedicated - Venafi Cloud Built-In Intermediate CA - G1,ou=Built-in,o=Venafi, Inc.,c=US",
                          "subjectKeyIdentifierHash": "27811CFCA803A90E617FA5D47441649608417DD4",
                          "subjectO": "Venafi, Inc.",
                          "subjectOU": [
                            "Built-in"
                          ],
                          "totalActiveInstanceCount": 0,
                          "totalInstanceCount": 1,
                          "validityEnd": "2028-04-11T16:13:52.000+00:00",
                          "validityStart": "2023-04-13T16:13:22.000+00:00",
                          "versionType": "CURRENT"
                        },
                        {
                          "authorityKeyIdentifierHash": "EF4E4297B08CCB96978B672FCD52E166B3DC1DE3",
                          "certificateName": "Dedicated - Venafi Cloud Built-In CA",
                          "certificateStatus": "ACTIVE",
                          "companyId": "85d375a0-8038-11e5-bf87-317fe88bb23a",
                          "encryptionType": "RSA",
                          "fingerprint": "AE38ABFB40DBB9309E1A6D9F08CF8C02C06F6D85",
                          "id": "73e38560-da21-11ed-befa-05892b4b966e",
                          "instances": [
                            {
                              "certificateId": "73e38560-da21-11ed-befa-05892b4b966e",
                              "certificateInstanceId": "73ee0cb0-da21-11ed-befa-05892b4b966e",
                              "deploymentStatus": "SUPERSEDED",
                              "hostname": " ",
                              "instanceChainValidationStatus": [],
                              "ipAddress": "254.254.254.254",
                              "modificationDate": "2023-04-21T00:06:17.601+00:00",
                              "port": 443
                            }
                          ],
                          "issuerC": "US",
                          "issuerCN": [
                            "Dedicated - Venafi Cloud Built-In CA"
                          ],
                          "issuerCertificateIds": [],
                          "issuerDN": "cn=Dedicated - Venafi Cloud Built-In CA,ou=Built-in,o=Venafi, Inc.,c=US",
                          "issuerOU": [
                            "Built-in"
                          ],
                          "keyStrength": 2048,
                          "keyUsage": [
                            "keyCertSign",
                            "cRLSign"
                          ],
                          "managedCertificateId": "740f5050-da21-11ed-a63c-d508f08eeaa0",
                          "modificationDate": "2023-04-21T00:06:17.601+00:00",
                          "ocspNoCheck": false,
                          "selfSigned": true,
                          "serialNumber": "080C053247AEFCA09FFF2FE6B4B5AEE6DDA65269",
                          "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                          "signatureHashAlgorithm": "SHA256",
                          "subjectC": "US",
                          "subjectCN": [
                            "Dedicated - Venafi Cloud Built-In CA"
                          ],
                          "subjectDN": "cn=Dedicated - Venafi Cloud Built-In CA,ou=Built-in,o=Venafi, Inc.,c=US",
                          "subjectKeyIdentifierHash": "EF4E4297B08CCB96978B672FCD52E166B3DC1DE3",
                          "subjectO": "Venafi, Inc.",
                          "subjectOU": [
                            "Built-in"
                          ],
                          "totalActiveInstanceCount": 0,
                          "totalInstanceCount": 1,
                          "validityEnd": "2033-04-10T16:13:51.000+00:00",
                          "validityStart": "2023-04-13T16:13:21.000+00:00",
                          "versionType": "CURRENT"
                        }
                      ],
                      "issuerDN": "cn=Dedicated - Venafi Cloud Built-In Intermediate CA - G1,ou=Built-in,o=Venafi, Inc.,c=US",
                      "issuerOU": [
                        "Built-in"
                      ],
                      "keyStrength": 4096,
                      "keyUsage": [
                        "digitalSignature",
                        "keyEncipherment",
                        "keyAgreement"
                      ],
                      "managedCertificateId": "3f3e7060-dfd8-11ed-8850-f18176fc5513",
                      "modificationDate": "2023-04-21T00:05:39.397+00:00",
                      "ocspNoCheck": false,
                      "selfSigned": false,
                      "serialNumber": "173B8702B939C6E3FF702A1DE8386BF35A24A8B7",
                      "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                      "signatureHashAlgorithm": "SHA256",
                      "subjectAlternativeNameDns": [
                        "venafi.com"
                      ],
                      "subjectAlternativeNamesByType": {
                        "dNSName": [
                          "venafi.com"
                        ]
                      },
                      "subjectC": "US",
                      "subjectCN": [
                        "venafi.cloud"
                      ],
                      "subjectDN": "cn=venafi.cloud,ou=dev,o=Venafi,c=US,st=Utah,l=Salt Lake City",
                      "subjectKeyIdentifierHash": "C1EBF01EB166455AAFB6B8D7EFB5CDF78E7A930B",
                      "subjectL": "Salt Lake City",
                      "subjectO": "Venafi",
                      "subjectOU": [
                        "dev"
                      ],
                      "subjectST": "Utah",
                      "totalActiveInstanceCount": 0,
                      "totalInstanceCount": 1,
                      "validityEnd": "2023-07-10T00:05:39.000+00:00",
                      "validityStart": "2023-04-21T00:05:09.000+00:00",
                      "versionType": "CURRENT"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCertificateInformation"
                }
              }
            },
            "description": "Certificate was found; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Certificate was not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get a certificate's details",
        "tags": [
          "Certificates"
        ]
      }
    },
    "/outagedetection/v1/certificates/{id}/contents": {
      "get": {
        "description": "Exports the certificate that has the specified `id` in PEM or DER format. Chain CA certificates are included for PEM format when `chainOrder` is EE_FIRST or ROOT_FIRST.",
        "operationId": "certificates_getContentsById",
        "parameters": [
          {
            "description": "Specify an 'accept' header parameter's value",
            "in": "header",
            "name": "Accept",
            "schema": {
              "enum": [
                "text/plain",
                "application/octet-stream"
              ],
              "type": "string"
            }
          },
          {
            "description": "UUID of a Certificate.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Format of certificate in response.",
            "in": "query",
            "name": "format",
            "schema": {
              "enum": [
                "PEM",
                "DER"
              ],
              "type": "string"
            }
          },
          {
            "description": "Order of certificates in response.",
            "in": "query",
            "name": "chainOrder",
            "schema": {
              "enum": [
                "EE_ONLY",
                "EE_FIRST",
                "ROOT_FIRST"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Raw certificate in response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Certificate not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Download a certificate",
        "tags": [
          "Certificates"
        ]
      }
    },
    "/outagedetection/v1/certificates/validation": {
      "post": {
        "description": "Submits one or more certificates for TLS validation.",
        "operationId": "certificates_validation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateValidationRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateValidationResponse"
                }
              }
            },
            "description": "Certificates submitted for validation response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Request validation for a set of certificates",
        "tags": [
          "Certificates"
        ]
      }
    },
    "/outagedetection/v1/certificates/retirement": {
      "post": {
        "description": "This endpoint retires one or more certificates by using the **certificateIds** parameter to match a specified value.",
        "operationId": "certificateretirement_retireCertificates",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Certificate retirement request": {
                  "description": "Certificate retirement request",
                  "summary": "Certificate retirement",
                  "value": {
                    "addToBlocklist": false,
                    "certificateIds": [
                      "3fb83440-dfd8-11ed-b8ab-4788d83ace9f"
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CertificateRetirementRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificate retirement response": {
                    "description": "Certificate retirement response",
                    "summary": "Certificate retirement",
                    "value": {
                      "certificates": [
                        {
                          "applicationIds": [
                            "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                          ],
                          "authorityKeyIdentifierHash": "27811CFCA803A90E617FA5D47441649608417DD4",
                          "certificateAuthorityAccountId": "2ed72220-da16-11ed-b080-e795c8859d29",
                          "certificateName": "venafi.cloud",
                          "certificateRequestId": "3f675520-dfd8-11ed-82b4-074391f91f8b",
                          "certificateStatus": "RETIRED",
                          "companyId": "2d558b30-da16-11ed-8e4f-8339a1bc8d58",
                          "encryptionType": "RSA",
                          "extendedKeyUsage": [
                            "1.3.6.1.5.5.7.3.1",
                            "1.3.6.1.5.5.7.3.2"
                          ],
                          "fingerprint": "F3CDE0F7539C331D9EF006092161EC8387320B4B",
                          "id": "3fb83440-dfd8-11ed-b8ab-4788d83ace9f",
                          "instances": [
                            {
                              "applicationIds": [
                                "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                              ],
                              "certificateId": "3fb83440-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateInstanceId": "3fba3010-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateSource": "USER_PROVIDED",
                              "deploymentStatus": "SUPERSEDED",
                              "hostname": " ",
                              "instanceChainValidationStatus": [],
                              "ipAddress": "254.254.254.254",
                              "modificationDate": "2023-04-24T17:36:04.576+00:00",
                              "port": 443
                            }
                          ],
                          "issuerC": "US",
                          "issuerCN": [
                            "Dedicated - Venafi Cloud Built-In Intermediate CA - G1"
                          ],
                          "issuerCertificateIds": [
                            "73ff23b0-da21-11ed-befa-05892b4b966e",
                            "73e38560-da21-11ed-befa-05892b4b966e"
                          ],
                          "issuerDN": "cn=Dedicated - Venafi Cloud Built-In Intermediate CA - G1,ou=Built-in,o=Venafi, Inc.,c=US",
                          "issuerOU": [
                            "Built-in"
                          ],
                          "keyStrength": 4096,
                          "keyUsage": [
                            "digitalSignature",
                            "keyEncipherment",
                            "keyAgreement"
                          ],
                          "managedCertificateId": "3f3e7060-dfd8-11ed-8850-f18176fc5513",
                          "modificationDate": "2023-04-24T17:36:04.451+00:00",
                          "ocspNoCheck": false,
                          "selfSigned": false,
                          "serialNumber": "173B8702B939C6E3FF702A1DE8386BF35A24A8B7",
                          "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                          "signatureHashAlgorithm": "SHA256",
                          "statusModificationDate": "2023-04-24T17:36:04.451+00:00",
                          "statusModificationUserId": "309e4d90-da16-11ed-8e4f-8339a1bc8d58",
                          "subjectAlternativeNameDns": [
                            "venafi.com"
                          ],
                          "subjectAlternativeNamesByType": {
                            "dNSName": [
                              "venafi.com"
                            ]
                          },
                          "subjectC": "US",
                          "subjectCN": [
                            "venafi.cloud"
                          ],
                          "subjectDN": "cn=venafi.cloud,ou=dev,o=Venafi,c=US,st=Utah,l=Salt Lake City",
                          "subjectKeyIdentifierHash": "C1EBF01EB166455AAFB6B8D7EFB5CDF78E7A930B",
                          "subjectL": "Salt Lake City",
                          "subjectO": "Venafi",
                          "subjectOU": [
                            "dev"
                          ],
                          "subjectST": "Utah",
                          "totalActiveInstanceCount": 0,
                          "totalInstanceCount": 1,
                          "validityEnd": "2023-07-10T00:05:39.000+00:00",
                          "validityStart": "2023-04-21T00:05:09.000+00:00",
                          "versionType": "CURRENT"
                        }
                      ],
                      "count": 1
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CertificateResponse"
                }
              }
            },
            "description": "Certificate retirement response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request conditions failed."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request conditions failed."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retire certificates",
        "tags": [
          "Certificates"
        ]
      }
    },
    "/outagedetection/v1/certificates/recovery": {
      "post": {
        "description": "Recover the certificates specified by `certificateIds`, including any previous versions of those certificates.",
        "operationId": "certificateretirement_recoverCertificates",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Certificate recovery request": {
                  "description": "Certificate recovery request",
                  "summary": "Certificate recovery",
                  "value": {
                    "applicationIds": [
                      "9303e940-df9d-11ed-8850-f18176fc5513"
                    ],
                    "certificateIds": [
                      "568a0810-dfd8-11ed-b8ab-4788d83ace9f"
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CertificateRecoveryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificate recovery details": {
                    "description": "Certificate recovery details",
                    "summary": "Certificate recovered details",
                    "value": {
                      "certificates": [
                        {
                          "applicationIds": [
                            "9303e940-df9d-11ed-8850-f18176fc5513"
                          ],
                          "authorityKeyIdentifierHash": "27811CFCA803A90E617FA5D47441649608417DD4",
                          "certificateAuthorityAccountId": "2ed72220-da16-11ed-b080-e795c8859d29",
                          "certificateName": "venafi.cloud",
                          "certificateRequestId": "567c4c70-dfd8-11ed-82b4-074391f91f8b",
                          "certificateStatus": "ACTIVE",
                          "companyId": "2d558b30-da16-11ed-8e4f-8339a1bc8d58",
                          "encryptionType": "RSA",
                          "extendedKeyUsage": [
                            "1.3.6.1.5.5.7.3.1",
                            "1.3.6.1.5.5.7.3.2"
                          ],
                          "fingerprint": "E8635EE689F6DB249CAA284FD8DDE7E09DEE6F00",
                          "id": "568a0810-dfd8-11ed-b8ab-4788d83ace9f",
                          "instances": [
                            {
                              "applicationIds": [
                                "9303e940-df9d-11ed-8850-f18176fc5513"
                              ],
                              "certificateId": "568a0810-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateInstanceId": "568af270-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateSource": "USER_PROVIDED",
                              "deploymentStatus": "SUPERSEDED",
                              "hostname": " ",
                              "instanceChainValidationStatus": [],
                              "ipAddress": "254.254.254.254",
                              "modificationDate": "2023-04-21T00:52:19.940+00:00",
                              "port": 443
                            }
                          ],
                          "issuerC": "US",
                          "issuerCN": [
                            "Dedicated - Venafi Cloud Built-In Intermediate CA - G1"
                          ],
                          "issuerCertificateIds": [
                            "73ff23b0-da21-11ed-befa-05892b4b966e",
                            "73e38560-da21-11ed-befa-05892b4b966e"
                          ],
                          "issuerDN": "cn=Dedicated - Venafi Cloud Built-In Intermediate CA - G1,ou=Built-in,o=Venafi, Inc.,c=US",
                          "issuerOU": [
                            "Built-in"
                          ],
                          "keyStrength": 4096,
                          "keyUsage": [
                            "digitalSignature",
                            "keyEncipherment",
                            "keyAgreement"
                          ],
                          "managedCertificateId": "5677dfa0-dfd8-11ed-8850-f18176fc5513",
                          "modificationDate": "2023-04-21T00:52:56.620+00:00",
                          "ocspNoCheck": false,
                          "selfSigned": false,
                          "serialNumber": "6CC8CB1433B57D10353284EEC09E5D2D2153F4DC",
                          "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                          "signatureHashAlgorithm": "SHA256",
                          "statusModificationDate": "2023-04-21T00:52:56.620+00:00",
                          "statusModificationUserId": "309e4d90-da16-11ed-8e4f-8339a1bc8d58",
                          "subjectAlternativeNameDns": [
                            "venafi.cloud"
                          ],
                          "subjectAlternativeNamesByType": {
                            "dNSName": [
                              "venafi.cloud"
                            ]
                          },
                          "subjectC": "US",
                          "subjectCN": [
                            "venafi.cloud"
                          ],
                          "subjectDN": "cn=venafi.cloud,ou=qa,o=Venafi,c=US,st=Utah,l=Salt Lake City",
                          "subjectKeyIdentifierHash": "ACCCCB504BF86D1FD94F6D9DA2230A2B454EB5FC",
                          "subjectL": "Salt Lake City",
                          "subjectO": "Venafi",
                          "subjectOU": [
                            "qa"
                          ],
                          "subjectST": "Utah",
                          "totalActiveInstanceCount": 0,
                          "totalInstanceCount": 1,
                          "validityEnd": "2023-07-10T00:06:17.000+00:00",
                          "validityStart": "2023-04-21T00:05:47.000+00:00",
                          "versionType": "CURRENT"
                        }
                      ],
                      "count": 1
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CertificateResponse"
                }
              }
            },
            "description": "Certificates were recovered. Total number and details are in the response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Recover a set of certificates",
        "tags": [
          "Certificates"
        ]
      }
    },
    "/outagedetection/v1/certificates/deletion": {
      "post": {
        "description": "Permanently deletes the retired certificates specified by `certificateIds` from the inventory.",
        "operationId": "certificateretirement_deleteCertificates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateDeletionRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Certificates were deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Delete a set of retired certificates",
        "tags": [
          "Certificates"
        ]
      }
    },
    "/outagedetection/v1/certificatesearch": {
      "post": {
        "description": "This endpoint retrieves certificate data according to specified search criteria based on commonly used field search parameters. Some examples are `signatureHashAlgorithm`, `validityEnd`, and `issuerCN`. For more information, see [common search parameters](https://docs.venafi.cloud/api/about-api-search-fields/).\n",
        "operationId": "certificates_search_getByExpression",
        "parameters": [
          {
            "in": "query",
            "name": "ownershipTree",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "excludeSupersededInstances",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Certificate search request by expression": {
                  "description": "Certificate search request by expression",
                  "summary": "Certificate search by expression",
                  "value": {
                    "expression": {
                      "operands": [
                        {
                          "field": "certificateName",
                          "operator": "EQ",
                          "value": "venafi.cloud"
                        },
                        {
                          "field": "certificateStatus",
                          "operator": "EQ",
                          "value": "RETIRED"
                        }
                      ],
                      "operator": "AND"
                    },
                    "ordering": {
                      "orders": [
                        {
                          "direction": "DESC",
                          "field": "certificateName"
                        }
                      ]
                    },
                    "paging": {
                      "pageNumber": 0,
                      "pageSize": 10
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Filter2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificate details response": {
                    "description": "Certificate details response",
                    "summary": "Certificate details",
                    "value": {
                      "certificates": [
                        {
                          "applicationIds": [
                            "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                          ],
                          "authorityKeyIdentifierHash": "27811CFCA803A90E617FA5D47441649608417DD4",
                          "certificateAuthorityAccountId": "2ed72220-da16-11ed-b080-e795c8859d29",
                          "certificateName": "venafi.cloud",
                          "certificateRequestId": "3f675520-dfd8-11ed-82b4-074391f91f8b",
                          "certificateStatus": "RETIRED",
                          "companyId": "2d558b30-da16-11ed-8e4f-8339a1bc8d58",
                          "encryptionType": "RSA",
                          "extendedKeyUsage": [
                            "1.3.6.1.5.5.7.3.1",
                            "1.3.6.1.5.5.7.3.2"
                          ],
                          "fingerprint": "F3CDE0F7539C331D9EF006092161EC8387320B4B",
                          "id": "3fb83440-dfd8-11ed-b8ab-4788d83ace9f",
                          "instances": [
                            {
                              "applicationIds": [
                                "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                              ],
                              "certificateId": "3fb83440-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateInstanceId": "3fba3010-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateSource": "USER_PROVIDED",
                              "deploymentStatus": "SUPERSEDED",
                              "hostname": " ",
                              "instanceChainValidationStatus": [],
                              "ipAddress": "254.254.254.254",
                              "modificationDate": "2023-04-24T17:36:04.576+00:00",
                              "port": 443
                            }
                          ],
                          "issuerC": "US",
                          "issuerCN": [
                            "Dedicated - Venafi Cloud Built-In Intermediate CA - G1"
                          ],
                          "issuerCertificateIds": [
                            "73ff23b0-da21-11ed-befa-05892b4b966e",
                            "73e38560-da21-11ed-befa-05892b4b966e"
                          ],
                          "issuerDN": "cn=Dedicated - Venafi Cloud Built-In Intermediate CA - G1,ou=Built-in,o=Venafi, Inc.,c=US",
                          "issuerOU": [
                            "Built-in"
                          ],
                          "keyStrength": 4096,
                          "keyUsage": [
                            "digitalSignature",
                            "keyEncipherment",
                            "keyAgreement"
                          ],
                          "managedCertificateId": "3f3e7060-dfd8-11ed-8850-f18176fc5513",
                          "modificationDate": "2023-04-24T17:36:04.451+00:00",
                          "ocspNoCheck": false,
                          "selfSigned": false,
                          "serialNumber": "173B8702B939C6E3FF702A1DE8386BF35A24A8B7",
                          "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                          "signatureHashAlgorithm": "SHA256",
                          "statusModificationDate": "2023-04-24T17:36:04.451+00:00",
                          "statusModificationUserId": "309e4d90-da16-11ed-8e4f-8339a1bc8d58",
                          "subjectAlternativeNameDns": [
                            "venafi.com"
                          ],
                          "subjectAlternativeNamesByType": {
                            "dNSName": [
                              "venafi.com"
                            ]
                          },
                          "subjectC": "US",
                          "subjectCN": [
                            "venafi.cloud"
                          ],
                          "subjectDN": "cn=venafi.cloud,ou=dev,o=Venafi,c=US,st=Utah,l=Salt Lake City",
                          "subjectKeyIdentifierHash": "C1EBF01EB166455AAFB6B8D7EFB5CDF78E7A930B",
                          "subjectL": "Salt Lake City",
                          "subjectO": "Venafi",
                          "subjectOU": [
                            "dev"
                          ],
                          "subjectST": "Utah",
                          "totalActiveInstanceCount": 0,
                          "totalInstanceCount": 1,
                          "validityEnd": "2023-07-10T00:05:39.000+00:00",
                          "validityStart": "2023-04-21T00:05:09.000+00:00",
                          "versionType": "CURRENT"
                        }
                      ],
                      "count": 1
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CertificateResponse"
                }
              },
              "text/csv": {
                "examples": {
                  "Certificate details response": {
                    "description": "Certificate details response",
                    "summary": "Certificate details",
                    "value": {
                      "certificates": [
                        {
                          "applicationIds": [
                            "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                          ],
                          "authorityKeyIdentifierHash": "27811CFCA803A90E617FA5D47441649608417DD4",
                          "certificateAuthorityAccountId": "2ed72220-da16-11ed-b080-e795c8859d29",
                          "certificateName": "venafi.cloud",
                          "certificateRequestId": "3f675520-dfd8-11ed-82b4-074391f91f8b",
                          "certificateStatus": "RETIRED",
                          "companyId": "2d558b30-da16-11ed-8e4f-8339a1bc8d58",
                          "encryptionType": "RSA",
                          "extendedKeyUsage": [
                            "1.3.6.1.5.5.7.3.1",
                            "1.3.6.1.5.5.7.3.2"
                          ],
                          "fingerprint": "F3CDE0F7539C331D9EF006092161EC8387320B4B",
                          "id": "3fb83440-dfd8-11ed-b8ab-4788d83ace9f",
                          "instances": [
                            {
                              "applicationIds": [
                                "47c9d920-da21-11ed-a63c-d508f08eeaa0"
                              ],
                              "certificateId": "3fb83440-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateInstanceId": "3fba3010-dfd8-11ed-b8ab-4788d83ace9f",
                              "certificateSource": "USER_PROVIDED",
                              "deploymentStatus": "SUPERSEDED",
                              "hostname": " ",
                              "instanceChainValidationStatus": [],
                              "ipAddress": "254.254.254.254",
                              "modificationDate": "2023-04-24T17:36:04.576+00:00",
                              "port": 443
                            }
                          ],
                          "issuerC": "US",
                          "issuerCN": [
                            "Dedicated - Venafi Cloud Built-In Intermediate CA - G1"
                          ],
                          "issuerCertificateIds": [
                            "73ff23b0-da21-11ed-befa-05892b4b966e",
                            "73e38560-da21-11ed-befa-05892b4b966e"
                          ],
                          "issuerDN": "cn=Dedicated - Venafi Cloud Built-In Intermediate CA - G1,ou=Built-in,o=Venafi, Inc.,c=US",
                          "issuerOU": [
                            "Built-in"
                          ],
                          "keyStrength": 4096,
                          "keyUsage": [
                            "digitalSignature",
                            "keyEncipherment",
                            "keyAgreement"
                          ],
                          "managedCertificateId": "3f3e7060-dfd8-11ed-8850-f18176fc5513",
                          "modificationDate": "2023-04-24T17:36:04.451+00:00",
                          "ocspNoCheck": false,
                          "selfSigned": false,
                          "serialNumber": "173B8702B939C6E3FF702A1DE8386BF35A24A8B7",
                          "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                          "signatureHashAlgorithm": "SHA256",
                          "statusModificationDate": "2023-04-24T17:36:04.451+00:00",
                          "statusModificationUserId": "309e4d90-da16-11ed-8e4f-8339a1bc8d58",
                          "subjectAlternativeNameDns": [
                            "venafi.com"
                          ],
                          "subjectAlternativeNamesByType": {
                            "dNSName": [
                              "venafi.com"
                            ]
                          },
                          "subjectC": "US",
                          "subjectCN": [
                            "venafi.cloud"
                          ],
                          "subjectDN": "cn=venafi.cloud,ou=dev,o=Venafi,c=US,st=Utah,l=Salt Lake City",
                          "subjectKeyIdentifierHash": "C1EBF01EB166455AAFB6B8D7EFB5CDF78E7A930B",
                          "subjectL": "Salt Lake City",
                          "subjectO": "Venafi",
                          "subjectOU": [
                            "dev"
                          ],
                          "subjectST": "Utah",
                          "totalActiveInstanceCount": 0,
                          "totalInstanceCount": 1,
                          "validityEnd": "2023-07-10T00:05:39.000+00:00",
                          "validityStart": "2023-04-21T00:05:09.000+00:00",
                          "versionType": "CURRENT"
                        }
                      ],
                      "count": 1
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CertificateResponse"
                }
              }
            },
            "description": "Certificate response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request conditions failed."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request conditions failed."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve certificate data matching search criteria",
        "tags": [
          "Certificates"
        ]
      }
    },
    "/outagedetection/v1/certificateinstances": {
      "get": {
        "description": "Use this endpoint allows you to retrieve certificate instances according to specified criteria. Total certificate instances are the sum of the number of certificate installations, plus the total number of certificates that have no installations. Trusted CA certificates are not counted. For more information, see [certificate instances](https://docs.venafi.cloud/CSH_view_instances).\n\nUse query parameters to limit your search based on certificate criteria.",
        "operationId": "certificateinstances_getAll",
        "parameters": [
          {
            "in": "query",
            "name": "source",
            "schema": {
              "enum": [
                "UNKNOWN",
                "USER_PROVIDED",
                "USER_IMPORTED",
                "USER_SCAN",
                "TRUSTNET_SCAN",
                "ON_PREM_CA_IMPORT",
                "EXTERNAL_CA_IMPORT",
                "FILE_IMPORT",
                "EXTERNAL_SCAN",
                "DOMAIN_SCAN",
                "SMART_SCAN_INTERNAL",
                "SMART_SCAN_EXTERNAL",
                "SMART_VALIDATION_INTERNAL",
                "SMART_VALIDATION_EXTERNAL",
                "MACHINE_DISCOVERY",
                "KUBERNETES_DISCOVERY",
                "AWS_DISCOVERY",
                "AZURE_DISCOVERY",
                "GCP_DISCOVERY"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ipAddress",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "hostname",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificate instances details response": {
                    "description": "Certificate instances details response",
                    "summary": "Certificate instance details",
                    "value": {
                      "count": 2,
                      "instances": [
                        {
                          "certificate": {
                            "authorityKeyIdentifierHash": "3CD6AEAA77686C3B677FF6CBBE8BD051CC0AEB8A",
                            "certificateName": "www.venafi.com",
                            "certificateStatus": "ACTIVE",
                            "companyId": "062a5e50-a8d6-11ed-afc9-45c12cf499bf",
                            "encryptionType": "RSA",
                            "extendedKeyUsage": [
                              "1.3.6.1.5.5.7.3.1",
                              "1.3.6.1.5.5.7.3.2"
                            ],
                            "fingerprint": "99D89424CAF4AF24147898276FAF2AD1C360B540",
                            "id": "d2516ca0-a8d7-12ed-9c90-87a729edc082",
                            "issuerC": "US",
                            "issuerCN": [
                              "HydrantID Server CA O1"
                            ],
                            "issuerCertificateIds": [
                              "d24ed490-a8d7-11ed-9t90-87a729edc082",
                              "d5636090-297e-11ea-bc4c-8b24e5a66fb6"
                            ],
                            "issuerDN": "cn=HydrantID Server CA O1,ou=HydrantID Trusted Certificate Service,o=IdenTrust,c=US",
                            "issuerOU": [
                              "HydrantID Trusted Certificate Service"
                            ],
                            "keyStrength": 2048,
                            "keyUsage": [
                              "digitalSignature",
                              "keyEncipherment"
                            ],
                            "managedCertificateId": "d3fgafd0-a8d7-11ed-96b6-1778d4537ec7",
                            "modificationDate": "2023-02-10T00:14:07.509+00:00",
                            "ocspNoCheck": false,
                            "selfSigned": false,
                            "serialNumber": "440185A2A93E676BEA5BBC65619B333D",
                            "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                            "signatureHashAlgorithm": "SHA256",
                            "subjectAlternativeNameDns": [
                              "venafi.com",
                              "www.venafi.com"
                            ],
                            "subjectAlternativeNamesByType": {
                              "dNSName": [
                                "venafi.com",
                                "www.venafi.com"
                              ]
                            },
                            "subjectC": "US",
                            "subjectCN": [
                              "www.venafi.com"
                            ],
                            "subjectDN": "cn=www.venafi.com,o=Venafi Inc,c=US,st=Utah,l=Salt Lake City",
                            "subjectKeyIdentifierHash": "75FFED443D57C47D3C0ED43EFC4CF82217AB729A",
                            "subjectL": "Salt Lake City",
                            "subjectO": "Venafi Inc",
                            "subjectST": "Utah",
                            "validityEnd": "2024-01-06T21:06:58.000+00:00",
                            "validityStart": "2023-01-11T21:07:58.000+00:00",
                            "versionType": "CURRENT"
                          },
                          "certificateId": "d2516ca0-8dd7-11ed-9c90-87a729edc082",
                          "certificateInstanceId": "d2522ff0-dsd7-11ed-9c90-87a729edc082",
                          "certificateSource": "USER_SCAN",
                          "deploymentStatus": "IN_USE",
                          "hostname": "venafi.com",
                          "instanceChainValidationStatus": [
                            "OK"
                          ],
                          "ipAddress": "76.76.21.22",
                          "lastScanDate": "2023-02-10T00:14:05.854+00:00",
                          "lastValidatedAttempt": "2023-02-10T00:14:05.922+00:00",
                          "modificationDate": "2023-02-10T00:14:07.509+00:00",
                          "port": 443,
                          "serviceIds": [
                            "be7447c0-a8e3-11ed-bdca-d5b837a24ba9"
                          ],
                          "sslProtocols": [
                            "TLSv1.3",
                            "TLSv1.2"
                          ],
                          "sslValidationErrorArguments": [],
                          "sslValidationStatus": "OK"
                        },
                        {
                          "certificate": {
                            "authorityKeyIdentifierHash": "DD3C9ABA215BCA96FB8C1CDA555B7D1BFC26DF3D",
                            "certificateName": "venafi.cloud",
                            "certificateStatus": "ACTIVE",
                            "companyId": "06285e50-a8d6-11ed-afc9-45c12cf499bf",
                            "encryptionType": "RSA",
                            "extendedKeyUsage": [
                              "1.3.6.1.5.5.7.3.1",
                              "1.3.6.1.5.5.7.3.2"
                            ],
                            "fingerprint": "8BB7A7669BD689F98FFE90B0992D90C006A005A6",
                            "id": "d21f8730-a8d7-11ed-9c90-87a729edc082",
                            "issuerC": "US",
                            "issuerCN": [
                              "Amazon"
                            ],
                            "issuerCertificateIds": [
                              "d21a7e20-a8d3-11ed-9c90-87a729edc082",
                              "d58eb650-2972-11eb-bc4c-8b24e5a66fb6"
                            ],
                            "issuerDN": "cn=Amazon,ou=Server CA 1B,o=Amazon,c=US",
                            "issuerOU": [
                              "Server CA 1B"
                            ],
                            "keyStrength": 2048,
                            "keyUsage": [
                              "digitalSignature",
                              "keyEncipherment"
                            ],
                            "managedCertificateId": "d2cRfc30-a8d7-11ed-96b6-1778d4537ec7",
                            "modificationDate": "2023-02-10T00:14:06.011+00:00",
                            "ocspNoCheck": false,
                            "selfSigned": false,
                            "serialNumber": "047LL5D239595A32F91E83D94C8FFF7B",
                            "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                            "signatureHashAlgorithm": "SHA256",
                            "subjectAlternativeNameDns": [
                              "venafi.cloud",
                              "www.venafi.cloud",
                              "ui.venafi.cloud",
                              "us1.venafi.cloud",
                              "ui.us1.venafi.cloud"
                            ],
                            "subjectAlternativeNamesByType": {
                              "dNSName": [
                                "venafi.cloud",
                                "www.venafi.cloud",
                                "ui.venafi.cloud",
                                "us1.venafi.cloud",
                                "ui.us1.venafi.cloud"
                              ]
                            },
                            "subjectCN": [
                              "venafi.cloud"
                            ],
                            "subjectDN": "cn=venafi.cloud",
                            "subjectKeyIdentifierHash": "BBCDA66901E1F7EE4723DD347643E7F2079DC14D",
                            "validityEnd": "2024-01-30T23:59:59.000+00:00",
                            "validityStart": "2023-01-01T00:00:00.000+00:00",
                            "versionType": "CURRENT"
                          },
                          "certificateId": "d21f8790-a8d7-11ed-9c90-87a729edc082",
                          "certificateInstanceId": "d233e820-a8d7-11ed-9c90-87a729edc082",
                          "certificateSource": "USER_SCAN",
                          "deploymentStatus": "IN_USE",
                          "hostname": "venafi.cloud",
                          "instanceChainValidationStatus": [
                            "OK"
                          ],
                          "ipAddress": "11.35.125.124",
                          "lastScanDate": "2023-02-10T00:14:03.302+00:00",
                          "lastValidatedAttempt": "2023-02-10T00:14:04.014+00:00",
                          "modificationDate": "2023-02-10T00:14:06.011+00:00",
                          "port": 443,
                          "serviceIds": [
                            "be7447c0-a8d8-11ed-bdca-d5b837a24ba9"
                          ],
                          "sslProtocols": [
                            "TLSv1.3",
                            "TLSv1.2"
                          ],
                          "sslValidationErrorArguments": [],
                          "sslValidationStatus": "OK"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCertificateInstanceResponse"
                }
              },
              "text/csv": {
                "examples": {
                  "Certificate instances details response": {
                    "description": "Certificate instances details response",
                    "summary": "Certificate instance details",
                    "value": {
                      "count": 2,
                      "instances": [
                        {
                          "certificate": {
                            "authorityKeyIdentifierHash": "3CD6AEAA77686C3B677FF6CBBE8BD051CC0AEB8A",
                            "certificateName": "www.venafi.com",
                            "certificateStatus": "ACTIVE",
                            "companyId": "062a5e50-a8d6-11ed-afc9-45c12cf499bf",
                            "encryptionType": "RSA",
                            "extendedKeyUsage": [
                              "1.3.6.1.5.5.7.3.1",
                              "1.3.6.1.5.5.7.3.2"
                            ],
                            "fingerprint": "99D89424CAF4AF24147898276FAF2AD1C360B540",
                            "id": "d2516ca0-a8d7-12ed-9c90-87a729edc082",
                            "issuerC": "US",
                            "issuerCN": [
                              "HydrantID Server CA O1"
                            ],
                            "issuerCertificateIds": [
                              "d24ed490-a8d7-11ed-9t90-87a729edc082",
                              "d5636090-297e-11ea-bc4c-8b24e5a66fb6"
                            ],
                            "issuerDN": "cn=HydrantID Server CA O1,ou=HydrantID Trusted Certificate Service,o=IdenTrust,c=US",
                            "issuerOU": [
                              "HydrantID Trusted Certificate Service"
                            ],
                            "keyStrength": 2048,
                            "keyUsage": [
                              "digitalSignature",
                              "keyEncipherment"
                            ],
                            "managedCertificateId": "d3fgafd0-a8d7-11ed-96b6-1778d4537ec7",
                            "modificationDate": "2023-02-10T00:14:07.509+00:00",
                            "ocspNoCheck": false,
                            "selfSigned": false,
                            "serialNumber": "440185A2A93E676BEA5BBC65619B333D",
                            "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                            "signatureHashAlgorithm": "SHA256",
                            "subjectAlternativeNameDns": [
                              "venafi.com",
                              "www.venafi.com"
                            ],
                            "subjectAlternativeNamesByType": {
                              "dNSName": [
                                "venafi.com",
                                "www.venafi.com"
                              ]
                            },
                            "subjectC": "US",
                            "subjectCN": [
                              "www.venafi.com"
                            ],
                            "subjectDN": "cn=www.venafi.com,o=Venafi Inc,c=US,st=Utah,l=Salt Lake City",
                            "subjectKeyIdentifierHash": "75FFED443D57C47D3C0ED43EFC4CF82217AB729A",
                            "subjectL": "Salt Lake City",
                            "subjectO": "Venafi Inc",
                            "subjectST": "Utah",
                            "validityEnd": "2024-01-06T21:06:58.000+00:00",
                            "validityStart": "2023-01-11T21:07:58.000+00:00",
                            "versionType": "CURRENT"
                          },
                          "certificateId": "d2516ca0-8dd7-11ed-9c90-87a729edc082",
                          "certificateInstanceId": "d2522ff0-dsd7-11ed-9c90-87a729edc082",
                          "certificateSource": "USER_SCAN",
                          "deploymentStatus": "IN_USE",
                          "hostname": "venafi.com",
                          "instanceChainValidationStatus": [
                            "OK"
                          ],
                          "ipAddress": "76.76.21.22",
                          "lastScanDate": "2023-02-10T00:14:05.854+00:00",
                          "lastValidatedAttempt": "2023-02-10T00:14:05.922+00:00",
                          "modificationDate": "2023-02-10T00:14:07.509+00:00",
                          "port": 443,
                          "serviceIds": [
                            "be7447c0-a8e3-11ed-bdca-d5b837a24ba9"
                          ],
                          "sslProtocols": [
                            "TLSv1.3",
                            "TLSv1.2"
                          ],
                          "sslValidationErrorArguments": [],
                          "sslValidationStatus": "OK"
                        },
                        {
                          "certificate": {
                            "authorityKeyIdentifierHash": "DD3C9ABA215BCA96FB8C1CDA555B7D1BFC26DF3D",
                            "certificateName": "venafi.cloud",
                            "certificateStatus": "ACTIVE",
                            "companyId": "06285e50-a8d6-11ed-afc9-45c12cf499bf",
                            "encryptionType": "RSA",
                            "extendedKeyUsage": [
                              "1.3.6.1.5.5.7.3.1",
                              "1.3.6.1.5.5.7.3.2"
                            ],
                            "fingerprint": "8BB7A7669BD689F98FFE90B0992D90C006A005A6",
                            "id": "d21f8730-a8d7-11ed-9c90-87a729edc082",
                            "issuerC": "US",
                            "issuerCN": [
                              "Amazon"
                            ],
                            "issuerCertificateIds": [
                              "d21a7e20-a8d3-11ed-9c90-87a729edc082",
                              "d58eb650-2972-11eb-bc4c-8b24e5a66fb6"
                            ],
                            "issuerDN": "cn=Amazon,ou=Server CA 1B,o=Amazon,c=US",
                            "issuerOU": [
                              "Server CA 1B"
                            ],
                            "keyStrength": 2048,
                            "keyUsage": [
                              "digitalSignature",
                              "keyEncipherment"
                            ],
                            "managedCertificateId": "d2cRfc30-a8d7-11ed-96b6-1778d4537ec7",
                            "modificationDate": "2023-02-10T00:14:06.011+00:00",
                            "ocspNoCheck": false,
                            "selfSigned": false,
                            "serialNumber": "047LL5D239595A32F91E83D94C8FFF7B",
                            "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                            "signatureHashAlgorithm": "SHA256",
                            "subjectAlternativeNameDns": [
                              "venafi.cloud",
                              "www.venafi.cloud",
                              "ui.venafi.cloud",
                              "us1.venafi.cloud",
                              "ui.us1.venafi.cloud"
                            ],
                            "subjectAlternativeNamesByType": {
                              "dNSName": [
                                "venafi.cloud",
                                "www.venafi.cloud",
                                "ui.venafi.cloud",
                                "us1.venafi.cloud",
                                "ui.us1.venafi.cloud"
                              ]
                            },
                            "subjectCN": [
                              "venafi.cloud"
                            ],
                            "subjectDN": "cn=venafi.cloud",
                            "subjectKeyIdentifierHash": "BBCDA66901E1F7EE4723DD347643E7F2079DC14D",
                            "validityEnd": "2024-01-30T23:59:59.000+00:00",
                            "validityStart": "2023-01-01T00:00:00.000+00:00",
                            "versionType": "CURRENT"
                          },
                          "certificateId": "d21f8790-a8d7-11ed-9c90-87a729edc082",
                          "certificateInstanceId": "d233e820-a8d7-11ed-9c90-87a729edc082",
                          "certificateSource": "USER_SCAN",
                          "deploymentStatus": "IN_USE",
                          "hostname": "venafi.cloud",
                          "instanceChainValidationStatus": [
                            "OK"
                          ],
                          "ipAddress": "11.35.125.124",
                          "lastScanDate": "2023-02-10T00:14:03.302+00:00",
                          "lastValidatedAttempt": "2023-02-10T00:14:04.014+00:00",
                          "modificationDate": "2023-02-10T00:14:06.011+00:00",
                          "port": 443,
                          "serviceIds": [
                            "be7447c0-a8d8-11ed-bdca-d5b837a24ba9"
                          ],
                          "sslProtocols": [
                            "TLSv1.3",
                            "TLSv1.2"
                          ],
                          "sslValidationErrorArguments": [],
                          "sslValidationStatus": "OK"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCertificateInstanceResponse"
                }
              }
            },
            "description": "Certificate response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request conditions failed."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request conditions failed."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve Certificate Instances",
        "tags": [
          "Certificate Installations"
        ]
      }
    },
    "/outagedetection/v1/certificateinstances/{id}": {
      "get": {
        "description": "Retrieves the details of the certificate installation that has the specified `id`.",
        "operationId": "certificateinstances_getById",
        "parameters": [
          {
            "description": "UUID of a certificate installation.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificate instance details response": {
                    "description": "Certificate instance details response",
                    "summary": "Certificate instance details",
                    "value": {
                      "count": 1,
                      "instances": [
                        {
                          "certificate": {
                            "authorityKeyIdentifierHash": "654C87C811C70BD19AB7E0F2D910570198160EE1",
                            "certificateName": "www.venafi.com",
                            "certificateStatus": "ACTIVE",
                            "companyId": "85595df0-8e14-wq12-87e3-755db050f29d",
                            "encryptionType": "RSA",
                            "extendedKeyUsage": [
                              "1.3.6.1.5.5.7.3.2",
                              "1.3.6.1.5.5.7.3.1"
                            ],
                            "fingerprint": "4027AEDB24237BB634DA4FB733345F6445959105",
                            "id": "7ec12010-9051-34ew-8e50-b994b27d2ece",
                            "issuerC": "US",
                            "issuerCN": [
                              "HydrantID SSL CA G3"
                            ],
                            "issuerCertificateIds": [
                              "7ebed620-9051-11ed-32ew-b994b27d2ece",
                              "d50a4410-297e-11eb-32sa-8b24e5a66fb6"
                            ],
                            "issuerDN": "cn=HydrantID SSL CA G3,o=HydrantID (Avalanche Cloud Corporation),c=US",
                            "keyStrength": 2048,
                            "keyUsage": [
                              "digitalSignature",
                              "keyEncipherment"
                            ],
                            "managedCertificateId": "7f0aac30-7420-11ed-8ab8-19e0a618d9cd",
                            "modificationDate": "2023-01-10T19:12:25.948+00:00",
                            "ocspNoCheck": false,
                            "selfSigned": false,
                            "serialNumber": "289B5FBB3DA7A3E7E58C2BD3894C70ACBC1C66F9",
                            "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                            "signatureHashAlgorithm": "SHA256",
                            "subjectAlternativeNameDns": [
                              "www.venafi.com",
                              "venafi.com"
                            ],
                            "subjectAlternativeNamesByType": {
                              "dNSName": [
                                "www.venafi.com",
                                "venafi.com"
                              ]
                            },
                            "subjectC": "US",
                            "subjectCN": [
                              "www.venafi.com"
                            ],
                            "subjectDN": "cn=www.venafi.com,o=Venafi, Inc.,c=US,st=Utah,l=Salt Lake City",
                            "subjectKeyIdentifierHash": "44EC9FAC232FA74EBFFD7E63FE8F92233CAA965B",
                            "subjectL": "Salt Lake City",
                            "subjectO": "Venafi, Inc.",
                            "subjectST": "Utah",
                            "validityEnd": "2023-03-14T19:39:00.000+00:00",
                            "validityStart": "2022-03-14T19:29:38.000+00:00",
                            "versionType": "CURRENT"
                          },
                          "certificateId": "7ec12010-4151-11ed-8e50-b994b27d2ece",
                          "certificateInstanceId": "7ec1bc43-9051-11ed-8e50-b994b27d2ece",
                          "certificateSource": "USER_SCAN",
                          "deploymentStatus": "IN_USE",
                          "hostname": "venafi.com",
                          "instanceChainValidationStatus": [
                            "OK"
                          ],
                          "ipAddress": "23.185.0.2",
                          "lastScanDate": "2023-01-10T19:12:05.015+00:00",
                          "lastValidatedAttempt": "2023-01-10T19:12:10.225+00:00",
                          "modificationDate": "2023-01-10T19:12:25.948+00:00",
                          "port": 443,
                          "serviceIds": [
                            "1d61e9e0-9046-11ed-bf54-53a1b041cf25"
                          ],
                          "sslProtocols": [
                            "TLSv1.3",
                            "TLSv1.2"
                          ],
                          "sslValidationStatus": "OK"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCertificateInstanceInformation"
                }
              }
            },
            "description": "Certificate installation was found; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Certificate installation not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get a certificate installation's details",
        "tags": [
          "Certificate Installations"
        ]
      }
    },
    "/outagedetection/v1/certificateinstances/validation": {
      "post": {
        "description": "Submits one or more certificate installation for TLS validation.",
        "operationId": "certificateinstances_validation",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Certificate instance validation request": {
                  "description": "Certificate instance validation request",
                  "summary": "Certificate instance validation",
                  "value": {
                    "instanceIds": [
                      "7ec1bc50-9051-11ed-8e50-b994b27d2ece"
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CertificateInstanceValidationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            },
            "description": "Certificate installations were submitted for validation."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Request validation for a set of certificate installations",
        "tags": [
          "Certificate Installations"
        ]
      }
    },
    "/outagedetection/v1/certificateinstancesearch": {
      "post": {
        "description": "Use this endpoint to retrieve certificate instance data according to specified search criteria based on commonly used field search parameters. Some examples are `signatureHashAlgorithm`, `validityEnd`, and `issuerCN`. For more information, see [common search parameters](https://docs.venafi.cloud/api/about-api-search-fields/#common-search-parameters)",
        "operationId": "certificateinstances_search_getByExpression",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Certificate instance search request by expression": {
                  "description": "Certificate instance search request by expression",
                  "summary": "Certificate instance search by expression",
                  "value": {
                    "expression": {
                      "operands": [
                        {
                          "field": "ipAddress",
                          "operator": "EQ",
                          "value": "127.0.0.1"
                        },
                        {
                          "field": "hostname",
                          "operator": "EQ",
                          "value": "venafi.com"
                        }
                      ],
                      "operator": "OR"
                    },
                    "ordering": {
                      "orders": [
                        {
                          "direction": "ASC",
                          "field": "certificatInstanceModificationDate"
                        }
                      ]
                    },
                    "paging": {
                      "pageNumber": 0,
                      "pageSize": 10
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Filter2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificate instance details response": {
                    "description": "Certificate instance details response",
                    "summary": "Certificate instance details",
                    "value": {
                      "count": 1,
                      "instances": [
                        {
                          "certificate": {
                            "authorityKeyIdentifierHash": "294C87C811C70BD19AB7E0F2D910570198160EE1",
                            "certificateName": "www.venafi.com",
                            "certificateStatus": "ACTIVE",
                            "companyId": "85595df0-8e14-11ed-87e3-755db050f29d",
                            "encryptionType": "RSA",
                            "extendedKeyUsage": [
                              "1.3.6.1.5.5.7.3.2",
                              "1.3.6.1.5.5.7.3.1"
                            ],
                            "fingerprint": "4027AEDB24237BB632DA4FB733345F6445959105",
                            "id": "7ec12010-9051-11ed-8e50-b994b27d2ece",
                            "issuerC": "US",
                            "issuerCN": [
                              "HydrantID SSL CA G3"
                            ],
                            "issuerCertificateIds": [
                              "7ebed620-9051-11ed-8e50-b994b27d2ece",
                              "d50a4410-297e-11eb-bc4c-8b24e5a66fb6"
                            ],
                            "issuerDN": "cn=HydrantID SSL CA G3,o=HydrantID (Avalanche Cloud Corporation),c=US",
                            "keyStrength": 2048,
                            "keyUsage": [
                              "digitalSignature",
                              "keyEncipherment"
                            ],
                            "managedCertificateId": "7f0aac30-9051-11ed-8ab8-19e0a618d9cd",
                            "modificationDate": "2023-01-10T21:38:03.140+00:00",
                            "ocspNoCheck": false,
                            "selfSigned": false,
                            "serialNumber": "278B5FBB3DA7A3E7E58C2BD3894C70ACBC1C66F9",
                            "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                            "signatureHashAlgorithm": "SHA256",
                            "subjectAlternativeNameDns": [
                              "www.venafi.com",
                              "venafi.com"
                            ],
                            "subjectAlternativeNamesByType": {
                              "dNSName": [
                                "www.venafi.com",
                                "venafi.com"
                              ],
                              "otherName": [],
                              "rfc822Name": []
                            },
                            "subjectC": "US",
                            "subjectCN": [
                              "www.venafi.com"
                            ],
                            "subjectDN": "cn=www.venafi.com,o=Venafi, Inc.,c=US,st=Utah,l=Salt Lake City",
                            "subjectKeyIdentifierHash": "32EC9FAC232FA74EBFFD7E63FE8F92233CAA965B",
                            "subjectL": "Salt Lake City",
                            "subjectO": "Venafi, Inc.",
                            "subjectST": "Utah",
                            "validityEnd": "2023-03-14T19:39:00.000+00:00",
                            "validityStart": "2022-03-14T19:29:38.000+00:00",
                            "versionType": "CURRENT"
                          },
                          "certificateId": "7ec12010-9051-11ed-8e50-b994b27d2ece",
                          "certificateInstanceId": "7ec1bc50-9051-11ed-8e50-b994b27d2ece",
                          "certificateSource": "USER_SCAN",
                          "deploymentStatus": "IN_USE",
                          "hostname": "venafi.com",
                          "instanceChainValidationStatus": [
                            "OK"
                          ],
                          "ipAddress": "23.185.0.2",
                          "lastScanDate": "2023-01-10T21:38:02.886+00:00",
                          "lastValidatedAttempt": "2023-01-10T21:38:03.090+00:00",
                          "modificationDate": "2023-01-10T21:38:03.140+00:00",
                          "port": 443,
                          "serviceIds": [
                            "1d61e9e0-9046-11ed-bf12-53a1b041cf25"
                          ],
                          "sslProtocols": [
                            "TLSv1.3",
                            "TLSv1.2"
                          ],
                          "sslValidationStatus": "OK"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCertificateInstanceResponse"
                }
              },
              "text/csv": {
                "examples": {
                  "Certificate instance details response": {
                    "description": "Certificate instance details response",
                    "summary": "Certificate instance details",
                    "value": {
                      "count": 1,
                      "instances": [
                        {
                          "certificate": {
                            "authorityKeyIdentifierHash": "294C87C811C70BD19AB7E0F2D910570198160EE1",
                            "certificateName": "www.venafi.com",
                            "certificateStatus": "ACTIVE",
                            "companyId": "85595df0-8e14-11ed-87e3-755db050f29d",
                            "encryptionType": "RSA",
                            "extendedKeyUsage": [
                              "1.3.6.1.5.5.7.3.2",
                              "1.3.6.1.5.5.7.3.1"
                            ],
                            "fingerprint": "4027AEDB24237BB632DA4FB733345F6445959105",
                            "id": "7ec12010-9051-11ed-8e50-b994b27d2ece",
                            "issuerC": "US",
                            "issuerCN": [
                              "HydrantID SSL CA G3"
                            ],
                            "issuerCertificateIds": [
                              "7ebed620-9051-11ed-8e50-b994b27d2ece",
                              "d50a4410-297e-11eb-bc4c-8b24e5a66fb6"
                            ],
                            "issuerDN": "cn=HydrantID SSL CA G3,o=HydrantID (Avalanche Cloud Corporation),c=US",
                            "keyStrength": 2048,
                            "keyUsage": [
                              "digitalSignature",
                              "keyEncipherment"
                            ],
                            "managedCertificateId": "7f0aac30-9051-11ed-8ab8-19e0a618d9cd",
                            "modificationDate": "2023-01-10T21:38:03.140+00:00",
                            "ocspNoCheck": false,
                            "selfSigned": false,
                            "serialNumber": "278B5FBB3DA7A3E7E58C2BD3894C70ACBC1C66F9",
                            "signatureAlgorithm": "SHA256_WITH_RSA_ENCRYPTION",
                            "signatureHashAlgorithm": "SHA256",
                            "subjectAlternativeNameDns": [
                              "www.venafi.com",
                              "venafi.com"
                            ],
                            "subjectAlternativeNamesByType": {
                              "dNSName": [
                                "www.venafi.com",
                                "venafi.com"
                              ],
                              "otherName": [],
                              "rfc822Name": []
                            },
                            "subjectC": "US",
                            "subjectCN": [
                              "www.venafi.com"
                            ],
                            "subjectDN": "cn=www.venafi.com,o=Venafi, Inc.,c=US,st=Utah,l=Salt Lake City",
                            "subjectKeyIdentifierHash": "32EC9FAC232FA74EBFFD7E63FE8F92233CAA965B",
                            "subjectL": "Salt Lake City",
                            "subjectO": "Venafi, Inc.",
                            "subjectST": "Utah",
                            "validityEnd": "2023-03-14T19:39:00.000+00:00",
                            "validityStart": "2022-03-14T19:29:38.000+00:00",
                            "versionType": "CURRENT"
                          },
                          "certificateId": "7ec12010-9051-11ed-8e50-b994b27d2ece",
                          "certificateInstanceId": "7ec1bc50-9051-11ed-8e50-b994b27d2ece",
                          "certificateSource": "USER_SCAN",
                          "deploymentStatus": "IN_USE",
                          "hostname": "venafi.com",
                          "instanceChainValidationStatus": [
                            "OK"
                          ],
                          "ipAddress": "23.185.0.2",
                          "lastScanDate": "2023-01-10T21:38:02.886+00:00",
                          "lastValidatedAttempt": "2023-01-10T21:38:03.090+00:00",
                          "modificationDate": "2023-01-10T21:38:03.140+00:00",
                          "port": 443,
                          "serviceIds": [
                            "1d61e9e0-9046-11ed-bf12-53a1b041cf25"
                          ],
                          "sslProtocols": [
                            "TLSv1.3",
                            "TLSv1.2"
                          ],
                          "sslValidationStatus": "OK"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCertificateInstanceResponse"
                }
              }
            },
            "description": "Certificate Instances Response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve certificate instance data matching search criteria",
        "tags": [
          "Certificate Installations"
        ]
      }
    },
    "/v1/integrationservices": {
      "get": {
        "description": "Retrieves the details of all services (Ex: Discovery services and Automated key pair services).",
        "operationId": "integrationsservices_getAll",
        "parameters": [
          {
            "description": "Total number of services.",
            "in": "query",
            "name": "totalCount",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "UUID of VSatellite instance associated to the service if any.",
            "in": "query",
            "name": "edgeInstanceId",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Integration service details response": {
                    "description": "Integration service details response",
                    "summary": "Service details",
                    "value": {
                      "integrationsServices": [
                        {
                          "companyId": "fcaa8020-77e2-11ed-9ae5-7dc1d0872a47",
                          "edgeInstancesIds": [],
                          "environmentId": "fea69e40-77e2-11ed-9dcf-e14a50e3b9c8",
                          "id": "fea6c550-77e2-11ed-9dcf-e14a50e3b9c8",
                          "name": "Internet discovery service",
                          "operationsCount": 0,
                          "schedulePattern": {
                            "daysOfWeek": [
                              "MONDAY",
                              "TUESDAY",
                              "FRIDAY",
                              "WEDNESDAY",
                              "SUNDAY",
                              "THURSDAY",
                              "SATURDAY"
                            ],
                            "recurrenceTime": "03:00:00",
                            "recurrenceType": "DAY_OF_WEEK"
                          },
                          "schedulerEnabled": false,
                          "serviceType": "INTERNET_DISCOVERY",
                          "status": "ACTIVE",
                          "systemGenerated": true,
                          "targets": {
                            "domains": [
                              "venafi.com"
                            ],
                            "fqdns": [],
                            "ipRanges": [],
                            "ports": [
                              "443"
                            ],
                            "serviceType": "INTERNET_DISCOVERY"
                          },
                          "workTypes": [
                            "DISCOVER"
                          ]
                        },
                        {
                          "companyId": "fcaa8020-77e2-11ed-9ae5-7dc1d0872a47",
                          "edgeInstancesIds": [],
                          "environmentId": "fea69e40-77e2-11ed-9dcf-e14a50e3b9c8",
                          "id": "91770300-77e7-11ed-9dcf-e14a50e3b9c8",
                          "name": "basic discovery sample",
                          "operationsCount": 0,
                          "schedulerEnabled": false,
                          "serviceType": "BASIC_DISCOVERY",
                          "status": "ACTIVE",
                          "systemGenerated": false,
                          "targets": {
                            "fqdns": [
                              "venafi.com"
                            ],
                            "ipRanges": [],
                            "ports": [
                              "443",
                              "8080-8090"
                            ],
                            "serviceType": "BASIC_DISCOVERY"
                          },
                          "workTypes": [
                            "DISCOVER"
                          ]
                        }
                      ],
                      "totalCount": 6
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IntegrationServiceDetailsResponse"
                }
              }
            },
            "description": "Details of all services in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get a list of services",
        "tags": [
          "Certificate Discovery"
        ]
      },
      "post": {
        "description": "Create a new service ",
        "operationId": "integrationsservices_create",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Basic discovery request": {
                  "description": "Basic discovery request",
                  "summary": "Basic discovery",
                  "value": {
                    "edgeInstancesIds": [],
                    "environmentId": "fea69e40-77e2-11ed-9dcf-e14a50e3b9c8",
                    "name": "basic discovery",
                    "serviceType": "BASIC_DISCOVERY",
                    "targets": {
                      "fqdns": [
                        "venafi.com",
                        "venafi.cloud"
                      ],
                      "ipRanges": [
                        "13.35.125.13",
                        "13.35.125.34"
                      ],
                      "ports": [
                        "443",
                        "8080-8090"
                      ],
                      "serviceType": "BASIC_DISCOVERY"
                    },
                    "workTypes": [
                      "DISCOVER"
                    ]
                  }
                },
                "Enhanced discovery request": {
                  "description": "Enhanced discovery request",
                  "summary": "Enhanced discovery",
                  "value": {
                    "edgeInstancesIds": [
                      "83c57850-77eb-11ed-be65-1766f96f7b01"
                    ],
                    "environmentId": "fea69e40-77e2-11ed-9dcf-e14a50e3b9c8",
                    "name": "enhanced discovery",
                    "scheduleEnabled": true,
                    "schedulePattern": {
                      "cronExpression": "0 00 18 ? * * *",
                      "recurrenceType": "CRON"
                    },
                    "serviceType": "ENHANCED_DISCOVERY",
                    "targets": {
                      "fqdns": [
                        "venafi.com",
                        "venafi.cloud"
                      ],
                      "ipRanges": [
                        "13.35.125.34",
                        "13.35.125.43"
                      ],
                      "ports": [
                        "443",
                        "8080-8090"
                      ],
                      "serviceType": "ENHANCED_DISCOVERY"
                    },
                    "workTypes": [
                      "DISCOVER"
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/IntegrationServiceCreationRequest"
              }
            }
          },
          "description": "Details of the service to be created",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Integration service information": {
                    "description": "Integration service information",
                    "summary": "Service details",
                    "value": {
                      "companyId": "fcaa8020-77e2-11ed-9ae5-7dc1d0872a47",
                      "edgeInstancesIds": [
                        "83c57850-77eb-11ed-be65-1766f96f7b01"
                      ],
                      "environmentId": "fea69e40-77e2-11ed-9dcf-e14a50e3b9c8",
                      "id": "a5d3c5e0-77ec-11ed-9dcf-e14a50e3b9c8",
                      "name": "enhanced discovery sample",
                      "operationsCount": 0,
                      "schedulePattern": {
                        "cronExpression": "0 00 18 ? * * *",
                        "recurrenceType": "CRON"
                      },
                      "schedulerEnabled": true,
                      "serviceType": "ENHANCED_DISCOVERY",
                      "status": "ACTIVE",
                      "systemGenerated": false,
                      "targets": {
                        "fqdns": [
                          "venafi.cloud",
                          "venafi.com"
                        ],
                        "ipRanges": [
                          "13.35.125.34",
                          "13.35.125.43"
                        ],
                        "ports": [
                          "443",
                          "8080-8090"
                        ],
                        "serviceType": "ENHANCED_DISCOVERY"
                      },
                      "workTypes": [
                        "DISCOVER"
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IntegrationServiceInformation"
                }
              }
            },
            "description": "A service created."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Add a service",
        "tags": [
          "Certificate Discovery"
        ]
      }
    },
    "/v1/integrationservices/{id}": {
      "get": {
        "description": "Retrieves the details of the service that has the specified `id`.",
        "operationId": "integrationsservices_getById",
        "parameters": [
          {
            "description": "UUID of a service",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a service",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Integration service information response": {
                    "description": "Integration service information response",
                    "summary": "Service details",
                    "value": {
                      "companyId": "fcaa8020-77e2-11ed-9ae5-7dc1d0872a47",
                      "edgeInstancesIds": [
                        "83c57850-77eb-11ed-be65-1766f96f7b01"
                      ],
                      "environmentId": "fea69e40-77e2-11ed-9dcf-e14a50e3b9c8",
                      "id": "a5d3c5e0-77ec-11ed-9dcf-e14a50e3b9c8",
                      "name": "enhanced discovery sample",
                      "operationsCount": 0,
                      "schedulePattern": {
                        "cronExpression": "0 00 18 ? * * *",
                        "recurrenceType": "CRON"
                      },
                      "schedulerEnabled": true,
                      "serviceType": "ENHANCED_DISCOVERY",
                      "status": "ACTIVE",
                      "systemGenerated": false,
                      "targets": {
                        "fqdns": [
                          "venafi.cloud"
                        ],
                        "ipRanges": [
                          "13.35.125.34"
                        ],
                        "ports": [
                          "443"
                        ],
                        "serviceType": "ENHANCED_DISCOVERY"
                      },
                      "workTypes": [
                        "DISCOVER"
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IntegrationServiceInformation"
                }
              }
            },
            "description": "Service was found; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Service not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get service details",
        "tags": [
          "Certificate Discovery"
        ]
      },
      "delete": {
        "description": "Deletes the service that has the specified `id`.",
        "operationId": "integrationsservices_delete",
        "parameters": [
          {
            "description": "UUID of a  service",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a  service",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "retireCertificates\" (boolean): Number of certificates associated to the service that were retired when the service was deleted.",
            "in": "query",
            "name": "retireCertificates",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Integration Service Deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Service not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Remove a service",
        "tags": [
          "Certificate Discovery"
        ]
      },
      "patch": {
        "description": "Can be used to update specific fields. Only fields specified in the request will be updated. An empty set of edgeInstancesIds value will clear the set.",
        "operationId": "integrationsservices_update",
        "parameters": [
          {
            "description": "Integration Service ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Integration Service ID",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Service update request": {
                  "description": "Service update request",
                  "summary": "Service update",
                  "value": {
                    "name": "enhanced discovery update-example",
                    "scheduleEnabled": true,
                    "targets": {
                      "fqdns": [
                        "venafi.cloud",
                        "venafi.com",
                        "docs.venafi.com"
                      ],
                      "ipRanges": [
                        "13.35.125.34",
                        "13.35.125.43"
                      ],
                      "ports": [
                        "443",
                        "8080-8092"
                      ],
                      "retireCertificates": false,
                      "serviceType": "ENHANCED_DISCOVERY"
                    },
                    "workTypes": [
                      "DISCOVER"
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/IntegrationServiceUpdateRequest"
              }
            }
          },
          "description": "Details of the service to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Service update response": {
                    "description": "Service update response",
                    "summary": "Service details",
                    "value": {
                      "companyId": "fcaa8020-77e2-11ed-9ae5-7dc1d0872a47",
                      "edgeInstancesIds": [
                        "83c57850-77eb-11ed-be65-1766f96f7b01"
                      ],
                      "environmentId": "fea69e40-77e2-11ed-9dcf-e14a50e3b9c8",
                      "id": "a5d3c5e0-77ec-11ed-9dcf-e14a50e3b9c8",
                      "name": "enhanced discovery update-example",
                      "operationsCount": 0,
                      "schedulePattern": {
                        "cronExpression": "0 00 18 ? * * *",
                        "recurrenceType": "CRON"
                      },
                      "schedulerEnabled": true,
                      "serviceType": "ENHANCED_DISCOVERY",
                      "status": "ACTIVE",
                      "systemGenerated": false,
                      "targets": {
                        "fqdns": [
                          "venafi.cloud",
                          "venafi.com",
                          "docs.venafi.com"
                        ],
                        "ipRanges": [
                          "13.35.125.43",
                          "13.35.125.34"
                        ],
                        "ports": [
                          "443",
                          "8080-8092"
                        ],
                        "serviceType": "ENHANCED_DISCOVERY"
                      },
                      "workTypes": [
                        "DISCOVER"
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IntegrationServiceInformation"
                }
              }
            },
            "description": "Integration Service information"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Integration Service Not Found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update Service properties",
        "tags": [
          "Certificate Discovery"
        ]
      }
    },
    "/outagedetection/v1/certificates/imports": {
      "post": {
        "description": "Import a list of certificates and their associated private key pairs",
        "operationId": "certificates_import",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateImportRequest1"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateImportResponse1"
                }
              }
            },
            "description": "Certificates and private keys imported"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Import a list of certificates and their associated private key pairs",
        "tags": [
          "Private Key Import"
        ]
      }
    },
    "/outagedetection/v1/certificates/imports/{id}": {
      "get": {
        "description": "Retrieve import details",
        "operationId": "certificatesImport_getByImportId",
        "parameters": [
          {
            "description": "Import id associated with the result of importing a list of certificates and private keys",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateImportStatusDetailResponse"
                }
              }
            },
            "description": "Import details matching the specified import id"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Import details not found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve import details",
        "tags": [
          "Private Key Import"
        ]
      }
    },
    "/outagedetection/v1/certificaterequests": {
      "get": {
        "description": "Retrieves the details of all certificate requests.",
        "operationId": "certificaterequests_getAll",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "All certificate requests details response": {
                    "description": "All certificate requests details response",
                    "summary": "All certificate requests details",
                    "value": {
                      "certificateRequests": [
                        {
                          "applicationId": "eff7cb30-cff3-11ed-977d-f9a657c2c463",
                          "caOrderId": "41:29:e5:3f:44:4d:59:1a:58:f6:8f:a7:ab:39:5d:56:ae:8f:e3:37",
                          "certificateIds": [
                            "a7a0ea50-d279-11ed-861a-5154a94578eb",
                            "602cec00-cff4-11ed-b7e2-bb3d5adf81ba",
                            "602794d0-cff4-11ed-b7e2-bb3d5adf81ba"
                          ],
                          "certificateIssuingTemplateId": "e47ea120-cff3-11ed-9ece-cf965f609bfb",
                          "certificateOwnerUserId": "b29cec90-cff1-11ed-97d2-21317ab83359",
                          "companyId": "b11fc270-cff1-11ed-97d2-21317ab83359",
                          "creationDate": "2023-04-03T23:45:46.278+00:00",
                          "id": "a78e25a0-d279-11ed-b5e4-151222cdc24b",
                          "keyLength": 4096,
                          "keyType": "RSA",
                          "modificationDate": "2023-04-03T23:45:46.423+00:00",
                          "status": "ISSUED",
                          "subjectAlternativeNamesByType": {
                            "dNSName": [
                              "venafi.com"
                            ]
                          },
                          "subjectCN": "venafi.com",
                          "subjectDN": "cn=venafi.com,ou=dev,o=Venafi,c=US,st=Utah,l=Salt Lake City",
                          "validityPeriod": "P2M19D"
                        },
                        {
                          "applicationId": "eff7cb30-cff3-11ed-977d-f9a657c2c463",
                          "caOrderId": "5b:f7:ff:02:86:d0:1f:ed:90:81:02:bb:5a:6b:8b:23:b8:0d:f7:e9",
                          "certificateIds": [
                            "c6e89340-d279-11ed-861a-5154a94578eb",
                            "602cec00-cff4-11ed-b7e2-bb3d5adf81ba",
                            "602794d0-cff4-11ed-b7e2-bb3d5adf81ba"
                          ],
                          "certificateIssuingTemplateId": "e47ea120-cff3-11ed-9ece-cf965f609bfb",
                          "certificateOwnerUserId": "b29cec90-cff1-11ed-97d2-21317ab83359",
                          "companyId": "b11fc270-cff1-11ed-97d2-21317ab83359",
                          "creationDate": "2023-04-03T23:46:38.771+00:00",
                          "id": "c6d8dbd0-d279-11ed-b5e4-151222cdc24b",
                          "keyLength": 4096,
                          "keyType": "RSA",
                          "modificationDate": "2023-04-03T23:46:38.890+00:00",
                          "status": "ISSUED",
                          "subjectAlternativeNamesByType": {
                            "dNSName": [
                              "venafi.com"
                            ]
                          },
                          "subjectCN": "localhost",
                          "subjectDN": "cn=localhost,ou=dev,o=Venafi,c=US,st=Utah,l=Salt Lake City",
                          "validityPeriod": "P2M19D"
                        }
                      ],
                      "numFound": 2
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CertificateRequestResponse"
                }
              }
            },
            "description": "The response body contains the details of the certificate requests"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the details of all certificate requests",
        "tags": [
          "Certificate Request"
        ]
      },
      "post": {
        "description": "Creates a certificate request for the specified `applicationId` and using the specified `certificateIssuingTemplateId`.  Indicate a renewal by specifying `existingCertificateId`. Set `isVaaSGenerated` to true, specify `csrAttributes` to request a certificate using *Automated Secure Keypair*. The `validityPeriod` value must be in the ISO8601 format for time duration. Examples of ISO8601 format time duration include _P1Y_ for one year, _P10D_ for ten days, and _PT12H_ for twelve hours.",
        "operationId": "certificaterequests_create",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Certificate request's request": {
                  "description": "Certificate request's request",
                  "summary": "Certificate request details",
                  "value": {
                    "apiClientInformation": {
                      "identifier": "192.168.1.68",
                      "type": "Venafi VCert CLI"
                    },
                    "applicationId": "b00701b0-886f-11ed-9f39-3d586ab80cf2",
                    "certificateIssuingTemplateId": "a305d810-886f-11ed-9ccf-dbf748eb1ae0",
                    "certificateSigningRequest": "-----BEGIN CERTIFICATE REQUEST-----\nMIIE2TCCAsECAQAwbDELMAkGA1UEBhMCVVMxDTALBgNVBAgTBFV0YWgxFzAVBgNV\nBAcTDlNhbHQgTGFrZSBDaXR5MQ8wDQYDVQQKEwZWZW5hZmkxDzANBgNVBAsTBmRl\ndm9wczETMBEGA1UEAxMKdmVuYWZpLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIP\nADCCAgoCggIBAKSzq7hSn7on+YhRmt+4ojhfMzd/NVCIXaq+UG4wjyh5QqkZsGAK\n1u82gLvuZXc8i1iKStj5DnVEVBNAydynGztz+ZLaAGuIhx75yl36YrqIV3LyLjxc\nqZMsaJuZi2f0Lxy3bA8Huw/puNZwTBhJNcj2ov00FgGt7DTHdhl0z4nL5keADBMD\nIcYWcH+o2pHBEvDfjmE0yS9MYLQBcek1gKMPMGAjqj8VtbdwKdTQ6LYzkU34Vbp1\nHGD6lhwfkr5wlMnlNOoX658UnXNhgkulcZv3jS2hOhrJzhX6bEK8XvKQevv5d3Tu\nsdk74zyumoe4edwM6wkphjWtXGE4CVBWongzpG08zvDbzdkN31g/u+Isp2mJHfi/\n7rPySj6NzV14GOHnR16zwQB6cpEwzwPigl1lSL0Qv/xjysV0yFaRycZceT0TNj3b\n0ezgV+sSHXwI84IO+9hH5JXOn+llY3gniVxNbgdb8yK3tOPfT9ig3pW3Vcdh02XF\nocmP1/eM6/WYh+ipKqNXpvhW9jf56CEmVSg9sWzyqZ2rCj4i+JC/IxwxANy4vGuX\ny+XHkWJOMt7sSZaiOAel/TVEcA3XA0HV/hEPkakZK5blls2d5IyJUhvOZB1QxpDE\nECemCZ/ZsJR3Bao0JQNABhmnammMRQolfBE5z659+E4pXPIJP+a/UaRtAgMBAAGg\nKDAmBgkqhkiG9w0BCQ4xGTAXMBUGA1UdEQQOMAyCCnZlbmFmaS5jb20wDQYJKoZI\nhvcNAQELBQADggIBAH2oEcLdtRay+EPAky0ly/UM7pEFG9RCs1RoLqGMGeLurxqH\nPvzA7BayOp1TfkxxaLnGzTREFhnEJQhDMyOn52RDrOkHYEBj/hfqi2bKO+mXpJS8\n3n1Hn7H0+aqJXOguG9/L6jmEmEBDCBir8FJuSeHBnG+5A//pXWdivkyjjlY0XlZj\nJI4GqoFAFqDAY/8WFe5A7bEsiLu+vEVEgzhFyDXUYBkZ6DutpOA2cgMN0J+wDP2X\nAsd7KJY1QUB/JX/zUIW57aCHAyntfv+hQ0oDgQV4+p+gNHHrZNLrk9eYyHrqcQA+\n7bEfgbUWUMJjYw0YPwTM801rt/8wHBdOjFgpve6pnC1Xk3hY6i/RKRXCKnEgkloO\nyOc1/WQLVT5sq0hJSJ6JKHY0Z4ZhieiPpUM+CuQu7KBrxkp9DwV23Ttu7pA4FOz4\nAroLuwvVEdi16Hu61kR/BW5WDNvIUox4pttCx77+laTxjJZ+1owNRFtzyMBWi07d\n4p6Xp3WTPSp+rYEJwX3Z4bLKCZUCUkbBFEXMDheK4detAW0qHpE7YvJu0/FiTzVV\n76l+z9p1cI5l0+vKp2lx5pAp7mkiCvrUuBMl78eGE4UtNo1Aa3Y8ccUlC+wYr0+b\nrn7e5SYFU3hTt4nsGurfV5+YyQn0x0kjiS0g7zGGGchFGcVBaeZIDZijA54i\n-----END CERTIFICATE REQUEST-----\n",
                    "csrAttributes": {
                      "commonName": "venafi.com",
                      "country": "US",
                      "keyTypeParameters": {
                        "keyCurve": "P256",
                        "keyLength": 4096,
                        "keyType": "RSA"
                      },
                      "locality": "Salt Lake City",
                      "organization": "Venafi",
                      "organizationalUnits": [
                        "devops"
                      ],
                      "state": "Utah",
                      "subjectAlternativeNamesByType": {
                        "dnsNames": [
                          "venafi.com"
                        ]
                      }
                    },
                    "existingCertificateId": "b305d810-886f-11ed-9ccf-dbf748eb1ae0",
                    "isVaaSGenerated": false,
                    "validityPeriod": "PT2880H"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CertificateRequestRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificate request response": {
                    "description": "Certificate request response",
                    "summary": "Certificate request details",
                    "value": {
                      "certificateRequests": [
                        {
                          "apiClientInformation": {
                            "identifier": "192.168.1.68",
                            "type": "Venafi VCert CLI"
                          },
                          "applicationId": "eff7cb30-cff3-11ed-977d-f9a657c2c463",
                          "certificateIds": [
                            "4cfbcf80-d26e-11ed-861a-5154a94578eb",
                            "602794d0-cff4-11ed-b7e2-bb3d5adf81ba"
                          ],
                          "certificateIssuingTemplateId": "e47ea120-cff3-11ed-9ece-cf965f609bfb",
                          "certificateOwnerUserId": "b29cec90-cff1-11ed-97d2-21317ab83359",
                          "certificateSigningRequest": "-----BEGIN CERTIFICATE REQUEST-----\nMIIE2TCCAsECAQAwbDELMAkGA1UEBhMCVVMxDTALBgNVBAgTBFV0YWgxFzAVBgNV\nBAcTDlNhbHQgTGFrZSBDaXR5MQ8wDQYDVQQKEwZWZW5hZmkxDzANBgNVBAsTBmRl\ndm9wczETMBEGA1UEAxMKdmVuYWZpLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIP\nADCCAgoCggIBAKSzq7hSn7on+YhRmt+4ojhfMzd/NVCIXaq+UG4wjyh5QqkZsGAK\n1u82gLvuZXc8i1iKStj5DnVEVBNAydynGztz+ZLaAGuIhx75yl36YrqIV3LyLjxc\nqZMsaJuZi2f0Lxy3bA8Huw/puNZwTBhJNcj2ov00FgGt7DTHdhl0z4nL5keADBMD\nIcYWcH+o2pHBEvDfjmE0yS9MYLQBcek1gKMPMGAjqj8VtbdwKdTQ6LYzkU34Vbp1\nHGD6lhwfkr5wlMnlNOoX658UnXNhgkulcZv3jS2hOhrJzhX6bEK8XvKQevv5d3Tu\nsdk74zyumoe4edwM6wkphjWtXGE4CVBWongzpG08zvDbzdkN31g/u+Isp2mJHfi/\n7rPySj6NzV14GOHnR16zwQB6cpEwzwPigl1lSL0Qv/xjysV0yFaRycZceT0TNj3b\n0ezgV+sSHXwI84IO+9hH5JXOn+llY3gniVxNbgdb8yK3tOPfT9ig3pW3Vcdh02XF\nocmP1/eM6/WYh+ipKqNXpvhW9jf56CEmVSg9sWzyqZ2rCj4i+JC/IxwxANy4vGuX\ny+XHkWJOMt7sSZaiOAel/TVEcA3XA0HV/hEPkakZK5blls2d5IyJUhvOZB1QxpDE\nECemCZ/ZsJR3Bao0JQNABhmnammMRQolfBE5z659+E4pXPIJP+a/UaRtAgMBAAGg\nKDAmBgkqhkiG9w0BCQ4xGTAXMBUGA1UdEQQOMAyCCnZlbmFmaS5jb20wDQYJKoZI\nhvcNAQELBQADggIBAH2oEcLdtRay+EPAky0ly/UM7pEFG9RCs1RoLqGMGeLurxqH\nPvzA7BayOp1TfkxxaLnGzTREFhnEJQhDMyOn52RDrOkHYEBj/hfqi2bKO+mXpJS8\n3n1Hn7H0+aqJXOguG9/L6jmEmEBDCBir8FJuSeHBnG+5A//pXWdivkyjjlY0XlZj\nJI4GqoFAFqDAY/8WFe5A7bEsiLu+vEVEgzhFyDXUYBkZ6DutpOA2cgMN0J+wDP2X\nAsd7KJY1QUB/JX/zUIW57aCHAyntfv+hQ0oDgQV4+p+gNHHrZNLrk9eYyHrqcQA+\n7bEfgbUWUMJjYw0YPwTM801rt/8wHBdOjFgpve6pnC1Xk3hY6i/RKRXCKnEgkloO\nyOc1/WQLVT5sq0hJSJ6JKHY0Z4ZhieiPpUM+CuQu7KBrxkp9DwV23Ttu7pA4FOz4\nAroLuwvVEdi16Hu61kR/BW5WDNvIUox4pttCx77+laTxjJZ+1owNRFtzyMBWi07d\n4p6Xp3WTPSp+rYEJwX3Z4bLKCZUCUkbBFEXMDheK4detAW0qHpE7YvJu0/FiTzVV\n76l+z9p1cI5l0+vKp2lx5pAp7mkiCvrUuBMl78eGE4UtNo1Aa3Y8ccUlC+wYr0+b\nrn7e5SYFU3hTt4nsGurfV5+YyQn0x0kjiS0g7zGGGchFGcVBaeZIDZijA54i\n-----END CERTIFICATE REQUEST-----\n",
                          "companyId": "b11fc270-cff1-11ed-97d2-21317ab83359",
                          "creationDate": "2023-04-03T22:24:29.739+00:00",
                          "id": "4ce82070-d26e-11ed-b5e4-151222cdc24b",
                          "keyCurve": "P256",
                          "keyLength": 4096,
                          "keyType": "RSA",
                          "modificationDate": "2023-04-03T22:24:29.874+00:00",
                          "status": "ISSUED",
                          "subjectAlternativeNamesByType": {
                            "dNSName": [
                              "venafi.com"
                            ]
                          },
                          "subjectDN": "cn=venafi.com,ou=devops,o=Venafi,c=US,st=Utah,l=Salt Lake City",
                          "validityPeriod": "PT1920H"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CertificateRequestResponse"
                }
              }
            },
            "description": "A certificate request has been created, and its details can be found in the response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "The request is either incomplete or malformed."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "The request is either incomplete or malformed."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Create a certificate request",
        "tags": [
          "Certificate Request"
        ]
      }
    },
    "/outagedetection/v1/certificaterequests/{id}": {
      "get": {
        "description": "Retrieves the details of the certificate request with the specified `id`.",
        "operationId": "certificaterequests_getById",
        "parameters": [
          {
            "description": "UUID of a Certificate Request",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a Certificate Request",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificate request details response": {
                    "description": "Certificate request details response",
                    "summary": "Certificate request details",
                    "value": {
                      "apiClientInformation": {
                        "identifier": "192.168.1.68",
                        "type": "Venafi VCert CLI"
                      },
                      "applicationId": "eff7cb30-cff3-11ed-977d-f9a657c2c463",
                      "certificateIds": [
                        "602fab20-cff4-11ed-b7e2-bb3d5adf81ba",
                        "602794d0-cff4-11ed-b7e2-bb3d5adf81ba"
                      ],
                      "certificateIssuingTemplateId": "e47ea120-cff3-11ed-9ece-cf965f609bfb",
                      "certificateOwnerUserId": "b29cec90-cff1-11ed-97d2-21317ab83359",
                      "certificateSigningRequest": "-----BEGIN CERTIFICATE REQUEST-----\nMIIE1DCCArwCAQAwZzELMAkGA1UEBhMCTVgxEDAOBgNVBAgTB1l1Y2F0YW4xDzAN\nBgNVBAcTBk1lcmlkYTEPMA0GA1UEChMGdmVuYWZpMQ8wDQYDVQQLEwZkZXZvcHMx\nEzARBgNVBAMTCnZlbmFmaS5jb20wggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK\nAoICAQC74YXA0Wj9xR6qjd46t/9Zt2KJj63hiZdIHhFKdnOweJ1JLL8EWihuC2kt\nSS6Fa6gU7kig7ktKTX70hmtsrh18h5a6zPWcne+pxnFlcYpmvJFp6loO8SWuvBIh\nHCSUMV+3Miak3xZi7cmgH1RFYJpwwZBQclGnJgyJeqCmqPu5TgA2wpvRFCmL5h10\nuXBBZI2b1Ia7F9J8t7dp6+k3cpm6st93WsEY/212rDF1S1eM3paUKGxhE2bk7jx+\n6LgqqzgRE0AoUUoNEC8Dc9tABQNPckDHETl8kg30Udur9KAPeMhoMfQ4pfK2kGx9\nkf5JmzO5LS/wALZydey03Sa+Ie4oeQG2i980rXmBkXLHNZkRoLZAbk7UQKF/n2Dz\n8CGBD3dYVjxn8czj+7iNrdBllloiJgQUjupBZF82IYUO6ghfxzPZRMl4E3ezT9AD\nndM8bGolZVYqzwcVRaSKlsva8HL9c6S5jfhFTxl+Uxn84GyPS1fh73c+cV9/NWFE\nuQF80iQ0I0XB9BKf2haYa5e0KOeM0gOIn/3oQPvIDy5wEVrV8LMOwGYWSSM87l9B\nEWEo2cjSQetQpjxtmY3WmZ0ghYVzLveUd3wbOmfBn6ahcW9pdVl0M/lcqcZM1UyT\nbxyL8eeUcG9eWHHXteJv6iIRyjBDM8jiXm9gdVKKL3sw9xIwXQIDAQABoCgwJgYJ\nKoZIhvcNAQkOMRkwFzAVBgNVHREEDjAMggp2ZW5hZmkuY29tMA0GCSqGSIb3DQEB\nCwUAA4ICAQB5jyiR+nzULt77rye33E6q7rAj8TwXl9yuFELT6YgigrAAAerUU2IU\n0hHZdc2WYfTT5sPc+WkZGXqbGZUOckkBpl++Ch4gpigj45ccoMZCdiMay8Xdbjte\nz+ixY4Jr1XTcjO67BG2xrKxFIOJh9nRMN1sdsowCGBUUeEMCuqudX5hs7eQNupcr\nyiNzyWyn/vWtsFVTdXmr9i40LBmcS/d2GYk+0/sHYQysO46Ff2xW7UXbNMnN2O4s\n8MN9vYmuGpEzXpUZZwU1UaE/bOSlwruLSRaoSh3PvXMEQeDrChklKgEiFb/wnQ2/\nsHI94QT1K63jW+vjfRDeRDTiF2+77P6dPQCTl+SaVcQ+76sLpyDE9P2SxCTv+TLS\nYVWy4DEBilf7Vu3NqAElclBVPLQNNsYALS79E1CPSp5McEWeAignL66ti/itSq7L\nm1YfIfSNdyJGyhxoZjL/qRjjYBzCwIHFvl3Qg8VzF3SIgSRyiTsrP9fcsfFQXrBB\nUMhhjWNTPaIf+v2/fgNYOU4G7dic+DyaNjNUB4FHwtD1f7rZ9cUhp103QVvm4vT6\nsjOjjJ1neovhvtnkekflZ/tYDimSLhFCeaQV0ioc2lk+08XuTZyJ9OyteL4lbCIT\nmVoJFSIz0mTgwv71K76+Jk+VX8je3szfF9aPsd1seTrMyaMtf+NJeA==\n-----END CERTIFICATE REQUEST-----\n",
                      "companyId": "b11fc270-cff1-11ed-97d2-21317ab83359",
                      "creationDate": "2023-03-31T18:46:41.039+00:00",
                      "id": "601e9420-cff4-11ed-9ece-cf965f609bfb",
                      "keyLength": 4096,
                      "keyType": "RSA",
                      "modificationDate": "2023-03-31T18:46:41.160+00:00",
                      "status": "ISSUED",
                      "subjectAlternativeNamesByType": {
                        "dNSName": [
                          "venafi.com"
                        ]
                      },
                      "subjectDN": "cn=venafi.com,ou=devops,o=venafi,c=MX,st=Yucatan,l=Merida",
                      "validityPeriod": "PT288H"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CertificateRequestInformation2"
                }
              }
            },
            "description": "A certificate request has been found, and its details are in the response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "The request is either incomplete or malformed."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "The certificate request was not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "The request is either incomplete or malformed."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get a certificate request's details",
        "tags": [
          "Certificate Request"
        ]
      }
    },
    "/outagedetection/v1/certificaterequests/{id}/resubmission": {
      "post": {
        "description": "Resubmits the certificate request that has the specified `id`.",
        "operationId": "certificaterequests_resubmitById",
        "parameters": [
          {
            "description": "UUID of a Certificate Request",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a Certificate Request",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateRequestResubmissionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRequestResponse"
                }
              }
            },
            "description": "Certificate Request was resubmitted; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Certificate Request not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Resubmit a certificate request",
        "tags": [
          "Certificate Request"
        ]
      }
    },
    "/outagedetection/v1/certificaterequests/validation": {
      "post": {
        "description": "This operation validates a proposed certificate request without actually submitting it.Checks for compliance with the specified issuing template and verifies all other references are valid (e.g., `existingCertificateId` is the UUID of an inventory certificate).",
        "operationId": "certificaterequests_validation",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Certificate request validation request": {
                  "description": "Certificate request validation request",
                  "summary": "Certificate request validation",
                  "value": {
                    "apiClientInformation": {
                      "identifier": "192.168.1.68",
                      "type": "Venafi VCert CLI"
                    },
                    "applicationId": "b00701b0-886f-11ed-9f39-3d586ab80ce2",
                    "certificateIssuingTemplateId": "a305d810-886f-11ed-9ccf-dbf748eb1aa9",
                    "certificateSigningRequest": "-----BEGIN CERTIFICATE REQUEST-----\nMIIE2TCCAsECAQAwbDELMAkGA1UEBhMCVVMxDTALBgNVBAgTBFV0YWgxFzAVBgNV\nBAcTDlNhbHQgTGFrZSBDaXR5MQ8wDQYDVQQKEwZWZW5hZmkxDzANBgNVBAsTBmRl\ndm9wczETMBEGA1UEAxMKdmVuYWZpLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIP\nADCCAgoCggIBAKSzq7hSn7on+YhRmt+4ojhfMzd/NVCIXaq+UG4wjyh5QqkZsGAK\n1u82gLvuZXc8i1iKStj5DnVEVBNAydynGztz+ZLaAGuIhx75yl36YrqIV3LyLjxc\nqZMsaJuZi2f0Lxy3bA8Huw/puNZwTBhJNcj2ov00FgGt7DTHdhl0z4nL5keADBMD\nIcYWcH+o2pHBEvDfjmE0yS9MYLQBcek1gKMPMGAjqj8VtbdwKdTQ6LYzkU34Vbp1\nHGD6lhwfkr5wlMnlNOoX658UnXNhgkulcZv3jS2hOhrJzhX6bEK8XvKQevv5d3Tu\nsdk74zyumoe4edwM6wkphjWtXGE4CVBWongzpG08zvDbzdkN31g/u+Isp2mJHfi/\n7rPySj6NzV14GOHnR16zwQB6cpEwzwPigl1lSL0Qv/xjysV0yFaRycZceT0TNj3b\n0ezgV+sSHXwI84IO+9hH5JXOn+llY3gniVxNbgdb8yK3tOPfT9ig3pW3Vcdh02XF\nocmP1/eM6/WYh+ipKqNXpvhW9jf56CEmVSg9sWzyqZ2rCj4i+JC/IxwxANy4vGuX\ny+XHkWJOMt7sSZaiOAel/TVEcA3XA0HV/hEPkakZK5blls2d5IyJUhvOZB1QxpDE\nECemCZ/ZsJR3Bao0JQNABhmnammMRQolfBE5z659+E4pXPIJP+a/UaRtAgMBAAGg\nKDAmBgkqhkiG9w0BCQ4xGTAXMBUGA1UdEQQOMAyCCnZlbmFmaS5jb20wDQYJKoZI\nhvcNAQELBQADggIBAH2oEcLdtRay+EPAky0ly/UM7pEFG9RCs1RoLqGMGeLurxqH\nPvzA7BayOp1TfkxxaLnGzTREFhnEJQhDMyOn52RDrOkHYEBj/hfqi2bKO+mXpJS8\n3n1Hn7H0+aqJXOguG9/L6jmEmEBDCBir8FJuSeHBnG+5A//pXWdivkyjjlY0XlZj\nJI4GqoFAFqDAY/8WFe5A7bEsiLu+vEVEgzhFyDXUYBkZ6DutpOA2cgMN0J+wDP2X\nAsd7KJY1QUB/JX/zUIW57aCHAyntfv+hQ0oDgQV4+p+gNHHrZNLrk9eYyHrqcQA+\n7bEfgbUWUMJjYw0YPwTM801rt/8wHBdOjFgpve6pnC1Xk3hY6i/RKRXCKnEgkloO\nyOc1/WQLVT5sq0hJSJ6JKHY0Z4ZhieiPpUM+CuQu7KBrxkp9DwV23Ttu7pA4FOz4\nAroLuwvVEdi16Hu61kR/BW5WDNvIUox4pttCx77+laTxjJZ+1owNRFtzyMBWi07d\n4p6Xp3WTPSp+rYEJwX3Z4bLKCZUCUkbBFEXMDheK4detAW0qHpE7YvJu0/FiTzVV\n76l+z9p1cI5l0+vKp2lx5pAp7mkiCvrUuBMl78eGE4UtNo1Aa3Y8ccUlC+wYr0+b\nrn7e5SYFU3hTt4nsGurfV5+YyQn0x0kjiS0g7zGGGchFGcVBaeZIDZijA54i\n-----END CERTIFICATE REQUEST-----\n",
                    "csrAttributes": {
                      "commonName": "Venafi.com",
                      "country": "MX",
                      "keyTypeParameters": {
                        "keyCurve": "P256",
                        "keyLength": 2048,
                        "keyType": "RSA"
                      },
                      "locality": "Merida",
                      "organization": "venafi",
                      "organizationalUnits": [
                        "devops"
                      ],
                      "state": "Yucatan",
                      "subjectAlternativeNamesByType": {
                        "dnsNames": [
                          "localhost"
                        ]
                      }
                    },
                    "existingCertificateId": "a14c9ea0-c370-11ed-8b33-b3654a9c754f",
                    "isVaaSGenerated": false
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CertificateRequestRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificate request validation details response": {
                    "description": "Certificate request validation details response",
                    "summary": "Certificate request validation details",
                    "value": {
                      "keyLength": 2048,
                      "keyType": "RSA",
                      "subjectAlternativeNamesByType": {
                        "dNSName": [
                          "localhost"
                        ]
                      },
                      "subjectDN": "C=MX,ST=Yucatan,L=Merida,O=venafi,OU=devops,CN=Venafi.com"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CertificationRequestInformation"
                }
              }
            },
            "description": "Certificate Request was validated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Validate a certificate request",
        "tags": [
          "Certificate Request"
        ]
      }
    },
    "/outagedetection/v1/certificaterequestssearch": {
      "post": {
        "description": "Retrieves the details of certificate requests that match the specified [search expression](https://docs.venafi.cloud/CSH_api_search).",
        "operationId": "getCertificateRequestsByExpression",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Certificate request search request by expression": {
                  "description": "Certificate request search request by expression",
                  "summary": "Certificate request search by expression",
                  "value": {
                    "expression": {
                      "operands": [
                        {
                          "field": "subjectCN",
                          "operator": "EQ",
                          "value": "venafi.cloud"
                        },
                        {
                          "field": "subjectCN",
                          "operator": "EQ",
                          "value": "localhost"
                        }
                      ],
                      "operator": "OR"
                    },
                    "ordering": {
                      "orders": [
                        {
                          "direction": "ASC",
                          "field": "subjectCN"
                        }
                      ]
                    },
                    "paging": {
                      "pageNumber": 0,
                      "pageSize": 10
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Filter2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Certificate request details response": {
                    "description": "Certificate request details response",
                    "summary": "Certificate request details",
                    "value": {
                      "certificateRequests": [
                        {
                          "applicationId": "eff7cb30-cff3-11ed-977d-f9a657c2c463",
                          "caOrderId": "5b:f7:ff:02:86:d0:1f:ed:90:81:02:bb:5a:6b:8b:23:b8:0d:f7:e9",
                          "certificateIds": [
                            "c6e89340-d279-11ed-861a-5154a94578eb",
                            "602cec00-cff4-11ed-b7e2-bb3d5adf81ba",
                            "602794d0-cff4-11ed-b7e2-bb3d5adf81ba"
                          ],
                          "certificateIssuingTemplateId": "e47ea120-cff3-11ed-9ece-cf965f609bfb",
                          "certificateOwnerUserId": "b29cec90-cff1-11ed-97d2-21317ab83359",
                          "companyId": "b11fc270-cff1-11ed-97d2-21317ab83359",
                          "creationDate": "2023-04-03T23:46:38.771+00:00",
                          "id": "c6d8dbd0-d279-11ed-b5e4-151222cdc24b",
                          "keyLength": 4096,
                          "keyType": "RSA",
                          "modificationDate": "2023-04-03T23:46:38.890+00:00",
                          "status": "ISSUED",
                          "subjectAlternativeNamesByType": {
                            "dNSName": [
                              "venafi.com"
                            ]
                          },
                          "subjectCN": "localhost",
                          "subjectDN": "cn=localhost,ou=dev,o=Venafi,c=US,st=Utah,l=Salt Lake City",
                          "validityPeriod": "P2M19D"
                        },
                        {
                          "applicationId": "eff7cb30-cff3-11ed-977d-f9a657c2c463",
                          "caOrderId": "20:04:49:dc:de:54:2a:99:90:8f:d7:04:97:e2:69:39:2f:1a:04:7a",
                          "certificateIds": [
                            "254bac00-d27b-11ed-861a-5154a94578eb",
                            "602cec00-cff4-11ed-b7e2-bb3d5adf81ba",
                            "602794d0-cff4-11ed-b7e2-bb3d5adf81ba"
                          ],
                          "certificateIssuingTemplateId": "e47ea120-cff3-11ed-9ece-cf965f609bfb",
                          "certificateOwnerUserId": "b29cec90-cff1-11ed-97d2-21317ab83359",
                          "companyId": "b11fc270-cff1-11ed-97d2-21317ab83359",
                          "creationDate": "2023-04-03T23:56:26.630+00:00",
                          "id": "253ae320-d27b-11ed-b5e4-151222cdc24b",
                          "keyLength": 4096,
                          "keyType": "RSA",
                          "modificationDate": "2023-04-03T23:56:26.748+00:00",
                          "status": "ISSUED",
                          "subjectAlternativeNamesByType": {
                            "dNSName": [
                              "venafi.com"
                            ]
                          },
                          "subjectCN": "venafi.cloud",
                          "subjectDN": "cn=venafi.cloud,ou=dev,o=Venafi,c=US,st=Utah,l=Salt Lake City",
                          "validityPeriod": "P2M19D"
                        }
                      ],
                      "numFound": 2
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CertificateRequestDocumentResponse"
                }
              }
            },
            "description": "The response body contains the details of the certificate requests."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "The request is either incomplete or malformed."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "The request is either incomplete or malformed."
          }
        },
        "summary": "Get the details of certificate requests matching custom search criteria",
        "tags": [
          "Certificate Request"
        ]
      }
    },
    "/v1/certificateissuingtemplates": {
      "get": {
        "description": "Retrieves the details of issuing templates ordered by `priority` and `certificateAuthority`.",
        "operationId": "certificateissuingtemplate_getAll",
        "parameters": [
          {
            "description": "UUID of a Certificate Authority Account.",
            "in": "query",
            "name": "certificateAuthorityAccountId",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateIssuingTemplateResponse"
                }
              }
            },
            "description": "Details of Issuing Templates in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the details of issuing templates matching simple criteria",
        "tags": [
          "Certificate Policy"
        ]
      },
      "post": {
        "description": "Creates an issuing template.",
        "operationId": "certificateissuingtemplate_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateIssuingTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateIssuingTemplateResponse"
                }
              }
            },
            "description": "Issuing Template was created; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Issuing Template not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Issuing Template already exists."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Add an issuing template",
        "tags": [
          "Certificate Policy"
        ]
      }
    },
    "/v1/certificateissuingtemplates/{id}": {
      "get": {
        "description": "Retrieve the details of the issuing template that has the specified `id`.",
        "operationId": "certificateissuingtemplate_getById",
        "parameters": [
          {
            "description": "UUID of an Issuing Template.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of an Issuing Template.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateIssuingTemplateInformation1"
                }
              }
            },
            "description": "Issuing Template was found; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Issuing Template not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get an issuing template's details",
        "tags": [
          "Certificate Policy"
        ]
      },
      "put": {
        "description": "Updates all the details of the issuing template that has the specified `id`.",
        "operationId": "certificateissuingtemplate_update",
        "parameters": [
          {
            "description": "UUID of an Issuing Template.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of an Issuing Template.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateIssuingTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateIssuingTemplateInformation1"
                }
              }
            },
            "description": "Issuing Template was updated; details in response body."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateIssuingTemplateInformation1"
                }
              }
            },
            "description": "Issuing Template exists."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Issuing Template not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Overwrite an issuing template's details",
        "tags": [
          "Certificate Policy"
        ]
      },
      "delete": {
        "description": "Deletes the issuing template that has the specified `id`.",
        "operationId": "certificateissuingtemplate_delete",
        "parameters": [
          {
            "description": "UUID of an Issuing Template.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of an Issuing Template.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateIssuingTemplateDeleteResponse"
                }
              }
            },
            "description": "Issuing Template was deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Issuing Template not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Remove an issuing template",
        "tags": [
          "Certificate Policy"
        ]
      }
    },
    "/outagedetection/v1/applications": {
      "get": {
        "description": "Returns the details of applications matching the below provided criteria.",
        "operationId": "applications_getAll",
        "parameters": [
          {
            "description": "Indicates whether or not the response should include the `owningUsers` and `owningTeams` details.",
            "in": "query",
            "name": "ownerDetails",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Indicates whether or not the response should exclude applications that are not editable by the current user.",
            "in": "query",
            "name": "ownershipCheck",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Indicates whether or not the response should exclude applications with no issuing templates assigned to them.",
            "in": "query",
            "name": "issuingTemplateAssigned",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "This parameter is deprecated for Application endpoints.",
            "in": "query",
            "name": "ownershipTree",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            },
            "description": "Details of applications in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the details of applications",
        "tags": [
          "Application"
        ]
      },
      "post": {
        "description": "Creates an application.",
        "operationId": "applications_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            },
            "description": "Application was created; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Application already exists."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Add an application",
        "tags": [
          "Application"
        ]
      }
    },
    "/outagedetection/v1/applications/{id}": {
      "get": {
        "description": "Retrieves the details of the application that has the specified `id`.",
        "operationId": "applications_getById",
        "parameters": [
          {
            "description": "UUID of an Application.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of an Application.",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Indicates whether response should include nested ownership data (e.g., `owningContainers`).",
            "in": "query",
            "name": "ownershipTree",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationInformation"
                }
              }
            },
            "description": "Application Information"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Application not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get an application's details",
        "tags": [
          "Application"
        ]
      },
      "put": {
        "description": "Updates (replaces) all details of the application that has the specified `id`.",
        "operationId": "applications_update",
        "parameters": [
          {
            "description": "UUID of an Application.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of an Application.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationInformation"
                }
              }
            },
            "description": " Application was updated; details in response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Application not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update an application's details",
        "tags": [
          "Application"
        ]
      },
      "delete": {
        "description": "Deletes the application that has the specified `id`.",
        "operationId": "applications_delete",
        "parameters": [
          {
            "description": "UUID of an Application.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of an Application.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application was deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Application not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Remove an application",
        "tags": [
          "Application"
        ]
      }
    },
    "/outagedetection/v1/applications/{id}/invitations": {
      "post": {
        "description": "Activates a URL that invites new users to become owners of the application with the specified `id`. The invitation link remains valid for 10 minutes.",
        "operationId": "applications_invitations_create",
        "parameters": [
          {
            "description": "UUID of an Application.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of an Application.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationResponse"
                }
              }
            },
            "description": "If successful, this operation returns a User Invitation link in the response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Creates an invitation link for an application.",
        "tags": [
          "Application"
        ]
      }
    },
    "/outagedetection/v1/applications/{id}/scanaficonfiguration": {
      "get": {
        "description": "Retrieves the *Basic Discovery* (Scanafi) configuration for the application that has the specified `id`.",
        "operationId": "applications_getScanafiConfigById",
        "parameters": [
          {
            "description": "UUID of an Application.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of an Application.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScanafiConfigResponseV1"
                }
              }
            },
            "description": "Basic Discovery configuration in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Application not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the Basic Discovery configuration for an application",
        "tags": [
          "Application"
        ]
      }
    },
    "/outagedetection/v1/applications/{name}/certificateissuingtemplates/{alias}": {
      "get": {
        "description": "Retrieves the details of the certificate issuing template identified by the specified `alias` assigned to the application that has the specified `name`.",
        "operationId": "certificateissuingtemplates_getByAlias",
        "parameters": [
          {
            "description": "Name of an Application.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Alias of an Issuing Template for the specified Application.",
            "in": "path",
            "name": "alias",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateIssuingTemplateInformation2"
                }
              }
            },
            "description": "Issuing Template was found; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Issuing Template not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the details of an issuing template by its alias",
        "tags": [
          "Application"
        ]
      }
    },
    "/outagedetection/v1/applications/certificates": {
      "patch": {
        "description": "Update one or more application assignments for one or more certificates.  Valid actions are ADD, REPLACE and DELETE.",
        "operationId": "applications_assignToCertificates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationsAssignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationsAssignResponse"
                }
              }
            },
            "description": "Certificate application assignments were updated; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Manage application assignments for a set of certificates",
        "tags": [
          "Application"
        ]
      }
    },
    "/outagedetection/v1/applications/name/{name}": {
      "get": {
        "description": "Retrieves the details of the application that has the specified `name`.",
        "operationId": "applications_getByName",
        "parameters": [
          {
            "description": "Name of an Application.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Indicates whether response should include nested ownership data (e.g., `owningContainers`).",
            "in": "query",
            "name": "ownershipTree",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationInformation"
                }
              }
            },
            "description": "Application was found; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Application not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get an application's details by its name",
        "tags": [
          "Application"
        ]
      }
    },
    "/v1/credentialmanagerconfigurations": {
      "get": {
        "description": "Retrieves a set of stored Credential Manager Service configurations.",
        "operationId": "get-public-cms-conf",
        "parameters": [
          {
            "$ref": "#/components/parameters/CMSTypesParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200GetCMSConfigurations"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerErrorContent"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieves a set of Credential Manager Service configurations",
        "tags": [
          "Credential Management"
        ]
      },
      "post": {
        "description": "Adds a set of new Credential Manager Service configurations. Only one Credential Manager Service configuration per `cmsType` per company can exist.",
        "operationId": "post-public-cms-conf",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateCMSConfigurationsBodyRequest"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201CreateCMSConfigurations"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerErrorContent"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Add a set of Credential Manager Service configurations",
        "tags": [
          "Credential Management"
        ]
      },
      "put": {
        "description": "Updates the information of an existing Credential Manager Service configuration.",
        "operationId": "put-public-cms-conf",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateCMSConfigurationsBodyRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200UpdateCMSConfiguration"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerErrorContent"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update a Credential Manager Service configuration",
        "tags": [
          "Credential Management"
        ]
      }
    },
    "/v1/credentialmanagerconfigurations/{id}": {
      "get": {
        "description": "Retrieves a Credential Manager Service configuration by the specified `id`.",
        "operationId": "get-public-cms-conf-id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200GetCMSConfiguration"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerErrorContent"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieves a Credential Manager Service configuration by ID",
        "tags": [
          "Credential Management"
        ]
      },
      "delete": {
        "description": "Deletes a Credential Manager Service configuration by the specified `id`.",
        "operationId": "delete-public-cms-conf-id",
        "responses": {
          "204": {
            "description": "The returned HTTP code if the Credential Manager Service configuration was deleted successfully."
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerErrorContent"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Delete a Credential Manager Service configuration by ID",
        "tags": [
          "Credential Management"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/CMSConfigIdParam"
        }
      ]
    },
    "/v1/credentialmanagerconfigurations/test": {
      "post": {
        "description": "Tests the connection from Venafi to a configured privileged access management through selected VSatellites.",
        "operationId": "post-public-cms-conf-test",
        "requestBody": {
          "$ref": "#/components/requestBodies/TestCMSConfigurationBodyRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200TestCMSConfiguration"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerErrorContent"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Test the connection to a privileged access management",
        "tags": [
          "Credential Management"
        ]
      }
    },
    "/v1/credentialmanagerconfigurations/{id}/test": {
      "post": {
        "description": "Tests the connection from Venafi to a configured privileged access management through selected VSatellites using a specified `id`.",
        "operationId": "post-public-cms-conf-test-id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200TestCMSConfiguration"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerErrorContent"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Test the connection to an external Privilege Access Management by ID",
        "tags": [
          "Credential Management"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/CMSConfigIdParam"
        }
      ]
    },
    "/v1/credentials": {
      "get": {
        "description": "Retrieves a list of shared credentials for a company.",
        "operationId": "get-public-cms-credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/CMSCredentialDetailsParam"
          },
          {
            "$ref": "#/components/parameters/CMSTypesParam"
          },
          {
            "$ref": "#/components/parameters/CredentialIdsParam"
          },
          {
            "$ref": "#/components/parameters/TeamIdsParam"
          },
          {
            "$ref": "#/components/parameters/AuthTypesParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200GetCredentials"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerErrorContent"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieves credentials for a company",
        "tags": [
          "Credential Management"
        ]
      },
      "post": {
        "description": "Adds a set of new shared credentials. The `name` for each credential must be unique.",
        "operationId": "post-public-cms-credential",
        "requestBody": {
          "$ref": "#/components/requestBodies/AddCredentialsBodyRequest"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201AddCredentials"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerErrorContent"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Add a set of new shared credentials",
        "tags": [
          "Credential Management"
        ]
      },
      "put": {
        "description": "Updates the information of an existing shared credential.",
        "operationId": "put-public-cms-credential",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateCredentialBodyRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200UpdateCredential"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerErrorContent"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update a shared credential",
        "tags": [
          "Credential Management"
        ]
      },
      "delete": {
        "description": "Deletes existing shared credentials specified in the query parameter list of `ids`.",
        "operationId": "delete-public-cms-credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/CredentialIdsParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200DeleteCredentials"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerErrorContent"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Delete shared credentials",
        "tags": [
          "Credential Management"
        ]
      }
    },
    "/v1/credentials/{id}": {
      "get": {
        "description": "Retrieves the credential matching with provided `id`.",
        "operationId": "get-public-cms-credential-id",
        "parameters": [
          {
            "$ref": "#/components/parameters/CMSCredentialDetailsParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200GetCredential"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerErrorContent"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieves shared credential by ID",
        "tags": [
          "Credential Management"
        ]
      },
      "delete": {
        "description": "Deletes the shared credential by the specified `id`.",
        "operationId": "delete-public-cms-credential-id",
        "responses": {
          "204": {
            "description": "The returned http code if the credential was deleted successfully."
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerErrorContent"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Delete shared credential by ID",
        "tags": [
          "Credential Management"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/CredentialIdParam"
        }
      ]
    },
    "/v1/credentials/test": {
      "post": {
        "description": "Tests the access to a shared credential using a specified `id` or by providing credential values. If both an `id` and parameters are provided, parameters override existing credential values.",
        "operationId": "post-public-cms-credential-test-id",
        "requestBody": {
          "$ref": "#/components/requestBodies/TestCredentialBodyRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200TestCredential"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerErrorContent"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Test the access to shared credential by ID",
        "tags": [
          "Credential Management"
        ]
      }
    },
    "/v1/machineidentities": {
      "get": {
        "description": "Retrieves the details of all machine identities..",
        "operationId": "machineidentities_getAll",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineIdentityResponse"
                }
              }
            },
            "description": "All Machine Identities for the company."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the details of all machine identities",
        "tags": [
          "Machine Identities"
        ]
      },
      "post": {
        "description": "Creates a machine identity for a machine.",
        "operationId": "machineidentities_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineIdentityCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineIdentityInformation"
                }
              }
            },
            "description": "Machine Identity was created; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Add a machine identity to a machine",
        "tags": [
          "Machine Identities"
        ]
      }
    },
    "/v1/machineidentities/{id}": {
      "get": {
        "description": "Retrieves the machine identity that has the specified `id`.",
        "operationId": "machineidentities_getById",
        "parameters": [
          {
            "description": "UUID of a Machine Identity.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a Machine Identity.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineIdentityInformation"
                }
              }
            },
            "description": "Machine Identity matching specified id"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Machine Identity not found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get a machine identity's details",
        "tags": [
          "Machine Identities"
        ]
      },
      "delete": {
        "description": "Deletes the machine identity that has the specified `id`.",
        "operationId": "machineidentities_delete",
        "parameters": [
          {
            "description": "UUID of a Machine Identity.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a Machine Identity.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Machine Identity was deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Machine Identity not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Remove a machine identity",
        "tags": [
          "Machine Identities"
        ]
      },
      "patch": {
        "description": "CUpdates specific details of the machine identity that has the specified `id`.",
        "operationId": "machineidentities_update",
        "parameters": [
          {
            "description": "UUID of a Machine Identity.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a Machine Identity.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineIdentityUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineIdentityInformation"
                }
              }
            },
            "description": "Machine Identity was updated; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Machine Identity not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update a machine identity's details",
        "tags": [
          "Machine Identities"
        ]
      }
    },
    "/v1/machineidentities/{id}/workflows": {
      "post": {
        "description": "Used to initiate a workflow like 'testConnection' for the machine that has the specified `id`.",
        "operationId": "machineidentities_initiateWorkflow",
        "parameters": [
          {
            "description": "UUID of a Machine Identity.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a Machine Identity.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineIdentityWorkflowRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineIdentityWorkflowInformation"
                }
              }
            },
            "description": "Workflow was initiated; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Machine identity not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Initiate a machine workflow",
        "tags": [
          "Machine Identities"
        ]
      }
    },
    "/v1/machineidentitysearch": {
      "post": {
        "description": "Retrieves the details of machine identities that match the specified [search expression](https://docs.venafi.cloud/CSH_api_search).",
        "operationId": "getMachineIdentitiesByExpression",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineIdentitySearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineIdentityDocumentResponse"
                }
              }
            },
            "description": "Details of Machine Identities in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "summary": "Get the details of machine identities matching search criteria.",
        "tags": [
          "Machine Identities"
        ]
      }
    },
    "/v1/machinetypes": {
      "get": {
        "description": "Retrieve the details of all available machine types.",
        "operationId": "machineTypes_getAll",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineTypeResponse"
                }
              }
            },
            "description": "Details of Machine Types in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the details of all machine types",
        "tags": [
          "Machine Types"
        ]
      }
    },
    "/v1/machines": {
      "get": {
        "description": "Retrieves the details of all machines.",
        "operationId": "machines_getAll",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachinesResponse"
                }
              }
            },
            "description": "Details of Machines in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the details of all machines",
        "tags": [
          "Machines"
        ]
      },
      "post": {
        "description": "Creates a machine corresponding to the specified `machineTypeId`.",
        "operationId": "machines_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineInformation"
                }
              }
            },
            "description": "Machine was created; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Add a machine",
        "tags": [
          "Machines"
        ]
      }
    },
    "/v1/machines/{id}": {
      "get": {
        "description": "Retrieves the details of the machine that matches the specified  `id`.",
        "operationId": "machines_getById",
        "parameters": [
          {
            "description": "UUID of a Machine",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a Machine",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineInformation"
                }
              }
            },
            "description": "Machine was found; details in the response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Machine not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get a machine's details",
        "tags": [
          "Machines"
        ]
      },
      "delete": {
        "description": "Deletes a machine that has the specified `id`.",
        "operationId": "machines_delete",
        "parameters": [
          {
            "description": "UUID of a Machine Identity.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a Machine Identity.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Machine deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request conditions failed."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Certificate installation not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request conditions failed."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Delete a machine",
        "tags": [
          "Machines"
        ]
      },
      "patch": {
        "description": "Updates specific details of the machine that matches the specified `id`.",
        "operationId": "machines_update",
        "parameters": [
          {
            "description": "UUID of a Machine Identity.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a Machine Identity.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineInformation"
                }
              }
            },
            "description": "Machine was updated; details in the response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Machine not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update a machine's details",
        "tags": [
          "Machines"
        ]
      }
    },
    "/v1/machines/{id}/workflows": {
      "post": {
        "description": "Triggers the beginning of the workflow.",
        "operationId": "machines_initiateWorkflow",
        "parameters": [
          {
            "description": "UUID of a Machine Identity.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a Machine Identity.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineWorkflowRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineInformation"
                }
              }
            },
            "description": "Workflow initiated successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request conditions failed."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Initiate the workflow",
        "tags": [
          "Machines"
        ]
      }
    },
    "/v1/machinesearch": {
      "post": {
        "description": "Retrieves the details of machines that match the specified [search expression](https://docs.venafi.cloud/CSH_api_search).",
        "operationId": "getMachinesByExpression",
        "parameters": [
          {
            "description": "Indicates whether response should include nested ownership data (e.g., `owningContainers`)",
            "in": "query",
            "name": "ownershipTree",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachinesSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDocumentResponse"
                }
              }
            },
            "description": "Details of Machines in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "summary": "Get the details of machines matching search criteria",
        "tags": [
          "Machines"
        ]
      }
    },
    "/v1/machines/{id}/batchprovisionings/abort": {
      "post": {
        "description": "Triggers the abort operation on the current batch provisioning process for the machine with the specified `id`.",
        "operationId": "abort-v1-batchprovisionings-forMachineId",
        "parameters": [
          {
            "description": "UUID of a Machine.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a Machine.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Batch provisioning abort success."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Operation forbidden."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Active batch provisioning not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Abort batch provisioning not allowed."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Abort active batch provisioning for a machine by ID",
        "tags": [
          "Machines"
        ]
      }
    },
    "/v1/machines/{id}/discovery": {
      "get": {
        "description": "Retrieves the details of the machine's discovery.",
        "operationId": "machineDiscoveryResults_getByMachineId",
        "parameters": [
          {
            "description": "UUID of a Machine Identity.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a Machine Identity.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDiscoveryResultInformation"
                }
              }
            },
            "description": "Discovery result for machine was found; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "The discovery result for the machine was not found. It is possible that discovery was never initiated. Run discovery and try again."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the discovery results for a machine by its ID",
        "tags": [
          "Machines"
        ]
      }
    },
    "/v1/machines/{id}/discovery/abort": {
      "post": {
        "description": "Aborts an active discovery.",
        "operationId": "machineDiscoveryResults_abortdiscovery",
        "parameters": [
          {
            "description": "UUID of a Machine.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a Machine.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineInformation"
                }
              }
            },
            "description": "Abort discovery success."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Operation forbidden."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Active discovery not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Abort discovery not allowed."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Abort machine discovery",
        "tags": [
          "Machines"
        ]
      }
    },
    "/v1/users": {
      "get": {
        "description": "Retrieve list of users matching the criteria. Note that this operation might result in a larger-than-expected dataset.operation can potentially be expensive as resulting dataset may be large",
        "operationId": "get-v1-users",
        "parameters": [
          {
            "description": "Current user status.",
            "in": "query",
            "name": "userStatus",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/UserStatus"
              },
              "type": "array"
            }
          },
          {
            "description": "Username string; Accepts regex",
            "in": "query",
            "name": "username",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": "All users"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve users matching specified criteria",
        "tags": [
          "Users"
        ]
      }
    },
    "/v1/users/{id}": {
      "get": {
        "description": "Retrieve user with 'id' attribute matching specified value.",
        "operationId": "get-v1-users-byId",
        "parameters": [
          {
            "description": "UUID of a user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a user",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInformation2"
                }
              }
            },
            "description": "User matching specified userId"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request conditions failed"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "User not found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request conditions failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve user details by user ID",
        "tags": [
          "Users"
        ]
      }
    },
    "/v1/users/{id}/accounttype": {
      "put": {
        "description": "Update account type for user with 'id' attribute matching specified value.",
        "operationId": "put-v1-users-byId-accounttype",
        "parameters": [
          {
            "description": "UUID of a user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a user",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAccountTypeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInformation2"
                }
              }
            },
            "description": "User account type was updated. Updated user details in response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "User was not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update user account type.",
        "tags": [
          "Users"
        ]
      }
    },
    "/v1/users/{id}/locallogin": {
      "put": {
        "description": "Enable/disable local login for specified user.",
        "operationId": "put-v1-users-byId-locallogin",
        "parameters": [
          {
            "description": "UUID of a user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a user.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocalLoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInformation2"
                }
              }
            },
            "description": "Local login property for the user was updated. Updated user details in response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "User not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Enable/disable local login for user",
        "tags": [
          "Users"
        ]
      }
    },
    "/v1/users/{id}/roles": {
      "put": {
        "description": "Update a user's currently assigned user role to limit or expand permissions. Learn more about [user roles](https://docs.venafi.cloud/CSH_user_roles_defined)",
        "operationId": "put-v1-users-byId-roles",
        "parameters": [
          {
            "description": "UUID of a user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a user.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInformation2"
                }
              }
            },
            "description": "User roles were updated. The newly assigned user role is given in the response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "User not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update user roles.",
        "tags": [
          "Users"
        ]
      }
    },
    "/v1/users/username/{username}": {
      "get": {
        "description": "Lets you use the 'username' attribute to get the details of the associated user; specified value should be an email address.",
        "operationId": "get-v1-users-username-byUsername",
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": "Details of the user matching specified username."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "User not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve user details by username",
        "tags": [
          "Users"
        ]
      }
    },
    "/v1/useraccounts": {
      "get": {
        "description": "Retrieve user account information for API key specified in header: User details, User's API key details and Associated company details.",
        "operationId": "useraccounts_getByAuth",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountResponse"
                }
              }
            },
            "description": "Authenticated user's account information: user details, user's API key details, and associated company details."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "User account was not found for the specified API Key."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve an authenticated user's account details",
        "tags": [
          "User Accounts"
        ]
      }
    },
    "/v1/teams": {
      "get": {
        "description": "Retrieve teams for the current company",
        "operationId": "teams_getAll",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamsResponse"
                }
              }
            },
            "description": "List of teams."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve teams for the current company",
        "tags": [
          "Teams"
        ]
      },
      "post": {
        "description": "Creates a team for the company with which the authenticated user is associated.",
        "operationId": "teams_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInformation2"
                }
              }
            },
            "description": "Team created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Add a team",
        "tags": [
          "Teams"
        ]
      }
    },
    "/v1/teams/{id}": {
      "get": {
        "description": "Retrieve the details of a team that has the specified `id`.",
        "operationId": "teams_getById",
        "parameters": [
          {
            "description": " UUID of a team.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": " UUID of a team.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInformation2"
                }
              }
            },
            "description": "Team's details."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get a team's details",
        "tags": [
          "Teams"
        ]
      },
      "delete": {
        "description": "Deletes the team with specified `id`.",
        "operationId": "teams_delete",
        "parameters": [
          {
            "description": "UUID of a team.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a team.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Team was deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "delete a team",
        "tags": [
          "Teams"
        ]
      },
      "patch": {
        "description": "Updates the details of a team that matches the specified team `id`.",
        "operationId": "teams_update",
        "parameters": [
          {
            "description": "UUID of a team.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a team.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInformation2"
                }
              }
            },
            "description": "Successfully updated team properties."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update team's details",
        "tags": [
          "Teams"
        ]
      }
    },
    "/v1/teams/{id}/members": {
      "post": {
        "description": "Adds members to the team with specified team's`id`.",
        "operationId": "teams_members_add",
        "parameters": [
          {
            "description": "UUID of a team.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a team.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamMembersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInformation2"
                }
              }
            },
            "description": "Successfully added team members. Updated team details in the response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Add team members",
        "tags": [
          "Teams"
        ]
      },
      "delete": {
        "description": "Removes team members with the specified team's `id`.",
        "operationId": "teams_members_delete",
        "parameters": [
          {
            "description": "UUID of a team.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a team.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamMembersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInformation2"
                }
              }
            },
            "description": "Members were removed. Updated team details in response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Remove team members",
        "tags": [
          "Teams"
        ]
      }
    },
    "/v1/teams/{id}/owners": {
      "post": {
        "description": "Adds owners to the team with the specified team's `id`.",
        "operationId": "teams_members_owners_add",
        "parameters": [
          {
            "description": "UUID of a team.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a team.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamOwnersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInformation2"
                }
              }
            },
            "description": "Successfully added Team owners."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Add team owners",
        "tags": [
          "Teams"
        ]
      },
      "delete": {
        "description": "Removes owners from the team with the specified team's `id`.",
        "operationId": "teams_members_owners_remove",
        "parameters": [
          {
            "description": "UUID of a team.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of a team.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamOwnersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInformation2"
                }
              }
            },
            "description": "Owners were removed. Updated team details in response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Remove team owners",
        "tags": [
          "Teams"
        ]
      }
    },
    "/v1/activitylogsearch": {
      "post": {
        "description": "Request specific event log data that matches your filter criteria and include a total count of entries in the response.",
        "operationId": "activitylogs_getByExpression",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Activity log search request by expression": {
                  "description": "Activity log search request by expression",
                  "summary": "Activity log search by expression",
                  "value": {
                    "expression": {
                      "operands": [
                        {
                          "field": "activityType",
                          "operator": "EQ",
                          "value": "Authentication"
                        },
                        {
                          "field": "activityName",
                          "operator": "EQ",
                          "value": "Login Succeeded"
                        }
                      ],
                      "operator": "AND"
                    },
                    "ordering": {
                      "orders": [
                        {
                          "direction": "DESC",
                          "field": "activityDate"
                        }
                      ]
                    },
                    "paging": {
                      "pageNumber": 0,
                      "pageSize": 10
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ActivityLogFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityLogEntriesResponse"
                }
              }
            },
            "description": "Total count and list of matching log entries."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve count and activity log entries matching search criteria",
        "tags": [
          "Event Logs"
        ]
      }
    },
    "/v1/activitylogsearch/export": {
      "post": {
        "description": "Request specific event log data that matches your filter criteria. You can even specify the format in the header as either JSON or CSV.",
        "operationId": "activitylogs_getAllByExpression",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Activity log search request by expression": {
                  "description": "Activity log search request by expression",
                  "summary": "Activity log search by expression",
                  "value": {
                    "expression": {
                      "operands": [
                        {
                          "field": "activityType",
                          "operator": "EQ",
                          "value": "Authentication"
                        },
                        {
                          "field": "activityName",
                          "operator": "EQ",
                          "value": "Login Succeeded"
                        }
                      ],
                      "operator": "AND"
                    },
                    "ordering": {
                      "orders": [
                        {
                          "direction": "DESC",
                          "field": "activityDate"
                        }
                      ]
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ActivityLogFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ExportedActivityLogEntryInformation"
                  },
                  "type": "array"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "List of matching log entries."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Export filtered event log data to JSON or CSV formats",
        "tags": [
          "Event Logs"
        ]
      }
    },
    "/v1/activitytypes": {
      "get": {
        "description": "Retrieve types of activities used for event logging, such as failed login attempts or events that are critical. Learn more about [event logging](https://docs.venafi.cloud/vaas/logging/c-about-activity-logging/).",
        "operationId": "activitylogtypes_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ActivityLogType"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Types of activities in event logging; details in response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve types of activities used for event logging",
        "tags": [
          "Event Logs"
        ]
      }
    },
    "/v1/edgeencryptionkeys": {
      "get": {
        "description": "Retrieve the list of edge encryption keys based on query parameters",
        "operationId": "edgeencryptionkeys_getAll",
        "parameters": [
          {
            "in": "query",
            "name": "edgeInstanceId",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncryptionKeysResponse"
                }
              }
            },
            "description": "List of Edge Encryption keys"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve Edge Encryption Keys",
        "tags": [
          "VSatellite"
        ]
      }
    },
    "/v1/edgeencryptionkeys/{id}": {
      "get": {
        "description": "Retrieve edge encryption key with 'id' attribute matching specified value; specified value should be string not numeric",
        "operationId": "edgeencryptionkeys_getById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncryptionKeyInformation"
                }
              }
            },
            "description": "Encryption key information"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Encryption key not found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve Edge Encryption Key By Id",
        "tags": [
          "VSatellite"
        ]
      }
    },
    "/v1/edgeinstances": {
      "get": {
        "description": "Retrieve list of all edge instances for company",
        "operationId": "edgeinstances_getAll",
        "parameters": [
          {
            "in": "query",
            "name": "environmentId",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeInstanceResponse"
                }
              }
            },
            "description": "Edge instances matching specified id"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve Edge Instances",
        "tags": [
          "VSatellite"
        ]
      }
    },
    "/v1/edgeinstances/{id}": {
      "get": {
        "description": "Retrieve edge instance with 'id' attribute matching specified value; specified value should be uuid not numeric",
        "operationId": "edgeinstances_getById",
        "parameters": [
          {
            "description": "EdgeInstance ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "EdgeInstance ID",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "statusDetails",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeInstanceInformation"
                }
              }
            },
            "description": "Edge instance matching specified id"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Edge instance not found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve Edge Instance By Id",
        "tags": [
          "VSatellite"
        ]
      }
    },
    "/v1/connectors/{id}": {
      "get": {
        "description": "Retrieve a connector with 'id' attribute matching specified value; specified value should be uuid not numeric",
        "operationId": "connectors_getById",
        "parameters": [
          {
            "description": "Connector ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Connector ID",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorsInformation"
                }
              }
            },
            "description": "Connector matching specified id"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Connector Conditions Failed"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Connector not found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Connector Conditions Failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve a Connector By Id",
        "tags": [
          "Webhooks"
        ]
      },
      "put": {
        "description": "Can be used to update specific fields. Only fields specified in the request will be updated.",
        "operationId": "connectors_update",
        "parameters": [
          {
            "description": "Connector ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Connector ID",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorsUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorsInformation"
                }
              }
            },
            "description": "Connector Updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Connector Not Found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update Connector properties",
        "tags": [
          "Webhooks"
        ]
      },
      "delete": {
        "description": "Delete a Connector",
        "operationId": "connectors_delete",
        "parameters": [
          {
            "description": "Connector ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Connector ID",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Connector Deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Connector Not Found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Delete a Connector",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/v1/connectors": {
      "get": {
        "description": "Retrieve a list of all Connectors for a company",
        "operationId": "connectors_getAll",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorsResponse"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve all Connectors for a company",
        "tags": [
          "Webhooks"
        ]
      },
      "post": {
        "description": "Create a Connector for your company",
        "operationId": "connectors_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorsCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorsInformation"
                }
              }
            },
            "description": "Connector Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Create a Connector",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/outagedetection/v1/inventorymonitoringconfig/{type}": {
      "get": {
        "description": "Retrieves the details of the inventory monitoring configuration by configuration type",
        "operationId": "inventorymonitoringconfiguration_getByType",
        "parameters": [
          {
            "description": "Configuration type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "description": "Configuration type",
              "enum": [
                "CERTIFICATE_EXPIRATION"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Retrieves the details of the inventory monitoring configuration.": {
                    "description": "Retrieves the details of the inventory monitoring configuration.",
                    "summary": "Retrieves the details of the inventory monitoring configuration.",
                    "value": {
                      "inventoryMonitoringConfiguration": {
                        "applicationIds": [],
                        "enabled": true,
                        "includeUnassignedCertificates": true,
                        "inventoryMonitoringConfigurationType": "CERTIFICATE_EXPIRATION",
                        "thresholds": [7, 14, 30]
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/InventoryMonitoringConfigurationResponse"
                }
              }
            },
            "description": "Details of inventory monitoring configuration in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Inventory monitoring configuration not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the details of the current inventory monitoring configuration",
        "tags": [
          "Certificate Inventory Monitoring"
        ]
      },
      "put": {
        "description": "Updates existing inventory monitoring configuration",
        "operationId": "inventorymonitoringconfiguration_update",
        "parameters": [
          {
            "description": "Configuration type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "description": "Type of the configuration",
              "enum": [
                "CERTIFICATE_EXPIRATION"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "An example for disabling the configuration.": {
                  "description": "An example for disabling the configuration.",
                  "value": {
                    "inventoryMonitoringConfiguration": {
                      "applicationIds": [],
                      "enabled": false,
                      "includeUnassignedCertificates": true,
                      "inventoryMonitoringConfigurationType": "CERTIFICATE_EXPIRATION",
                      "thresholds": []
                    }
                  }
                },
                "An example for enabling the configuration.": {
                  "description": "An example for enabling the configuration.",
                  "value": {
                    "inventoryMonitoringConfiguration": {
                      "applicationIds": [],
                      "enabled": true,
                      "includeUnassignedCertificates": true,
                      "inventoryMonitoringConfigurationType": "CERTIFICATE_EXPIRATION",
                      "thresholds": [7, 14, 30]
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/InventoryMonitoringConfigRequest"
              }
            }
          },
          "description": "Updates properties of the inventory monitoring configuration.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Updates properties of the inventory monitoring configuration.": {
                    "description": "Updates properties of the inventory monitoring configuration.",
                    "summary": "Updates properties of the inventory monitoring configuration.",
                    "value": {
                      "inventoryMonitoringConfiguration": {
                        "applicationIds": [],
                        "enabled": true,
                        "includeUnassignedCertificates": true,
                        "inventoryMonitoringConfigurationType": "CERTIFICATE_EXPIRATION",
                        "thresholds": [7, 14, 30]
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/InventoryMonitoringConfigurationResponse"
                }
              }
            },
            "description": "Inventory monitoring configuration was updated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Updates existing inventory monitoring configuration",
        "tags": [
          "Certificate Inventory Monitoring"
        ]
      }
    },
    "/outagedetection/v1/inventorymonitoringconfig/{type}/scheduler": {
      "put": {
        "description": "Update inventory monitoring scheduler by type",
        "operationId": "inventorymonitoringconfigurationscheduler_update",
        "parameters": [
          {
            "description": "Configuration type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "description": "Configuration type",
              "enum": [
                "CERTIFICATE_EXPIRATION"
              ],
              "type": "string"
            }
          },
          {
            "description": "Start the scheduler now",
            "in": "query",
            "name": "runNow",
            "schema": {
              "default": true,
              "description": "Start the scheduler now",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryMonitoringSchedulerInformation"
                }
              }
            },
            "description": "Inventory monitoring scheduler was updated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update inventory monitoring scheduler by type",
        "tags": [
          "Certificate Inventory Monitoring"
        ]
      }
    },
    "/v1/expirationnotifications/tenantconfiguration": {
      "get": {
        "description": "Retrieve the certificate expiration notification configuration for the current tenant",
        "operationId": "get-v1-tenant-expiration-notification-configuration",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "simple": {
                    "$ref": "#/components/examples/TenantExpirationNotificationConfigurationExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TenantExpirationNotificationConfiguration"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve the certificate expiration notification configuration",
        "tags": [
          "Certificate Inventory Monitoring"
        ]
      },
      "put": {
        "description": "Update the certificate expiration notification configuration for the current tenant",
        "operationId": "put-v1-tenant-expiration-notification-configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "simple": {
                  "$ref": "#/components/examples/TenantExpirationNotificationConfigurationExample"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TenantExpirationNotificationConfiguration"
              }
            }
          },
          "description": "The options to apply",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "simple": {
                    "$ref": "#/components/examples/TenantExpirationNotificationConfigurationExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TenantExpirationNotificationConfiguration"
                }
              }
            },
            "description": "Success. The tenant configuration was successfully updated."
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update the certificate expiration notification configuration",
        "tags": [
          "Certificate Inventory Monitoring"
        ]
      }
    },
    "/v1/autorenewal/tenantconfiguration": {
      "get": {
        "description": "Retrieve the certificate expiration monitoring configuration for the current tenant",
        "operationId": "get-v1-tenant-renewal-configuration",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "id": "12a05220-4352-11ee-ac28-c1379e5decf9",
                  "renewalWindow": {
                    "days": 30
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TenantRenewalConfiguration"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve the monitoring configuration",
        "tags": [
          "Certificate Auto-renewal Monitoring"
        ]
      },
      "put": {
        "description": "Update the certificate expiration monitoring configuration for the current tenant",
        "operationId": "put-v1-tenant-renewal-configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantRenewalConfiguration"
              }
            }
          },
          "description": "The options to apply",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantRenewalConfiguration"
                }
              }
            },
            "description": "Success. The tenant configuration was successfully updated."
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update the monitoring configuration",
        "tags": [
          "Certificate Auto-renewal Monitoring"
        ]
      }
    },
    "/v1/autorenewal/trigger": {
      "post": {
        "description": "The certificate renewal check is normally scheduled to run daily. This operation attempts to start the process for the current tenant now.",
        "operationId": "post-v1-run-autorenewal",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "status": {
                    "$ref": "#/components/examples/StatusResponseExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            },
            "description": "Success. The auto-renewal check process was triggered."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Attempt to initiate the certificate renewal check process now.",
        "tags": [
          "Certificate Auto-renewal Monitoring"
        ]
      }
    },
    "/v1/autorenewal/status": {
      "get": {
        "description": "Get details about the status of the certificate auto-renewal monitoring process.",
        "operationId": "get-v1-status",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "status": {
                    "$ref": "#/components/examples/StatusResponseExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the current certificate auto-renewal monitoring status",
        "tags": [
          "Certificate Auto-renewal Monitoring"
        ]
      }
    },
    "/v1/autorenewal/{application_id}/configuration": {
      "get": {
        "description": "Retrieve the certificate expiration monitoring configuration for the specified application",
        "operationId": "get-v1-application-renewal-configuration",
        "parameters": [
          {
            "description": "The ID of the application that you would like to retrieve configuration for",
            "example": "22153ae0-4352-11ee-b95c-3531a284802b",
            "in": "path",
            "name": "application_id",
            "required": true,
            "schema": {
              "format": "UUID",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "defaults": {
                    "$ref": "#/components/examples/ApplicationRenewalConfigurationExampleDefault"
                  },
                  "modified": {
                    "$ref": "#/components/examples/ApplicationRenewalConfigurationExampleModified"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApplicationRenewalConfiguration"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve the monitoring configuration",
        "tags": [
          "Certificate Auto-renewal Monitoring"
        ]
      },
      "put": {
        "description": "Update the certificate expiration monitoring configuration for the specified application",
        "operationId": "put-v1-application-renewal-configuration",
        "parameters": [
          {
            "description": "The ID of the application you want to update",
            "example": "22153ae0-4352-11ee-b95c-3531a284802b",
            "in": "path",
            "name": "application_id",
            "required": true,
            "schema": {
              "format": "UUID",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "modified": {
                  "$ref": "#/components/examples/ApplicationRenewalConfigurationExampleModified"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ApplicationRenewalConfiguration"
              }
            }
          },
          "description": "The options to apply",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationRenewalConfiguration"
                }
              }
            },
            "description": "Success. The application configuration was successfully updated."
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update the monitoring configuration",
        "tags": [
          "Certificate Auto-renewal Monitoring"
        ]
      }
    },
    "/v1/expirationreports/tenantconfiguration": {
      "get": {
        "description": "Retrieve the certificate expiration reports configuration for the current tenant",
        "operationId": "get-v1-tenant-expiration-reports-configuration",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "simple": {
                    "$ref": "#/components/examples/TenantExpirationReportsConfigurationExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TenantExpirationReportsConfiguration"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve the certificate expiration reports configuration",
        "tags": [
          "Certificate Expiration Reports"
        ]
      },
      "put": {
        "description": "Update the certificate expiration reports configuration for the current tenant",
        "operationId": "put-v1-tenant-expiration-reports-configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "simple": {
                  "$ref": "#/components/examples/TenantExpirationReportsConfigurationExample"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TenantExpirationReportsConfiguration"
              }
            }
          },
          "description": "The options to apply",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "simple": {
                    "$ref": "#/components/examples/TenantExpirationReportsConfigurationExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TenantExpirationReportsConfiguration"
                }
              }
            },
            "description": "Success. The tenant configuration was successfully updated."
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update the certificate expiration reports configuration",
        "tags": [
          "Certificate Expiration Reports"
        ]
      }
    },
    "/v1/expirationreports/trigger": {
      "post": {
        "description": "The certificate reports job is normally scheduled per the tenant configuration. This operation attempts to start the process for the current tenant now.",
        "operationId": "post-v1-run-reports",
        "responses": {
          "204": {
            "description": "Success. The reports check process was triggered."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Attempt to initiate the certificate reports process.",
        "tags": [
          "Certificate Expiration Reports"
        ]
      }
    },
    "/v1/tags": {
      "get": {
        "description": "Retrieve details of all available tags",
        "operationId": "tags_getAll",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "The count and the properties of the tags.": {
                    "description": "The count and the properties of the tags.",
                    "summary": "The count and the properties of the tags.",
                    "value": {
                      "count": 1,
                      "tags": [
                        {
                          "companyId": "03eb6e61-9806-11ed-84f2-c747fb71e467",
                          "id": "7b80e0b0-a08d-11ed-bbc0-252385d6d389",
                          "isReserved": false,
                          "key": "application",
                          "name": "Application"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            },
            "description": "Details of tags in response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve all tags",
        "tags": [
          "Tags"
        ]
      },
      "post": {
        "description": "Create tag with optional values",
        "operationId": "tags_create",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "An example for creation of new tag with values.": {
                  "description": "An example for creation of new tag with values.",
                  "value": {
                    "name": "Application",
                    "values": [
                      "TLS Protect",
                      "Jetstack"
                    ]
                  }
                },
                "An example for creation of new tag.": {
                  "description": "An example for creation of new tag.",
                  "value": {
                    "name": "Application"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TagRequest"
              }
            }
          },
          "description": "Properties of the new tag.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Properties of the created tag.": {
                    "description": "Properties of the created tag.",
                    "summary": "Properties of the created tag.",
                    "value": {
                      "companyId": "03eb6e61-9806-11ed-84f2-c747fb71e467",
                      "id": "92730dc0-a08d-11ed-bbc0-252385d6d389",
                      "isReserved": false,
                      "key": "application",
                      "name": "Application"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TagInformation"
                }
              }
            },
            "description": "Tag is created. Details in response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Create a tag",
        "tags": [
          "Tags"
        ]
      }
    },
    "/v1/tags/{name}": {
      "get": {
        "description": "Retrieve a tag with 'name' attribute matching a specified value",
        "operationId": "tags_getByName",
        "parameters": [
          {
            "description": "Name of the tag.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "description": "Name of the tag.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Properties of the tag.": {
                    "description": "Properties of the tag.",
                    "summary": "Properties of the tag.",
                    "value": {
                      "companyId": "03eb6e61-9806-11ed-84f2-c747fb71e467",
                      "id": "7268d820-a08d-11ed-bbc0-252385d6d389",
                      "isReserved": false,
                      "key": "application",
                      "name": "Application"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TagInformation"
                }
              }
            },
            "description": "Details of tag in response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Tag not found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve tag by name",
        "tags": [
          "Tags"
        ]
      },
      "delete": {
        "description": "Delete a tag with 'name' attribute matching a specified value",
        "operationId": "tags_deleteByName",
        "parameters": [
          {
            "description": "Name of the tag.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "description": "Name of the tag.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Tag is deleted"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Tag not found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Delete tag by name",
        "tags": [
          "Tags"
        ]
      }
    },
    "/v1/tags/{name}/values": {
      "get": {
        "description": "Retrieve tag values for a tag with 'name' attribute matching specified value",
        "operationId": "tags_get_values",
        "parameters": [
          {
            "description": "Name of the tag.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "description": "Name of the tag.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "The count and the properties of the values.": {
                    "description": "The count and the properties of the values.",
                    "summary": "The count and the properties of the values.",
                    "value": {
                      "count": 2,
                      "values": [
                        {
                          "companyId": "03eb6e61-9806-11ed-84f2-c747fb71e467",
                          "id": "01e2f810-a0b5-11ed-bbc0-252385d6d389",
                          "tagId": "7268d820-a08d-11ed-bbc0-252385d6d389",
                          "value": "TLS Protect"
                        },
                        {
                          "companyId": "03eb6e61-9806-11ed-84f2-c747fb71e467",
                          "id": "01e2f810-a0b5-11ed-bbc0-252385d6d388",
                          "tagId": "7268d820-a08d-11ed-bbc0-252385d6d389",
                          "value": "Jetstack"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TagValuesResponse"
                }
              }
            },
            "description": "Tag values in response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Tag not found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve values for a tag",
        "tags": [
          "Tags"
        ]
      },
      "post": {
        "description": "Create tag values for a tag with 'name' attribute matching specified value",
        "operationId": "tag_values_create",
        "parameters": [
          {
            "description": "Name of the tag.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "description": "Name of the tag.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "An example for creation of new values for a tag.": {
                  "description": "An example for creation of new values for a tag.",
                  "value": {
                    "values": [
                      "TLS Protect",
                      "Jetstack"
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TagValuesRequest"
              }
            }
          },
          "description": "The values of the tag.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "The count and the properties of the created values.": {
                    "description": "The count and the properties of the created values.",
                    "summary": "The count and the properties of the created values.",
                    "value": {
                      "count": 1,
                      "values": [
                        {
                          "companyId": "03eb6e61-9806-11ed-84f2-c747fb71e467",
                          "id": "01e2f810-a0b5-11ed-bbc0-252385d6d389",
                          "tagId": "7268d820-a08d-11ed-bbc0-252385d6d389",
                          "value": "TLS Protect"
                        },
                        {
                          "companyId": "03eb6e61-9806-11ed-84f2-c747fb71e467",
                          "id": "01e2f810-a0b5-11ed-bbc0-252385d6d388",
                          "tagId": "7268d820-a08d-11ed-bbc0-252385d6d389",
                          "value": "Jetstack"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TagValuesResponse"
                }
              }
            },
            "description": "Tag values created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Create tag values",
        "tags": [
          "Tags"
        ]
      }
    },
    "/v1/tags/{name}/values/{value}": {
      "delete": {
        "description": "Delete a value associated with a tag",
        "operationId": "tags_deleteValueByName",
        "parameters": [
          {
            "description": "Name of the tag",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "description": "Name of the tag",
              "type": "string"
            }
          },
          {
            "description": "Name of the value to delete",
            "in": "path",
            "name": "value",
            "required": true,
            "schema": {
              "description": "Name of the value to delete",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Tag value deleted"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Tag not found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Delete a tag value",
        "tags": [
          "Tags"
        ]
      }
    },
    "/v1/tags/values": {
      "get": {
        "description": "Retrieve tag values for all tags",
        "operationId": "tags_getAllValues",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "The count and the properties of the values.": {
                    "description": "The count and the properties of the values.",
                    "summary": "The count and the properties of the values.",
                    "value": {
                      "count": 2,
                      "values": [
                        {
                          "companyId": "03eb6e61-9806-11ed-84f2-c747fb71e467",
                          "id": "01e2f810-a0b5-11ed-bbc0-252385d6d389",
                          "tagId": "7268d820-a08d-11ed-bbc0-252385d6d389",
                          "value": "TLS Protect"
                        },
                        {
                          "companyId": "03eb6e61-9806-11ed-84f2-c747fb71e467",
                          "id": "01e2f810-a0b5-11ed-bbc0-252385d6d388",
                          "tagId": "7268d820-a08d-11ed-bbc0-252385d6d389",
                          "value": "Jetstack"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TagValuesResponse"
                }
              }
            },
            "description": "Tag values in response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve values for all tags",
        "tags": [
          "Tags"
        ]
      }
    },
    "/v1/tags/creation": {
      "post": {
        "description": "Create tags in bulk with optional values",
        "operationId": "tags_bulk_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagsBulkRequest"
              }
            }
          },
          "description": "Properties of the new tags.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Properties of the created tags.": {
                    "description": "Properties of the created tags.",
                    "summary": "Properties of the created tags.",
                    "value": {
                      "tagsAndValues": [
                        {
                          "tag": {
                            "companyId": "cc8bc150-c003-11ee-8a3a-ed2fabd6a7bf",
                            "id": "c5ffb2b0-c1e3-11ee-b805-8dec6e4b2523",
                            "isReserved": false,
                            "key": "newtag",
                            "name": "newTag"
                          },
                          "values": [
                            {
                              "companyId": "cc8bc150-c003-11ee-8a3a-ed2fabd6a7bf",
                              "id": "c60b7280-c1e3-11ee-b805-8dec6e4b2523",
                              "tagId": "c5ffb2b0-c1e3-11ee-b805-8dec6e4b2523",
                              "value": "value1"
                            },
                            {
                              "companyId": "cc8bc150-c003-11ee-8a3a-ed2fabd6a7bf",
                              "id": "c6105480-c1e3-11ee-b805-8dec6e4b2523",
                              "tagId": "c5ffb2b0-c1e3-11ee-b805-8dec6e4b2523",
                              "value": "value2"
                            }
                          ]
                        },
                        {
                          "tag": {
                            "companyId": "cc8bc150-c003-11ee-8a3a-ed2fabd6a7bf",
                            "id": "3ba7c8e0-c1e4-11ee-b805-8dec6e4b2523",
                            "isReserved": false,
                            "key": "oldtag",
                            "name": "oldTag"
                          },
                          "values": []
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TagsAndValuesResponse"
                }
              }
            },
            "description": "Tags are created. Details in response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Create tags in bulk",
        "tags": [
          "Tags"
        ]
      }
    },
    "/v1/tags/deletion": {
      "post": {
        "description": "Delete tags in bulk by specified keys and values",
        "operationId": "tags_bulk_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagsBulkRequest"
              }
            }
          },
          "description": "Properties of the tags to delete.",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Tags are deleted"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Tags not found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Delete tags in bulk",
        "tags": [
          "Tags"
        ]
      }
    },
    "/v1/tagsassignment": {
      "patch": {
        "description": "Replace, add, or delete one or more tags or tag values to/from one or more entities",
        "operationId": "tags_assignToEntities",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "An example for add new assignments.": {
                  "description": "An example for add new assignments.",
                  "value": {
                    "action": "ADD",
                    "entityIds": [
                      "2b0ecca0-303a-11ed-ad49-4fd2c6030f7f",
                      "2aaa6580-303a-11ed-ad49-4fd2c6030f7f"
                    ],
                    "entityType": "CERTIFICATE",
                    "targetedTags": [
                      "Application:TLS Protect",
                      "World"
                    ]
                  }
                },
                "An example for delete all assignments.": {
                  "description": "An example for delete all assignments.",
                  "value": {
                    "action": "DELETE_ALL",
                    "entityIds": [
                      "2b0ecca0-303a-11ed-ad49-4fd2c6030f7f",
                      "2aaa6580-303a-11ed-ad49-4fd2c6030f7f"
                    ],
                    "entityType": "CERTIFICATE"
                  }
                },
                "An example for delete assignments.": {
                  "description": "An example for delete assignments.",
                  "value": {
                    "action": "DELETE",
                    "entityIds": [
                      "2b0ecca0-303a-11ed-ad49-4fd2c6030f7f",
                      "2aaa6580-303a-11ed-ad49-4fd2c6030f7f"
                    ],
                    "entityType": "CERTIFICATE",
                    "targetedTags": [
                      "Application:TLS Protect",
                      "World"
                    ]
                  }
                },
                "An example for replace all assignments.": {
                  "description": "An example for replace all assignments.",
                  "value": {
                    "action": "REPLACE",
                    "entityIds": [
                      "2b0ecca0-303a-11ed-ad49-4fd2c6030f7f",
                      "2aaa6580-303a-11ed-ad49-4fd2c6030f7f"
                    ],
                    "entityType": "CERTIFICATE",
                    "targetedTags": [
                      "Application:TLS Protect",
                      "World"
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TagsAssignRequest"
              }
            }
          },
          "description": "Properties of the assignments.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Properties of the created tag.": {
                    "description": "Properties of the created tag.",
                    "summary": "Properties of the created tag.",
                    "value": {
                      "tagsAssignInformation": [
                        {
                          "companyId": "03eb6e61-9806-11ed-84f2-c747fb71e467",
                          "creationDate": "2023-01-30T16:28:53.166+00:00",
                          "entityId": "265f6d30-a0bb-11ed-aee0-89fe7e5f5d0c",
                          "entityType": "CERTIFICATE",
                          "modificationDate": "2023-01-30T16:28:53.166+00:00",
                          "tags": [
                            "Application:TLS Protect",
                            "World"
                          ]
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TagsAssignResponse"
                }
              }
            },
            "description": "Tag assign response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Replace, add, or delete tags or values",
        "tags": [
          "Tags"
        ]
      }
    },
    "/v1/tagsassignment/aggregates": {
      "post": {
        "description": "Bulk operation to retrieve number of entities per tag",
        "operationId": "tags_assignmentAggregates",
        "requestBody": {
          "content": {
            "*/*": {
              "examples": {
                "An example to get tags aggregates.": {
                  "description": "An example to get tags aggregates.",
                  "summary": "An example to get tags aggregates.",
                  "value": {
                    "entityType": "CERTIFICATE",
                    "tags": [
                      "Application:TLS Protect",
                      "World"
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TagsAssignmentAggregatesRequest"
              }
            }
          },
          "description": "Entity Type and list of tags and/or tag:value pairs.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Number of entities specified by type for each tag.": {
                    "description": "Number of entities specified by type for each tag.",
                    "summary": "Number of entities specified by type for each tag.",
                    "value": {
                      "tagsAggregates": {
                        "Application:TLS Protect": {
                          "count": 5,
                          "entityType": "CERTIFICATE"
                        },
                        "World": {
                          "count": 2,
                          "entityType": "CERTIFICATE"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TagsAssignmentAggregatesResponse"
                }
              }
            },
            "description": "Entity type and total count per tag in response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Bulk operation to retrieve number of entities per tag",
        "tags": [
          "Tags"
        ]
      }
    },
    "/v1/distributedissuers/configurations": {
      "post": {
        "description": "Adds a new Firefly configuration, which links the following together - Sub CA Provider, Policies used to determine which certificates can issue, and the IdP (Identity Provider) Firefly should trust when receiving signed JWTs.",
        "operationId": "configurations_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedConfigurationInformation"
                }
              }
            },
            "description": "Firefly configuration successfully created; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Create a new Firefly configuration",
        "tags": [
          "Firefly Configurations"
        ]
      },
      "get": {
        "description": "Retrieves a list of all Firefly configurations. Configurations link together Sub CA Providers, Policies and Identity Provider information. Together these allow a Firefly service obtain an certificate.",
        "operationId": "configurations_getAll",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationResponse"
                }
              }
            },
            "description": "All Firefly configurations."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the details of all Firefly configurations",
        "tags": [
          "Firefly Configurations"
        ]
      }
    },
    "/v1/distributedissuers/configurations/{id}": {
      "get": {
        "description": "Retrieves the details of the existing Firefly configuration for the specified `id`.",
        "operationId": "configurations_getById",
        "parameters": [
          {
            "description": "Firefly configuration UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedConfigurationInformation"
                }
              }
            },
            "description": "Specified Firefly configuration found; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Specified Firefly configuration was not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get configurations details for a specific Firefly configuration",
        "tags": [
          "Firefly Configurations"
        ]
      },
      "patch": {
        "description": "Updates (replaces) fields on a Firefly configuration that has the specified `id`. Only fields specified in the request will be updated. Fields not specified in the request are not modified.",
        "operationId": "configurations_update",
        "parameters": [
          {
            "description": "Firefly configuration UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "An example for updating some details of a Firefly configuration.": {
                  "description": "An example for updating some details of a Firefly configuration.",
                  "value": {
                    "clientAuthentication": {
                      "type": "JWT_JWKS",
                      "urls": [
                        "https://test.com"
                      ]
                    },
                    "name": "New configuration name"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ConfigurationUpdateRequest"
              }
            }
          },
          "description": "Firefly configuration's details to update.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Updates properties of the inventory monitoring configuration.": {
                    "description": "Updates properties of the inventory monitoring configuration.",
                    "summary": "Updates properties of the inventory monitoring configuration.",
                    "value": {
                      "clientAuthentication": {
                        "type": "JWT_JWKS",
                        "urls": [
                          "https://test.com"
                        ]
                      },
                      "name": "New configuration name"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ExtendedConfigurationInformation"
                }
              }
            },
            "description": "Specified Firefly configuration updated; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Specified Firefly configuration was not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update a Firefly configuration's details",
        "tags": [
          "Firefly Configurations"
        ]
      },
      "delete": {
        "description": "Deletes the Firefly configuration for the specified `id`. Before deleting a configuration, be sure no Firefly instances use that configuration, or they will no longer function.",
        "operationId": "configurations_delete",
        "parameters": [
          {
            "description": "Firefly configuration UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationDeleteResponse"
                }
              }
            },
            "description": "Specified Firefly configuration was deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Firefly configuration was not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Remove a Firefly configuration",
        "tags": [
          "Firefly Configurations"
        ]
      }
    },
    "/v1/distributedissuers/subcaproviders": {
      "post": {
        "description": "Creates a sub ca provider",
        "operationId": "subcaproviders_create",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "An example for creation of new sub CA provider.": {
                  "description": "An example for creation of new sub CA provider.",
                  "value": "{\n  \"name\": \"Some Sub CA\",\n  \"caAccountId\": \"4ece3180-b1e0-11ed-862d-ad36b18e787a\",\n  \"caProductOptionId\": \"6b3d8d20-b1e0-11ed-9c2f-953e35982bbd\",\n  \"commonName\": \"example.com\",\n  \"organization\": \"Some organization\",\n  \"organizationalUnit\": \"Some organizational unit\",\n  \"country\": \"US\",\n  \"stateOrProvince\": \"Texas\",\n  \"locality\": \"San Antonio\",\n  \"keyAlgorithm\": \"EC_P256\",\n  \"validityPeriod\": \"P30D\",\n}\n"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/SubCaProviderCreateRequest"
              }
            }
          },
          "description": "Details of the new sub CA provider.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Details of the created sub CA provider.": {
                    "description": "Details of the created sub CA provider.",
                    "summary": "Details of the created sub CA provider.",
                    "value": {
                      "caAccountId": "4ece3180-b1e0-11ed-862d-ad36b18e787a",
                      "caProductOptionId": "6b3d8d20-b1e0-11ed-9c2f-953e35982bbd",
                      "caType": "BUILTIN",
                      "commonName": "example.com",
                      "companyId": "03eb6e61-9806-11ed-84f2-c747fb71e467",
                      "country": "US",
                      "creationDate": "2022-10-10T14:50:41.710+00:00",
                      "id": "2f3c6030-b1e0-11ed-a3ed-e3dbaf56a746",
                      "keyAlgorithm": "EC_P256",
                      "locality": "San Antonio",
                      "modificationDate": "2023-12-12T20:00:10.500+00:00",
                      "name": "Some Sub CA",
                      "organization": "Some organization",
                      "organizationalUnit": "Some organizational unit",
                      "stateOrProvince": "Texas",
                      "validityPeriod": "P30D"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SubCaProviderInformation"
                }
              }
            },
            "description": "Sub CA Provider was created; details in response body;"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Create a new Sub CA provider",
        "tags": [
          "Firefly Sub CA Providers"
        ]
      },
      "get": {
        "description": "Returns a list of all the subordinate CA providers along with their details.",
        "operationId": "subcaprovider_getAll",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "The details of the Sub CA providers.": {
                    "description": "The details of the Sub CA providers.",
                    "summary": "The details of the Sub CA providers.",
                    "value": {
                      "subCaProviders": [
                        {
                          "caAccountId": "4ece3180-b1e0-11ed-862d-ad36b18e787a",
                          "caProductOptionId": "6b3d8d20-b1e0-11ed-9c2f-953e35982bbd",
                          "caType": "BUILTIN",
                          "commonName": "example.com",
                          "companyId": "03eb6e61-9806-11ed-84f2-c747fb71e467",
                          "country": "US",
                          "creationDate": "2022-10-10T14:50:41.710+00:00",
                          "id": "2f3c6030-b1e0-11ed-a3ed-e3dbaf56a746",
                          "keyAlgorithm": "EC_P256",
                          "locality": "San Antonio",
                          "modificationDate": "2023-12-12T20:00:10.500+00:00",
                          "name": "Some Sub CA",
                          "organization": "Some organization",
                          "organizationalUnit": "Some organizational unit",
                          "stateOrProvince": "Texas",
                          "validityPeriod": "P30D"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SubCaProviderResponse"
                }
              }
            },
            "description": "All Sub CA providers with details."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the details of all Sub CA providers",
        "tags": [
          "Firefly Sub CA Providers"
        ]
      }
    },
    "/v1/distributedissuers/subcaproviders/{id}": {
      "get": {
        "description": "Retrieves the details of the subordinate CA provider that has the specified `id`.",
        "operationId": "subcaproviders_getById",
        "parameters": [
          {
            "description": "Sub CA provider UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Details of the sub CA provider.": {
                    "description": "Details of the sub CA provider.",
                    "summary": "Details of the sub CA provider.",
                    "value": {
                      "caAccountId": "4ece3180-b1e0-11ed-862d-ad36b18e787a",
                      "caProductOptionId": "6b3d8d20-b1e0-11ed-9c2f-953e35982bbd",
                      "caType": "BUILTIN",
                      "commonName": "example.com",
                      "companyId": "03eb6e61-9806-11ed-84f2-c747fb71e467",
                      "country": "US",
                      "creationDate": "2022-10-10T14:50:41.710+00:00",
                      "id": "2f3c6030-b1e0-11ed-a3ed-e3dbaf56a746",
                      "keyAlgorithm": "EC_P256",
                      "locality": "San Antonio",
                      "modificationDate": "2023-12-12T20:00:10.500+00:00",
                      "name": "Some Sub CA",
                      "organization": "Some organization",
                      "organizationalUnit": "Some organizational unit",
                      "stateOrProvince": "Texas",
                      "validityPeriod": "P30D"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SubCaProviderInformation"
                }
              }
            },
            "description": "Specified sub CA provider found; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Specified sub CA provider was not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get a Sub CA provider's details",
        "tags": [
          "Firefly Sub CA Providers"
        ]
      },
      "patch": {
        "description": "Updates (replaces) details of the subordinate CA provider that has the specified `id`. Only fields specified in the request will be updated.",
        "operationId": "subcaproviders_update",
        "parameters": [
          {
            "description": "Sub CA provider UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "An example for updating some details of a Sub CA provider.": {
                  "description": "An example for updating some details of a Sub CA provider.",
                  "value": "{\n  \"stateOrProvince\": \"Illinois\",\n  \"locality\": \"Chicago\",\n}\n"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/SubCaProviderUpdateRequest"
              }
            }
          },
          "description": "Sub CA provider's details to update.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubCaProviderInformation"
                }
              }
            },
            "description": "Sub CA provider updated; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Specified Sub CA provider was not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update a Sub CA provider's details",
        "tags": [
          "Firefly Sub CA Providers"
        ]
      },
      "delete": {
        "description": "Deletes the subordinate CA provider that has the specified `id`.",
        "operationId": "subcaproviders_delete",
        "parameters": [
          {
            "description": "Sub CA provider UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubCaProviderDeleteResponse"
                }
              }
            },
            "description": "Specified Sub CA provider was deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Specified sub CA provider was not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Remove a Sub CA provider",
        "tags": [
          "Firefly Sub CA Providers"
        ]
      }
    },
    "/v1/distributedissuers/policies": {
      "post": {
        "description": "Add a new a Firefly policy for a Firefly to use to ensure compliance with company restrictions for creating a short-lived certificate.",
        "operationId": "policies_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPolicyInformation"
                }
              }
            },
            "description": "Firefly policy was created; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Create a new Firefly policy",
        "tags": [
          "Firefly Policies"
        ]
      },
      "get": {
        "description": "Retrieves all policy details for all Firefly policies. Policies are sets of rules that constrain how certificates can be issued, as well as set default values for some fields.",
        "operationId": "policies_getAll",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            },
            "description": "All Firefly policies; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the details of all Firefly policies",
        "tags": [
          "Firefly Policies"
        ]
      }
    },
    "/v1/distributedissuers/policies/{id}": {
      "get": {
        "description": "Retrieves the details of the Firefly policy with the specified `id`.",
        "operationId": "policies_getById",
        "parameters": [
          {
            "description": "Firefly policy UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPolicyInformation"
                }
              }
            },
            "description": "Specified Firefly policy found; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Specified Firefly policy was not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get a Firefly policy's details",
        "tags": [
          "Firefly Policies"
        ]
      },
      "patch": {
        "description": "Updates (replaces) details of the Firefly policy that has the specified `id`. Only fields specified in the request will be updated. Fields not included in the request will be ignored.",
        "operationId": "policies_update",
        "parameters": [
          {
            "description": "Firefly policy UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPolicyInformation"
                }
              }
            },
            "description": "Firefly policy updated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Firefly policy was not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update a Firefly policy's details",
        "tags": [
          "Firefly Policies"
        ]
      },
      "delete": {
        "description": "Deletes the Firefly policy that has the specified `id`.",
        "operationId": "policies_delete",
        "parameters": [
          {
            "description": "Firefly policy UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyDeleteResponse"
                }
              }
            },
            "description": "Specified Firefly policy was deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Specified Firefly policy was not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Remove a Firefly policy",
        "tags": [
          "Firefly Policies"
        ]
      }
    },
    "/v1/distributedissuers/intermediatecertificates/{id}": {
      "get": {
        "description": "Retrieves the details of the Firefly intermediate certificate that has the specified `id`.",
        "operationId": "intermediatecertificates_getById",
        "parameters": [
          {
            "description": "Firefly intermediate certificate UUID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntermediateCertificateInformation"
                }
              }
            },
            "description": "Firefly intermediate certificate found; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Specified Firefly intermediate certificate was not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get a Firefly intermediate certificate",
        "tags": [
          "Firefly Intermediate Certificates"
        ]
      }
    },
    "/v1/distributedissuers/intermediatecertificates": {
      "get": {
        "description": "Retrieves the details of all Firefly intermediate certificates. These are the CA certificates issued to the Firefly instances that allow them to issue short-lived certificates.",
        "operationId": "intermediatecertificates_getAll",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntermediateCertificateResponse"
                }
              }
            },
            "description": "All Firefly intermediate certificates and details."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get the details of all Firefly intermediate certificates",
        "tags": [
          "Firefly Intermediate Certificates"
        ]
      }
    },
    "/v1/certificaterequests/{id}/approval/{decision}": {
      "post": {
        "description": "Approve or reject certificate request that is waiting for user action",
        "operationId": "certificaterequests_approve",
        "parameters": [
          {
            "description": "UUID of a Certificate Request",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "User's decision - either approve or reject",
            "in": "path",
            "name": "decision",
            "required": true,
            "schema": {
              "enum": [
                "APPROVE",
                "REJECT"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovalDecisionRequest"
              }
            }
          },
          "description": "In case of rejection contains the reason for that"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRequestInformation1"
                }
              }
            },
            "description": "Certificate Request approved/rejected"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Certificate Request not found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Approve or reject pending certificate request",
        "tags": [
          "Certificate Approvals"
        ]
      }
    },
    "/v1/certificaterequests/approvalrules": {
      "post": {
        "description": "Create certificate request workflow approval rule",
        "operationId": "certificaterequests_approval_rule_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateRequestApprovalRulesRequest"
              }
            }
          },
          "description": "Properties of the new approval rule.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRequestApprovalRuleOpenApi"
                }
              }
            },
            "description": "Approval rule is created. Details in response body"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Create an approval rule for certificate requests",
        "tags": [
          "Certificate Approvals"
        ]
      },
      "get": {
        "description": "Retrieve all certificate request workflow approval rules for the current company.",
        "operationId": "certificaterequests_approval_rules_getAll",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Retrieves the details of all certificate request workflow approval rules for the company.": {
                    "description": "Retrieves the details of all certificate request workflow approval rules for the company.",
                    "summary": "Retrieves the details of all certificate request workflow approval rules for the company.",
                    "value": "    {\n             \"approvalRules\": [\n                  {\n                     \"id\": \"bf628350-1b1d-11ee-8f4b-c3a1fbe3bf93\",\n                     \"name\": \"rule1\",\n                     \"approvalType\": \"ALL\",\n                     \"conditions\": {\n                         \"applicationIds\": [\n                             \"44bf51c0-1b1b-11ee-bdc6-11a9c83564a3\",\n                             \"54bf51c0-1b1b-11ee-bdc6-11a9c83564a3\",\n                             \"64bf51c0-1b1b-11ee-bdc6-11a9c83564a3\",\n                         ],\n                         \"certificateIssuingTemplateIds\" : [\n                              \"abdbc6a0-1b1b-11ee-ae18-df3505892890\"\n                         ],\n                         \"certificateAuthorityAccountIds\" : [\n                              \"32dbc6a0-1b1b-11ee-ae18-df3505892888\"\n                         ]\n                     },\n                     \"exceptions\" : [\n                        \"applicationIds\": [\n                             \"1abf51c0-1b1b-11ee-bdc6-11a9c83564a3\"\n                         ],\n                         \"requestors\" : [\n                           {\n                               \"id\": \"acdbc6a0-1b1b-11ee-ae18-df3505892890\",\n                               \"type\": \"TEAM\"\n                           }\n                         ]\n                     ]\n                     \"priority\": 1,\n                     \"approvers\": [\n                         {\n                             \"id\": \"ebdbc6a0-1b1b-11ee-ae18-df3505892890\",\n                             \"type\": \"TEAM\"\n                         },\n                         {\n                             \"id\": \"abdbc6a0-1b1b-11ee-ae18-df3505892890\",\n                             \"type\": \"USER\"\n                         }\n                     ],\n                     \"autoRejectionThreshold\": 5,\n                     \"autoApproveOnRenew\": false,\n                     \"continueProcessingOnException\": false\n                 },\n                 {\n                     \"id\": \"bf628350-1b1d-11ee-8f4b-c3a1fbe3bf93\",\n                     \"name\": \"rule2\",\n                     \"approvalType\": \"ALL\",\n                     \"conditions\": {\n                         \"applicationIds\": [\n                             \"44bf51c0-1b1b-11ee-bdc6-11a9c83564a3\"\n                         ]\n                     },\n                     \"priority\": 3,\n                     \"approvers\": [\n                         {\n                             \"id\": \"ebdbc6a0-1b1b-11ee-ae18-df3505892890\",\n                             \"type\": \"TEAM\"\n                         }\n                     ]\n                 },\n                 {\n                     \"id\": \"af628350-1b1d-11ee-8f4b-c3a1fbe3bf93\",\n                     \"name\": \"rule4\",\n                     \"approvalType\": \"ALL\",\n                     \"conditions\": {\n                         \"applicationIds\": [\n                             \"44bf51c0-1b1b-11ee-bdc6-11a9c83564a3\"\n                         ]\n                     },\n                     \"priority\": 4,\n                     \"approvers\": [\n                         {\n                             \"id\": \"abdbc6a0-1b1b-11ee-ae18-df3505892890\",\n                             \"type\": \"USER\"\n                         }\n                     ],\n                     \"autoRejectionThreshold\": 5,\n                     \"autoApproveOnRenew\": false\n\n                 }\n             ]\n         }\n"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CertificateRequestApprovalRulesResponseOpenApi"
                }
              }
            },
            "description": "All approval rules for the current company; details in response body."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Get all approval rules",
        "tags": [
          "Certificate Approvals"
        ]
      }
    },
    "/v1/certificaterequests/approvalrules/{id}": {
      "get": {
        "description": "Retrieve certificate request workflow approval rule with 'id' attribute matching specified value; specified value should be uuid not numeric",
        "operationId": "certificaterequests_approval_rule_getById",
        "parameters": [
          {
            "description": "UUID of an approval rule.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of an approval rule.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Retrieve certificate request workflow approval rule with 'id' attribute matching specified value": {
                    "description": "Retrieve certificate request workflow approval rule with 'id' attribute matching specified value",
                    "value": "    {\n       \"id\": \"bf628350-1b1d-11ee-8f4b-c3a1fbe3bf93\",\n       \"name\": \"rule1\",\n       \"approvalType\": \"ALL\",\n       \"conditions\": {\n           \"applicationIds\": [\n               \"44bf51c0-1b1b-11ee-bdc6-11a9c83564a3\",\n               \"54bf51c0-1b1b-11ee-bdc6-11a9c83564a3\",\n               \"64bf51c0-1b1b-11ee-bdc6-11a9c83564a3\",\n           ],\n           \"certificateIssuingTemplateIds\" : [\n                \"abdbc6a0-1b1b-11ee-ae18-df3505892890\"\n           ],\n           \"certificateAuthorityAccountIds\" : [\n                \"32dbc6a0-1b1b-11ee-ae18-df3505892888\"\n           ]\n       },\n       \"exceptions\" : [\n          \"applicationIds\": [\n               \"1abf51c0-1b1b-11ee-bdc6-11a9c83564a3\"\n           ],\n           \"requestors\" : [\n             {\n                 \"id\": \"acdbc6a0-1b1b-11ee-ae18-df3505892890\",\n                 \"type\": \"TEAM\"\n             }\n           ]\n       ]\n       \"priority\": 1,\n       \"approvers\": [\n           {\n               \"id\": \"ebdbc6a0-1b1b-11ee-ae18-df3505892890\",\n               \"type\": \"TEAM\"\n           },\n           {\n               \"id\": \"abdbc6a0-1b1b-11ee-ae18-df3505892890\",\n               \"type\": \"USER\"\n           }\n       ],\n       \"autoRejectionThreshold\": 5,\n       \"autoApproveOnRenew\": false,\n       \"continueProcessingOnException\": false\n   }\n"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CertificateRequestApprovalRuleOpenApi"
                }
              }
            },
            "description": "Approval rule matching specified id"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Approval rule not found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve approval rule by id",
        "tags": [
          "Certificate Approvals"
        ]
      },
      "put": {
        "description": "Can be used to update specific fields of the approval rule that has the specified `id`",
        "operationId": "certificaterequests_approval_rule_update",
        "parameters": [
          {
            "description": "UUID of an approval rule.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "UUID of an approval rule.",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateRequestApprovalRulesUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRequestApprovalRuleOpenApi"
                }
              }
            },
            "description": "Approval rule updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Approval rule Not Found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Request Conditions Failed"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update certificate request workflow approval rule",
        "tags": [
          "Certificate Approvals"
        ]
      },
      "delete": {
        "description": "Delete certificate request workflow approval rule with 'id' attribute matching specified value; specified value should be uuid not numeric",
        "operationId": "certificaterequests_approval_rule_delete",
        "parameters": [
          {
            "description": "UUID of an approval rule.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRequestApprovalRuleDeleteResponseOpenApi"
                }
              }
            },
            "description": "Specified approval rule was deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Specified approval rule was not found."
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Delete certificate request workflow approval rule",
        "tags": [
          "Certificate Approvals"
        ]
      }
    },
    "/v1/certificaterequests/approvalrequests/{entityId}": {
      "get": {
        "description": "Retrieve approval request by specified certificate request id",
        "operationId": "certificaterequests_approvalrequest",
        "parameters": [
          {
            "description": "Entity UUID of the approval request",
            "in": "path",
            "name": "entityId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Retrieve certificate request workflow approval rule with 'id' attribute matching specified value": {
                    "description": "Retrieve certificate request workflow approval rule with 'id' attribute matching specified value",
                    "value": "    {\n        \"id\": \"5ece3180-b1e0-11ed-862d-ad36b18e787d\",\n        \"companyId\": \"03eb6e61-9806-11ed-84f2-c747fb71e467\",\n        \"entityId\": \"5ece3180-b1e0-11ed-862d-ad36b18e787b\",\n        \"requiredApprovalsCount\": 2,\n        \"status\": \"PENDING_FINAL_APPROVAL\",\n        \"requestorId\": \"8268d820-a08d-11ed-bbc0-252385d6d389\",\n        \"approvers\": [\n            {\n                \"id\": \"8268d820-a08d-11ed-bbc0-252385d6d389\",\n                \"type\": \"USER\"\n            }\n        ],\n        \"finalApprover\": {\n            \"id\": \"8268d820-a08d-11ed-bbc0-252385d6d390\",\n            \"type\": \"USER\"\n        },\n        \"approversOutcome\": [\n            {\n                \"id\": \"5ece3180-b1e0-11ed-862d-ad36b18e787c\",\n                \"companyId\": \"03eb6e61-9806-11ed-84f2-c747fb71e467\",\n                \"userId\": \"8268d820-a08d-11ed-bbc0-252385d6d389\",\n                \"status\": \"APPROVED\",\n                \"reason\": \"Certificate host is retired\",\n                \"creationDate\": \"2023-07-27T05:29:23.131+00:00\"\n            }\n        ],\n        \"autoRejectionThreshold\": 5\n        \"modificationDate\": \"2023-07-27T05:29:23.131+00:00\",\n        \"creationDate\": \"2023-07-26T05:19:23.131+00:00\"\n    }\n"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequestInformation"
                }
              }
            },
            "description": "Approval Request information"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Approval Request not found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            },
            "description": "Incomplete or malformed request"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve approval request for specific certificate request",
        "tags": [
          "Certificate Approvals"
        ]
      }
    },
    "/v1/plugins": {
      "get": {
        "description": "Retrieve all the plugins for the tenant.",
        "operationId": "get-v1-plugins",
        "parameters": [
          {
            "description": "Filter by provided plugin type.",
            "in": "query",
            "name": "pluginTypes",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/PluginType"
              },
              "minItems": 1,
              "type": "array",
              "uniqueItems": true
            }
          },
          {
            "description": "Include disabled plugins if set to true.",
            "in": "query",
            "name": "includeDisabled",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "plugins": {
                      "items": {
                        "$ref": "#/components/schemas/Plugin"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "plugins"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success. All plugins retrieved."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve all plugins",
        "tags": [
          "Plugins"
        ]
      },
      "post": {
        "description": "Create a custom plugin for your tenant's exclusive use. The user must be a SYSTEM_ADMIN or a PKI_ADMIN.",
        "operationId": "post-v1-plugins",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicPluginCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginResponse"
                }
              }
            },
            "description": "Success. Plugin created."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Create a local plugin",
        "tags": [
          "Plugins"
        ]
      }
    },
    "/v1/plugins/{id}": {
      "get": {
        "description": "Retrieve a plugin with the specified ID.",
        "operationId": "get-v1-plugins-id",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "Success. Plugin retrieved."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve plugin by ID",
        "tags": [
          "Plugins"
        ]
      },
      "patch": {
        "description": "Update a plugin with specified ID. Plugin must be owned by the tenant and the user must be a SYSTEM_ADMIN or a PKI_ADMIN.",
        "operationId": "patch-v1-plugins-id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicPluginUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Plugin updated."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Update a local plugin",
        "tags": [
          "Plugins"
        ]
      },
      "delete": {
        "description": "Delete a plugin with the specified ID. Plugin must be owned by the tenant and the user must be a SYSTEM_ADMIN or a PKI_ADMIN.",
        "operationId": "delete-v1-plugins-id",
        "responses": {
          "204": {
            "description": "No Content."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Delete a local plugin",
        "tags": [
          "Plugins"
        ]
      },
      "parameters": [
        {
          "description": "Plugin ID",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v1/plugins/{id}/disablements": {
      "post": {
        "description": "Set a plugin to be disabled for your tenant.",
        "operationId": "post-v1-plugins-id-exclusions",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginResponse"
                }
              }
            },
            "description": "Successfully disabled the plugin for the current tenant."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Disable a plugin",
        "tags": [
          "Plugins"
        ]
      },
      "delete": {
        "description": "Remove a plugin exclusion from your tenant.",
        "operationId": "delete-v1-plugins-id-exclusions",
        "responses": {
          "204": {
            "description": "No Content. Successfully deleted the plugin disablement."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Remove plugin disablement",
        "tags": [
          "Plugins"
        ]
      },
      "parameters": [
        {
          "description": "Plugin ID that is currently marked as disabled.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v1/plugins/disablements": {
      "get": {
        "description": "Retrieve all the disabled plugins for the current tenant.",
        "operationId": "get-v1-plugins-exclusions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginResponse"
                }
              }
            },
            "description": "Successfully retrieved all the disabled plugins for the current tenant."
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieve all disabled plugins",
        "tags": [
          "Plugins"
        ]
      }
    },
    "/v1/serviceaccounts": {
      "get": {
        "description": "Retrieves all the Service Accounts the user has access to",
        "operationId": "get-v1-serviceaccounts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetServiceAccountsResponseBody"
                }
              }
            },
            "description": "The list of all Service Account details the user has access to"
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieves all the Service Accounts the user has access to",
        "tags": [
          "Service Accounts"
        ]
      },
      "post": {
        "description": "Creates a Service Account with the information provided. The service account is later used for machine to machine authentication. For rsaKey authentication service accounts publicKey key is required. Provide authenticationType field for creating other service accounts with another type of authentication.",
        "operationId": "create-v1-serviceaccounts",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Custom API Integration": {
                  "$ref": "#/components/examples/CreateCustomAPIReqBodyExample"
                },
                "Firefly SA": {
                  "$ref": "#/components/examples/CreateFireflyReqBodyExample"
                },
                "Firefly SA (Auto-generate credentials)": {
                  "$ref": "#/components/examples/CreateFireflyAutogenerateReqBodyExample"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateServiceAccountRequestBody"
              }
            }
          },
          "description": "The Service Account data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Firefly SA": {
                    "$ref": "#/components/examples/CreateFireflyResBodyExample"
                  },
                  "Firefly SA (Auto-generate credentials)": {
                    "$ref": "#/components/examples/CreateFireflyAutogenerateResBodyExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CreateServiceAccountResponseBody"
                }
              }
            },
            "description": "The id assigned to the created Service Account. If the Service Account has Venafi registry purpose and is created with ociToken authentication type, the ociRegistryToken and ociAccountName are returned in the response."
          },
          "400": {
            "description": "BadRequest. Return ErrInvalidPayload when creating rsaKey authentication service accounts and publicKey not provided."
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Creates a Service Account",
        "tags": [
          "Service Accounts"
        ]
      }
    },
    "/v1/serviceaccounts/{id}": {
      "get": {
        "description": "Retrieves the information of an Service Account associated to the given id",
        "operationId": "get-v1-serviceaccounts-byId",
        "parameters": [
          {
            "description": "The ID corresponding to the Service Account you want to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "933507dd-0286-11ef-bc25-8a00a468403f",
              "format": "UUID",
              "type": "string",
              "x-go-type": "uuid.UUID",
              "x-go-type-import": {
                "path": "github.com/google/uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Get Service Account by ID": {
                    "$ref": "#/components/examples/GetServiceAccountsByClientIDResBodyExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountDetails"
                }
              }
            },
            "description": "The Service Account details for the given id"
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Gets a Service Account",
        "tags": [
          "Service Accounts"
        ]
      },
      "patch": {
        "description": "Updates the specified fields for a given service account matching the provided id. Providing either a new credentialLifetime or a new publicKey will result of the corresponding credentials associated to this Service Account",
        "operationId": "patch-v1-serviceaccounts-byId",
        "parameters": [
          {
            "description": "The ID corresponding to the Service Account you want to update",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "933507dd-0286-11ef-bc25-8a00a468403f",
              "format": "UUID",
              "type": "string",
              "x-go-type": "uuid.UUID",
              "x-go-type-import": {
                "path": "github.com/google/uuid"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchServiceAccountByClientIDRequestBody"
              }
            }
          },
          "description": "The data to update",
          "required": true
        },
        "responses": {
          "204": {
            "description": "The Service Account was updated successfully"
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Updates a Service Account",
        "tags": [
          "Service Accounts"
        ]
      },
      "delete": {
        "description": "Deletes the Service Account corresponding to the provided id. Deleting a Service Account also invalidates its associated credentials.",
        "operationId": "delete-v1-serviceaccounts-byId",
        "parameters": [
          {
            "description": "The ID corresponding to the Service Account you want to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "933507dd-0286-11ef-bc25-8a00a468403f",
              "format": "UUID",
              "type": "string",
              "x-go-type": "uuid.UUID",
              "x-go-type-import": {
                "path": "github.com/google/uuid"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The Service Account was deleted successfully"
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Deletes a Service Account",
        "tags": [
          "Service Accounts"
        ]
      }
    },
    "/v1/serviceaccounts/scopes": {
      "get": {
        "description": "Retrieves all the Service Accounts Scopes available for the user",
        "operationId": "get-v1-serviceaccountscopes",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetServiceAccountScopesResponseBody"
                }
              }
            },
            "description": "The list of all Service Account Scopes available for the user"
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Retrieves all the Service Accounts Scopes available for the user",
        "tags": [
          "Service Accounts"
        ]
      }
    },
    "/v1/serviceaccounts/{id}/ocitoken": {
      "put": {
        "description": "Regenerate the OCI registry token for a given service account matching the provided id. Providing a new OCI registry token to this Service Account and sending it back to the client back. Calling this endpoint will remove the current token for the service account and create a new one. Old token can not be used.",
        "operationId": "put-v1-serviceaccounts-byId-ocitoken",
        "parameters": [
          {
            "description": "The ID corresponding to the Service Account you want to regenerate the OCI registry token",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "933507dd-0286-11ef-bc25-8a00a468403f",
              "format": "UUID",
              "type": "string",
              "x-go-type": "uuid.UUID",
              "x-go-type-import": {
                "path": "github.com/google/uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutServiceAccountByClientIDOCITokenResponseBody"
                }
              }
            },
            "description": "The Service Account OCI registry token has been regenerated"
          },
          "400": {
            "description": "BadRequest. This also happens when trying to regenerate token for account without token based authentication"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Regenerate the OCI registry token for a Service Account with registry scope",
        "tags": [
          "Service Accounts"
        ]
      }
    },
    "/v1/serviceaccounts/{id}/credentials": {
      "put": {
        "description": "Updates the specified credentials for a given service account matching the provided id. Providing either a new credentialLifetime or a new publicKey will result of the corresponding credentials associated to this Service Account",
        "operationId": "put-v1-serviceaccounts-byId-credentials",
        "parameters": [
          {
            "description": "The ID corresponding to the Service Account you want to update",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "933507dd-0286-11ef-bc25-8a00a468403f",
              "format": "UUID",
              "type": "string",
              "x-go-type": "uuid.UUID",
              "x-go-type-import": {
                "path": "github.com/google/uuid"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutServiceAccountByClientIDCredentialsRequestBody"
              }
            }
          },
          "description": "The data to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutServiceAccountByClientIDCredentialsResponseBody"
                }
              }
            },
            "description": "The Service Account Credentials were updated successfully"
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "InternalServerError"
          }
        },
        "security": [
          {
            "tppl-api-key": []
          }
        ],
        "summary": "Updates a Service Account credentials",
        "tags": [
          "Service Accounts"
        ]
      }
    }
  },
  "servers": [
    {
      "description": "Test server for Developer Hub",
      "url": "https://api-dev172.qa.venafi.io"
    }
  ],
  "x-readme": {
    "samples-languages": [
      "curl",
      "go",
      "java",
      "javascript",
      "node",
      "python"
    ],
    "explorer-enabled": true,
    "proxy-enabled": true
  }
}
